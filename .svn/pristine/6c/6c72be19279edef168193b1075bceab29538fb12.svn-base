@* File: Areas/Allpart/Views/ScanATestB/Index.cshtml *@
@{
    ViewData["Title"] = "Check ULT data";
    Layout = "~/Areas/Allpart/Views/Shared/layout_allpart.cshtml";
}

<link href="~/assets/css/YRDCLC.css" rel="stylesheet" />

<div class="card shadow-sm">
    <div class="card-header bg-nvidia-green text-white">
        <h1 class="h4 mb-0 text-center">Tìm Kiếm Thông Tin ULT</h1>
    </div>
    <div class="card-body">
        <div class="row g-3 mb-4 align-items-center">
            <!-- Ô nhập danh sách SN/ULT/Model -->
            <div class="col-md-4">
                <textarea id="serialNumber" class="form-control" rows="3" placeholder="Nhập SerialNumber/ULT/Model"></textarea>
            </div>

            <!-- Chọn kiểu tra cứu -->
            <div class="col-md-2">
                <label for="type-options" class="form-label">Chọn kiểu tra cứu</label>
                <select id="type-options" class="form-select">
                    <option selected disabled>SELECT TYPE</option>
                    <option value="1">Tra cứu theo SN</option>
                    <option value="2">Tra cứu theo ULT</option>
                    <option value="3">Tra cứu theo Model</option>
                </select>
            </div>

            <!-- Khoảng thời gian (chỉ với model) -->
            <div id="time-tag" class="col-md-4">
                <label class="form-label">Khoảng thời gian</label>
                <div class="d-flex gap-2">
                    <div class="flex-fill">
                        <label for="startDate" class="form-label">Bắt đầu:</label>
                        <input type="datetime-local" id="startDate" class="form-control" />
                    </div>
                    <div class="flex-fill">
                        <label for="endDate" class="form-label">Kết thúc:</label>
                        <input type="datetime-local" id="endDate" class="form-control" />
                    </div>
                </div>
            </div>

            <!-- Chế độ hiển thị: ALL vs NEWEST -->
            <div class="col-md-2">
                <label for="view-mode" class="form-label">Chế độ hiển thị</label>
                <select id="view-mode" class="form-select" title="Chọn dữ liệu cho bảng và xuất Excel">
                    <option value="all" selected>Tất cả dữ liệu</option>
                    <option value="latest">Kết quả mới nhất (mỗi SN)</option>
                </select>
            </div>

            <!-- Nút hành động -->
            <div class="col-md-2 d-flex flex-column gap-2">
                <button onclick="search()" class="btn btn-nvidia-green w-100">Tìm kiếm</button>
                <button onclick="downloadExcel()" class="btn btn-nvidia-green w-100">Tải xuống Excel</button>
            </div>
        </div>

        <div class="mt-4">
            <div class="table-responsive align-items-center">
                <table id="ULTDataTable" class="display table table-bordered table-striped datatable-table" style="width:100%">
                    <thead>
                        <tr>
                            <th>TimeTest</th>
                            <th>Model</th>
                            <th>DateTest</th>
                            <th>Path_Test_On</th>
                            <th>Path_Test_Off</th>
                            <th>serial_number</th>
                            <th>ULT</th>
                            <th>Result_Test_On</th>
                            <th>Result_Test_Off</th>
                            <th>Error_Code</th>
                            <th>SendTime</th>
                            <th>Status</th>
                            <th>DataType</th>
                            <th>StationTest</th>
                        </tr>
                    </thead>
                    <tbody id="ULTDataTableBody"></tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // === State ===
        let rawResults = [];   // Dữ liệu gốc từ API
        let tableData = [];   // Dữ liệu đang hiển thị / export
        let dataTable;         // Tham chiếu DataTable

        // === Tooltip helpers ===
        function createTooltipCell(data) {
            const v = data ?? '';
            return `<span class="tooltip-trigger" data-tooltip="${escapeHtml(String(v))}">${escapeHtml(String(v))}</span>`;
        }
        function attachTooltipEvents() {
            // Khởi tạo tooltip đơn giản, tránh trùng lặp
            document.querySelectorAll('.tooltip-trigger').forEach(el => {
                if (el.dataset.tooltipBound) return;
                el.addEventListener('mouseover', (e) => {
                    let tip = document.querySelector('.custom-tooltip');
                    if (!tip) {
                        tip = document.createElement('div');
                        tip.className = 'custom-tooltip';
                        document.body.appendChild(tip);
                    }
                    tip.textContent = el.getAttribute('data-tooltip') || '';
                    tip.style.display = 'block';
                    tip.style.left = (e.pageX + 10) + 'px';
                    tip.style.top = (e.pageY - 20) + 'px';
                });
                el.addEventListener('mousemove', (e) => {
                    const tip = document.querySelector('.custom-tooltip');
                    if (tip) {
                        tip.style.left = (e.pageX + 10) + 'px';
                        tip.style.top = (e.pageY - 20) + 'px';
                    }
                });
                el.addEventListener('mouseout', () => {
                    const tip = document.querySelector('.custom-tooltip');
                    if (tip) tip.style.display = 'none';
                });
                el.dataset.tooltipBound = '1';
            });
        }

        // Tránh XSS trong tooltip/cell
        function escapeHtml(s) {
            return s
                .replaceAll('&', '&amp;')
                .replaceAll('<', '&lt;')
                .replaceAll('>', '&gt;')
                .replaceAll('"', '&quot;')
                .replaceAll("'", '&#39;');
        }

        // === Date helpers ===
        function formatDateTime(dateTime) {
            if (!dateTime) return '';
            const d = new Date(dateTime);
            if (isNaN(d.getTime())) return '';
            const y = d.getFullYear();
            const m = String(d.getMonth() + 1).padStart(2, '0');
            const day = String(d.getDate()).padStart(2, '0');
            return `${y}/${m}/${day}`;
        }
        function toTime(row) {
            // Ưu tiên TimeTest -> SendTime -> DateTest
            const cands = [row?.TimeTest, row?.SendTime, row?.DateTest].filter(Boolean);
            for (const c of cands) {
                const t = Date.parse(c);
                if (!Number.isNaN(t)) return t;
            }
            return -Infinity; // Không parse được
        }

        function getLatestPerSN(items) {
            const bySn = new Map();
            for (const it of items) {
                const sn = (it?.serial_number ?? '').trim();
                // Nếu không có SN, coi như key riêng để không làm mất dữ liệu
                const key = sn || `__NO_SN__${Math.random().toString(36).slice(2)}`;
                const cur = bySn.get(key);
                if (!cur) {
                    bySn.set(key, it);
                } else {
                    if (toTime(it) > toTime(cur)) bySn.set(key, it);
                }
            }
            return Array.from(bySn.values());
        }

        // === Render ===
        function renderTable(rows) {
            if (!dataTable) return;
            dataTable.clear();
            rows.forEach(r => {
                dataTable.row.add([
                    createTooltipCell(r.TimeTest ?? ''),
                    createTooltipCell(r.Model ?? ''),
                    createTooltipCell(r.DateTest ?? ''),
                    createTooltipCell(r.Path_Test_On ?? ''),
                    createTooltipCell(r.Path_Test_Off ?? ''),
                    createTooltipCell(r.serial_number ?? ''),
                    createTooltipCell(r.ULT ?? ''),
                    createTooltipCell(r.Result_Test_On ?? ''),
                    createTooltipCell(r.Result_Test_Off ?? ''),
                    createTooltipCell(r.Error_Code ?? ''),
                    createTooltipCell(r.SendTime ?? ''),
                    createTooltipCell(r.Status ?? ''),
                    createTooltipCell(r.DataType ?? ''),
                    createTooltipCell(r.StationTest ?? '')
                ]);
            });
            dataTable.draw();
            attachTooltipEvents();
        }
        function applyViewAndRender() {
            const mode = document.getElementById('view-mode').value;
            if (mode === 'latest') {
                tableData = getLatestPerSN(rawResults);
            } else {
                tableData = [...rawResults];
            }
            renderTable(tableData);
        }

        // === Search ===
        async function search() {
            const inputRaw = document.getElementById('serialNumber').value.trim();
            const typeOption = document.getElementById('type-options').value;
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;

            if (!inputRaw) { alert('Vui lòng nhập ít nhất một giá trị.'); return; }
            if (!typeOption || typeOption === 'SELECT TYPE') { alert('Vui lòng chọn kiểu tra cứu.'); return; }
            if (typeOption === '3' && (!startDate || !endDate)) { alert('Vui lòng chọn thời gian bắt đầu/kết thúc.'); return; }

            const inputList = inputRaw.split(/\r?\n/).map(s => s.trim()).filter(Boolean);
            if (typeOption !== '3' && inputList.length === 0) { alert('Danh sách trống.'); return; }

            // Loading overlay
            const overlay = document.createElement('div');
            overlay.className = 'loading-overlay';
            overlay.innerHTML = `<div class="spinner"></div><div>Đang tải dữ liệu, vui lòng chờ...</div>`;
            document.body.appendChild(overlay);

            try {
                let allResults = [];

                if (typeOption === '1') {
                    // Theo SN (chia batch)
                    const batchSize = 5;
                    for (let i = 0; i < inputList.length; i += batchSize) {
                        const batch = inputList.slice(i, i + batchSize);
                        const sns = batch.join(';');
                        const url = `http://10.220.130.117:2222/api/NVIDIA/ScanATestB/SearchData?SNS=${encodeURIComponent(sns)}`;
                        const res = await fetch(url, { method: 'GET', headers: { 'Accept': 'application/json' } });
                        if (!res.ok) throw new Error(`Lỗi API: ${res.status} - ${await res.text()}`);
                        const json = await res.json();
                        if (json.StatusCode !== 200 || !json.Data) throw new Error(json.Message || 'Dữ liệu trả về không hợp lệ.');
                        allResults = allResults.concat(json.Data);
                    }
                } else if (typeOption === '2') {
                    // Theo ULT (chia batch)
                    const batchSize = 5;
                    for (let i = 0; i < inputList.length; i += batchSize) {
                        const batch = inputList.slice(i, i + batchSize);
                        const ults = batch.join(';');
                        const url = `http://10.220.130.117:2222/api/NVIDIA/ScanATestB/SearchData?ULTs=${encodeURIComponent(ults)}`;
                        const res = await fetch(url, { method: 'GET', headers: { 'Accept': 'application/json' } });
                        if (!res.ok) throw new Error(`Lỗi API: ${res.status} - ${await res.text()}`);
                        const json = await res.json();
                        if (json.StatusCode !== 200 || !json.Data) throw new Error(json.Message || 'Dữ liệu trả về không hợp lệ.');
                        allResults = allResults.concat(json.Data);
                    }
                } else if (typeOption === '3') {
                    // Theo Model + khoảng thời gian (lấy dòng đầu làm model)
                    const model = inputList[0];
                    const url = `http://10.220.130.117:2222/api/NVIDIA/ScanATestB/SearchData?model=${encodeURIComponent(model)}&startTime=${encodeURIComponent(formatDateTime(startDate))}&endTime=${encodeURIComponent(formatDateTime(endDate))}`;
                    const res = await fetch(url, { method: 'GET', headers: { 'Accept': 'application/json' } });
                    if (!res.ok) throw new Error(`Lỗi API: ${res.status} - ${await res.text()}`);
                    const json = await res.json();
                    if (json.StatusCode !== 200 || !json.Data) throw new Error(json.Message || 'Dữ liệu trả về không hợp lệ.');
                    allResults = json.Data;
                }

                // Lưu dữ liệu gốc và render theo chế độ hiện tại
                rawResults = Array.isArray(allResults) ? allResults : [];
                if (rawResults.length === 0) {
                    alert('Không tìm thấy dữ liệu cho các thông tin đã nhập.');
                }
                applyViewAndRender();
            } catch (err) {
                alert(`Đã xảy ra lỗi: ${err.message}`);
            } finally {
                overlay.remove();
            }
        }

        // === Export ===
        function downloadExcel() {
            if (!tableData || tableData.length === 0) {
                alert('Không có dữ liệu để xuất Excel.');
                return;
            }
            const ws = XLSX.utils.json_to_sheet(tableData);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, 'ULTData');

            // Widths (tham khảo theo thứ tự cột)
            ws['!cols'] = [
                { wch: 20 }, // TimeTest
                { wch: 15 }, // Model
                { wch: 12 }, // DateTest
                { wch: 30 }, // Path_Test_On
                { wch: 30 }, // Path_Test_Off
                { wch: 22 }, // serial_number
                { wch: 20 }, // ULT
                { wch: 18 }, // Result_Test_On
                { wch: 18 }, // Result_Test_Off
                { wch: 28 }, // Error_Code
                { wch: 20 }, // SendTime
                { wch: 12 }, // Status
                { wch: 12 }, // DataType
                { wch: 16 }  // StationTest
            ];
            XLSX.writeFile(wb, 'ULTData.xlsx');
        }

        // === Init ===
        $(document).ready(function () {
            dataTable = $('#ULTDataTable').DataTable({
                pageLength: 10,
                scrollX: true,
                responsive: true,
                fixedHeader: true
            });

            $('#time-tag').hide();
            $('#type-options').on('change', function () {
                if ($(this).val() === '3') {
                    $('#time-tag').show();
                } else {
                    $('#time-tag').hide();
                    $('#startDate').val('');
                    $('#endDate').val('');
                }
            });

            // Thay đổi chế độ hiển thị -> render lại từ rawResults
            $('#view-mode').on('change', applyViewAndRender);

            // Enter trong textarea sẽ không tự submit, người dùng bấm nút Tìm kiếm
        });
    </script>
}

