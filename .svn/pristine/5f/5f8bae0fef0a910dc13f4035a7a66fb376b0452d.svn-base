$(document).ready(function () {
    const table = initializeDataTable();
    let existingSNs = new Set();

    setupEventListeners();

    function initializeDataTable() {
        return $('#sn-table').DataTable({
            dom: 't',
            paging: false,
            ordering: false,
            info: false,
            scrollX: true,
            columnDefs: [
                { width: '140px', targets: 0 }, // Serial Number
                { width: '140px', targets: 1 }, // ProductLine
                { width: '100px', targets: 2 }, // ModelName
                { width: '100px', targets: 3 }, // WIP
                { width: '100px', targets: 4 }, // testGroup
                { width: '100px', targets: 5 }, // testCode
                { width: '140px', targets: 6 }, // Data1
                { width: '100px', targets: 7 }, // PreviousStatus
                { width: '100px', targets: 8 }, // Status
                { width: '140px', targets: 9 }, // Date
                { width: '100px', targets: 10 }, // IdConfirm
                { width: '160px', targets: 11 }, // CheckPoint
                { width: '80px', targets: 12 }, // Hướng dẫn
                { width: '80px', targets: 13 }, // Sửa chữa
                { width: '80px', targets: 14 }, //Lịch sử
                { width: '80px', targets: 15 }, //Xóa
                // Định nghĩa width cho các cột khác nếu cần
            ]
        });
    }

    function setupEventListeners() {
        $('#sn-form').on('submit', handleFormSubmit);
        $('#sn-table tbody').on('click', '.btn-delete', handleRowDelete);
        $('#sn-table tbody').on('click', '.view-detail', handleViewDetail);
        $('.btn-fa-all, .btn-retest-all, .btn-vi').on('click', handleBulkStatusUpdate);
        $('#sn-table tbody').on('click', '.btn-repair-detail', handleRepairDetailClick);
    }

    function handleFormSubmit(e) {
        e.preventDefault();
        const serialNumberInput = $('#serialNumberList').val().trim();

        if (!serialNumberInput) {
            showWarning('Vui lòng nhập Serial Number!');
            return;
        }
        const serialNumbers = serialNumberInput.split(/[\n,]+/).map(sn => sn.trim()).filter(sn => sn);
        if (serialNumbers.length === 0) {
            showWarning('Danh sách Serial Number không hợp lệ!');
            return;
        }
        // Kiểm tra trùng lặp với existingSNs
        const duplicates = serialNumbers.filter(sn => existingSNs.has(sn));
        if (duplicates.length > 0) {
            showWarning(`Các SN đã tồn tại: ${duplicates.join(', ')}`);
            return;
        }
        fetchSerialNumberData(serialNumbers);
    }

    function fetchSerialNumberData(serialNumbers) {
        const payload = {
            serialNumbers: serialNumbers,
            modelName: "",
            testCode: "",
            status: "",
            data1: "",
            HandoverStatus: "",
        };

        fetchAPI('http://10.220.130.119:9090/api/SearchFA/search', 'POST', payload)
            .then(data => processSerialNumberData(data, serialNumbers))
            .catch(error => {
                console.error('Lỗi:', error);
                showError("Lỗi khi gọi API!");
            });
    }

    async function processSerialNumberData(data, serialNumbers) {
        if (!data.data || data.data.length === 0) {
            showWarning('Không tìm thấy thông tin cho các Serial Number!');
            return;
        }
        for (const item of data.data) {
            const sn = item.seriaL_NUMBER?.trim() || '';
            if (sn === '') continue;

            if (existingSNs.has(sn)) continue; // Bỏ qua nếu SN đã tồn tại
            existingSNs.add(sn);

            const standardizedProductLine = standardizeProductLine(item.productLine);

            const checkPointsPayload = {
                productLine: standardizedProductLine,
                testCode: item.tesT_CODE || ''
            };

            try {
                const checkPointData = await fetchAPI('http://10.220.130.119:9090/api/FixGuide/GetCheckPoints', 'POST', checkPointsPayload);
                const fullName = await fetchFullName(item.tester);
                addRowToTable(item, checkPointData, fullName);
            } catch (error) {
                console.error('Lỗi lấy CheckPoint hoặc FullName:', error);
                const fullName = await fetchFullName(item.tester);
                addRowToTable(item, { checkPoints: ["Không tìm thấy CheckPoint"] }, fullName);
            }
        }
        /*$('#serialNumberList').val(''); // Reset textarea*/
    }


    // Lấy danh sách ProductLine và đổ vào dropdown
    function fetchProductLines() {
        fetchAPI('http://10.220.130.119:9090/api/FixGuide/GetProductLines', 'GET')
            .then(data => {
                data.productLines.forEach(productLine => {
                    $('#productLineDropdown').append(`<option value="${productLine}">${productLine}</option>`);
                });
            })
            .catch(err => showError('Lỗi khi lấy ProductLine'));
    }
    //END LẤY DANH SÁCH PRODUCTLINE ĐỔ VÀO DROPDOWN



    //ĐỊNH DẠNG LẠI CHUỖI PRODUCT LINE
    function standardizeProductLine(productLine) {
        return productLine.replace(/\s|-/g, '').toUpperCase();
    }

    //THÊM HÀNG VÀO DATATABLE
    function addRowToTable(item, checkPointData, fullName) {
        const checkpointsArray = (checkPointData.success && checkPointData.checkPoints)
            ? Array.isArray(checkPointData.checkPoints?.$values)
                ? checkPointData.checkPoints.$values
                : [checkPointData.checkPoints.toString()]
            : ["Không tìm thấy CheckPoint"];

        const encodedCheckpoints = encodeURIComponent(JSON.stringify(checkpointsArray));
        const encodedDetail = encodeURIComponent(checkpointsArray.detail || 'Không có thông tin chi tiết');

        table.row.add([
            item.seriaL_NUMBER.trim(),
            item.productLine || '',
            item.modeL_NAME || '',
            item.wiP_GROUP || '',
            item.tesT_GROUP || '',
            `<span title="${item.tesT_CODE || ''}">${truncateText(item.tesT_CODE, 20)}</span>`,
            `<span title="${item.datA1 || ''}">${truncateText(item.datA1, 20)}</span>`,
            item.datA12 || '',
            item.datA11 || '',
            `<span title="${item.datE3 || ''}">${item.datE3 || ''}</span>`,
            `<span title="${item.tester}">${fullName || item.tester}</span>`,
            //fullName || item.tester,
            `<span title="${checkpointsArray.join(', ') || ''}">${checkpointsArray.join(', ') || ''}</span>`,
            `<button class="btn btn-info btn-sm view-detail" 
                data-sn="${item.seriaL_NUMBER}" 
                data-model="${item.modeL_NAME}" 
                data-product-line="${item.productLine}" 
                data-checkpoints="${encodedCheckpoints}" 
                data-detail="${encodedDetail}">
                Chi tiết
            </button>`,
            `<button class="btn btn-warning btn-sm save-repair-history" 
                data-serial-number="${item.seriaL_NUMBER}">
                Thêm
            </button>`,
            `<button class="btn btn-info btn-sm btn-repair-detail" 
                data-serial-number="${item.seriaL_NUMBER}">
                Chi tiết
            </button>`, // Thêm cột Repair
            `<button class="btn btn-success btn-delete">Xóa</button>`
        ]).draw(false);

        $('#serialNumber').val(''); // Reset input
    }

    // Hàm cắt bớt chuỗi và thêm dấu "..." nếu chuỗi dài hơn giới hạn
    function truncateText(text, maxLength) {
        if (text && text.length > maxLength) {
            return text.substring(0, maxLength) + "...";
        }
        return text || "";
    }

    //DELETE HANG
    function handleRowDelete() {
        const row = table.row($(this).parents('tr'));
        const rowData = row.data();
        const snToRemove = rowData[0]?.trim();

        if (existingSNs.has(snToRemove)) {
            existingSNs.delete(snToRemove);
        }

        row.remove().draw();
    }

    //HIển thị file pdf của ProductLine
    function handleViewDetail() {
        const serialNumber = $(this).data('sn');
        const modelName = $(this).data('model');
        const productLine = $(this).data('product-line');
        const checkpoints = JSON.parse(decodeURIComponent($(this).data('checkpoints')));
        const detail = decodeURIComponent($(this).data('detail'));

        standardizedProductLine = standardizeProductLine(productLine);
        console.log("ProductLine sau khi chuan hoa: ", standardizedProductLine);

        $('#modal-sn').text(serialNumber);
        $('#modal-model').text(modelName);
        $('#modal-product-line').text(productLine);

        $('#modal-checkpoints').empty();
        checkpoints.forEach(cp => $('#modal-checkpoints').append(`<li>${cp}</li>`));
        $('#modal-repair-detail').text(detail);

        const pdfUrl = `/pdfs/product-lines/${standardizedProductLine}.pdf`;
        $('#modal-product-line-pdf').attr('src', pdfUrl).on('error', function () {
            $(this).attr('src', '/pdfs/product-lines/default.pdf');
        });

        $('#repairDetailModal').modal('show');
    }

    //UPLOAD CHECK_POINT
    //NEW
    $('#addGuideButton').on('click', function () {
        $('#productLineDropdown').empty(); // Reset dropdown
        fetchProductLines(); // Lấy danh sách ProductLine
        $('#guideModal').modal('show');
    });

    // Khi nhập TestCode → Tìm CheckPoint
    $('#testCodeInput').on('blur', function () {
        const productLine = $('#productLineDropdown').val();
        const testCode = $('#testCodeInput').val().trim();

        if (productLine && testCode) {
            const payload = { productLine, testCode };
            fetchAPI('http://10.220.130.119:9090/api/FixGuide/GetCheckPoints', 'POST', payload)
                .then(data => {
                    $('#checkPointInput').val(data.checkPoints || 'Không tìm thấy CheckPoint trong database!, Vui lòng nhập CheckPoint mới.');
                })
                .catch(() => showError("Chưa có hướng dẫn"));
        }
    });

    // Lưu CheckPoint chỉnh sửa
    $('#saveCheckPointButton').on('click', function () {
        const productLine = $('#productLineDropdown').val();
        const testCode = $('#testCodeInput').val().trim();
        const checkPoint = $('#checkPointInput').val().trim();
        const employeeId = $('#analysisPerson').val();

        if (productLine && testCode && checkPoint) {
            const updateCheckPoint = `${checkPoint}.[${(employeeId)}]\n`;
            const payload = { productLine, testCode, check_Point: updateCheckPoint };
            console.log("String payload checkPoint: ", updateCheckPoint)

            fetchAPI('http://10.220.130.119:9090/api/FixGuide/update-checkpoint', 'PUT', payload)
                .then(data => {
                    if (data.success) {
                        showInfo(data.message);
                        // Làm trống ô nhập TestCode và CheckPoint
                        $('#testCodeInput').val('');
                        $('#checkPointInput').val('');

                        $('#guideModal').modal('hide'); // Đóng modal sau khi lưu thành công
                    } else {
                        showError("Error!");
                    }
                })
                .catch(() => showError('Lỗi khi gọi API'));
        } else {
            showWarning("Vui lòng điền đầy đủ thông tin!");
        }
    });


    const templateButton = document.getElementById('templateButton');

    templateButton.addEventListener('click', async function () {
        // Vô hiệu hóa button và hiển thị trạng thái loading
        templateButton.disabled = true;
        templateButton.textContent = 'Đang tải...';

        try {
            const templateUrl = '/pdfs/file-excel/templateGuide.xlsx';

            // Kiểm tra xem file có tồn tại không trước khi tải
            const response = await fetch(templateUrl);
            if (!response.ok) {
                throw new Error('File không tồn tại trên server');
            }

            const link = document.createElement('a');
            link.href = templateUrl;
            link.download = 'templateGUIDE.xlsx';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            console.log('Template downloaded successfully');
        } catch (error) {
            alert('Không thể tải file template. Vui lòng liên hệ quản trị viên.');
            console.error('Error:', error);
        } finally {
            templateButton.disabled = false;
            templateButton.textContent = 'TEMPLATE';
        }
    });

    // Upload file Excel
    $('#uploadExcelButton').on('click', function () {
        const file = $('#guideFileInput')[0].files[0];
        const productLine = $('#productLineDropdown').val();

        if (file && productLine) {
            const formData = new FormData();
            formData.append('file', file);
            formData.append('productLine', productLine);

            fetch('http://10.220.130.119:9090/api/FixGuide/Upload', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showSuccess('Upload file success!');
                        $('#guideModal').modal('hide');
                    } else {
                        showError("Error!")
                    }
                })
                .catch(() => showError('Lỗi kết nối API'));
        } else {
            showWarning('Vui lòng chọn ProductLine và file Excel');
        }
    });

    function fetchAPI(url, method, body = null) {
        const options = {
            method,
            headers: {
                'Content-Type': 'application/json'
            }
        };

        if (body) {
            options.body = JSON.stringify(body);
        }

        return fetch(url, options).then(response => {
            if (!response.ok) {
                throw new Error(`Lỗi API: ${response.statusText}`);
            }
            return response.json();
        });
    }
    //END UPDATE CHECK_POINT


    //Update Status cho SN
    function handleBulkStatusUpdate() {
        if ($(this).hasClass('btn-retest-all')) {
            const serialNumbers = [];
            table.rows().every(function () {
                const data = this.data();
                serialNumbers.push(data[0]); // Lấy Serial Number từ cột đầu tiên
            });

            if (serialNumbers.length === 0) {
                showWarning('Không có SN để cập nhật trạng thái!');
                return;
            }

            // Hiển thị modal để chọn status và nhập ghi chú
            $('#status-select-modal').modal('show'); // Hiển thị modal (status và notes)
            $('#status-select').val(''); // Reset giá trị dropdown
            $('#status-notes').val(''); // Reset ghi chú

            // Xử lý khi nhấn nút "Save"
            $('#save-status-update').off('click').on('click', async function () {
                const selectedStatus = $('#status-select').val(); // Lấy status đã chọn
                const selectedTestResult = $('#test-result').val(); // Lấy kết quả retest đã chọn
                const remark = $('#status-notes').val().trim(); // Lấy ghi chú người dùng nhập
                const empId = $('#analysisPerson').val(); // Lấy emp_id (nếu có input)
                const serialNumbers = getAllSerialNumbers();// Lấy tất cả Serial Numbers từ DataTable
                const notes = `KQ:${selectedTestResult}/remark:${remark}`; // Kết hợp theo yêu cầu
                if (!selectedStatus) {
                    showWarning('Vui lòng chọn trạng thái!');
                    return;
                }
                if (!selectedTestResult) {
                    showWarning('Vui lòng chọn kết quả retest!');
                    return;
                }
                const payload = {
                    serialNumbers: serialNumbers.join(','), // Serial Numbers, nối bằng dấu phẩy
                    type: 'RETEST', // Loại action
                    status: selectedStatus, // Status người dùng chọn
                    employeeId: empId || 'default_emp_id', // ID nhân viên
                    tag: 'confirm', // Gắn tag là "save"
                    notes: notes
                };

                const handoverPayload = {
                    serialNumbers: serialNumbers.join(','),
                    handOverStatus: 'WAITING_HAND_OVER',
                    tag: 'giao'
                };

                try {
                    // Gửi payload đến API
                    const response = await fetch('http://10.220.130.119:9090/api/RepairStatus/repair-status', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(payload)
                    });

                    const result = await response.json();  // Xử lý phản hồi dạng chuỗi
                    const cleanMessage = result.message.replace(/"/g, '').trim();  // ✅ Loại bỏ dấu " thừa
                    console.log("cleanMessage: ", cleanMessage);
                    if (result.success && cleanMessage === "OK") {
                        // Gọi API cập nhật trạng thái bàn giao
                        await callHandOverStatusAPI(handoverPayload);

                        showSuccess("Success!");
                        $('#status-select-modal').modal('hide');  // Đóng modal sau khi thành công
                        updateTableWithSearch(serialNumbers);     // Cập nhật lại bảng
                    } else {
                        showError("Error!");
                    }

                } catch (error) {
                    console.error('Lỗi khi gọi API:', error);
                    showError("Error!");
                }
            });
        }
        else if ($(this).hasClass('btn-vi')) { //XU LY CHUC NANG VI
            const serialNumbers = [];
            table.rows().every(function () {
                const data = this.data();
                serialNumbers.push(data[0]); // Lấy Serial Number từ cột đầu tiên
            });
            if (serialNumbers.length === 0) {
                showWarning('Không có SN để cập nhật trạng thái!');
                return;
            }
            // Hiển thị modal để chọn status và nhập ghi chú
            $('#modal-vi').modal('show'); // Hiển thị modal (status và notes)
            $('#status-select-vi').val(''); // Reset giá trị dropdown
            $('#status-notes-vi').val(''); // Reset ghi chú

            // Xử lý khi nhấn nút "Save"
            $('#save-vi').off('click').on('click', async function () {
                const selectedStatus = $('#status-select-vi').val(); // Lấy status đã chọn
                const notes = $('#status-notes-vi').val().trim(); // Lấy ghi chú người dùng nhập
                const empId = $('#analysisPerson').val(); // Lấy emp_id (nếu có input)
                const serialNumbers = getAllSerialNumbers();// Lấy tất cả Serial Numbers từ DataTable

                if (!selectedStatus) {
                    showWarning('Vui lòng chọn trạng thái!');
                    return;
                }
                const payload = {
                    serialNumbers: serialNumbers.join(','), // Serial Numbers, nối bằng dấu phẩy
                    type: 'VI-RE', // Loại action
                    status: selectedStatus, // Status người dùng chọn
                    employeeId: empId || 'default_emp_id', // ID nhân viên
                    tag: 'confirm', // Gắn tag là "save"
                    notes: notes
                };

                const handoverPayload = {
                    serialNumbers: serialNumbers.join(','),
                    handOverStatus: 'WAITING_HAND_OVER',
                    tag: 'giao'
                };

                try {
                    // Gửi payload đến API
                    const response = await fetch('http://10.220.130.119:9090/api/RepairStatus/repair-status', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(payload)
                    });

                    const result = await response.json();  // Xử lý phản hồi dạng chuỗi
                    const cleanMessage = result.message.replace(/"/g, '').trim();  // ✅ Loại bỏ dấu " thừa
                    if (result.success && cleanMessage === "OK") {
                        // Gọi API cập nhật trạng thái bàn giao
                        await callHandOverStatusAPI(handoverPayload);

                        showSuccess("Success!");
                        $('#modal-vi').modal('hide');  // Đóng modal sau khi thành công
                        updateTableWithSearch(serialNumbers);     // Cập nhật lại bảng
                    } else {
                        showError("Error!");
                    }

                } catch (error) {
                    console.error('Lỗi khi gọi API:', error);
                    showError("Error!");
                }
            });
        }
        else {
            const statusNe = $(this).hasClass('btn-arc-all') ? 'ARC'
                : $(this).hasClass('btn-fa-all') ? 'FA' : 'UNKNOWN';

            const serialNumbers = [];
            const empId = $('#analysisPerson').val();
            const typeModal = $('#type-modal');

            let firstStatus = null;
            let allSameStatus = true;

            // Lấy các SN phù hợp trạng thái hiện tại
            table.rows().every(function () {
                const data = this.data();
                if (!firstStatus) {
                    firstStatus = data[8];
                } else if (data[8] !== firstStatus) {
                    allSameStatus = false;
                }
                if ((statusNe === 'ARC' && data[8] === 'ARC') ||
                    (statusNe === 'FA' && data[8] === 'FA' || data[8] === 'PROCESS' && statusNe === 'FA')) {
                    serialNumbers.push(data[0]);
                }
            });

            if (!allSameStatus) {
                showError("Error!");
                return;
            }

            if (serialNumbers.length === 0) {
                showWarning(`Không có SN cập nhật trạng thái ${statusNe}!`);
                return;
            }

            // Hiển thị modal chọn Type
            prepareTypeModal(statusNe, typeModal);

            $('#type-form').off('submit').on('submit', async function (e) {
                e.preventDefault();

                const selectedType = $('#type-select').val();
                const additionalNotes = $('#additional-notes-input').val()?.trim(); // Dữ liệu bổ sung
                if (!selectedType) {
                    showWarning("Vui lòng chọn giá trị Type!");
                    return;
                }
                console.log("Gia tri da chọn: ", selectedType);
                if ((selectedType === 'RETEST' || selectedType === 'THAY LIỆU') && !additionalNotes) {
                    showWarning("Vui lòng nhập dữ liệu thay đổi!");
                    return;
                }
                typeModal.modal('hide');

                const repairPayload = {
                    serialNumbers: serialNumbers.join(','),
                    type: statusNe,
                    status: selectedType,
                    employeeId: empId,
                    notes: additionalNotes || "", // Ghi chú bổ sung
                    tag: "confirm"
                };

                const handoverPayload = {
                    serialNumbers: serialNumbers.join(','),
                    handOverStatus: 'WAITING_HAND_OVER',
                    tag: 'giao'
                };

                try {
                    const response = await fetch('http://10.220.130.119:9090/api/RepairStatus/repair-status', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(repairPayload)
                    });
                    const result = await response.json();
                    // ✅ Loại bỏ dấu " thừa trong message
                    const cleanMessage = result.message.replace(/"/g, '').trim();
                    if (result.success && cleanMessage === "OK") {
                        // Gọi API cập nhật trạng thái bàn giao
                        await callHandOverStatusAPI(handoverPayload);
                        //Update lai table!!
                        updateTableWithSearch(serialNumbers);
                        showSuccess("Success!")
                    } else {
                        throw new Error(`Lỗi: ${cleanMessage || 'Cập nhật trạng thái thất bại!'}`);
                    }
                } catch (error) {
                    console.error('Lỗi:', error);
                    showError("Error!");
                }
            });
        }

    }
    //End update status cho SN

    function prepareTypeModal(statusNe, typeModal) {
        $('#type-select, #retest-select').prop('required', false).hide();
        $('#additional-notes-container').hide(); // Ẩn input bổ sung

        // Lắng nghe thay đổi trạng thái để hiển thị input ghi chú
        $('#type-select').off('change').on('change', function () {
            const selectedType = $(this).val();
            console.log("HIHIHI:", selectedType);
            if (selectedType === 'RETEST' || selectedType === 'THAY LIỆU') {
                $('#additional-notes-container').show();
            } else {
                $('#additional-notes-container').hide();
            }
        });

        // Hiển thị các trường phù hợp với `statusNe`
        if (statusNe === 'RETEST') {
            $('#retest-select').show().prop('required', true);
        } else {
            $('#type-select').show().prop('required', true);

            if (statusNe === 'FA') {
                $('#customer-fa, #internal-fa').removeClass('hidden');
                $('#fa-arc, #thay-lieu').addClass('hidden');
            } else if (statusNe === 'ARC') {
                $('#fa-arc').removeClass('hidden');
                $('#customer-fa, #internal-fa, #thay-lieu').addClass('hidden');
            } else {
                $('#customer-fa, #internal-fa, #fa-arc, #thay-lieu').addClass('hidden');
            }
        }

        $('#type-select, #retest-select').val(''); // Reset giá trị các dropdown
        typeModal.modal('show'); // Hiển thị modal
    }

    async function updateTableWithSearch(serialNumbers) {
        const payload = {
            serialNumbers: serialNumbers,
            modelName: "",
            testCode: "",
            status: "",
            data1: ""
        };

        const data = await fetchAPI('http://10.220.130.119:9090/api/SearchFA/search', 'POST', payload);

        table.rows().every(function () {
            const rowData = this.data();
            const updatedRow = data.data.find(item => item.seriaL_NUMBER.trim() === rowData[0]);

            if (updatedRow) {
                rowData[7] = updatedRow.datA12 || '';
                rowData[8] = updatedRow.datA11 || '';
                rowData[9] = updatedRow.datE3 || '';
                rowData[10] = updatedRow.tester || '';

                this.data(rowData).draw(false);
            }
        });
    }

    function handleRepairDetailClick() {
        const serialNumber = $(this).data('serial-number');
        console.log('Serial Number khi nhấn Chi tiết:', serialNumber); // Kiểm tra giá trị
        fetchRepairHistory([serialNumber]);
    }


    //HIỂN THỊ LỊCH SỬ SỬA CHỮA
    async function fetchRepairHistory(serialNumbers) {
        try {
            // Tạo payload là một mảng JSON đơn giản
            const payload = serialNumbers.map(sn => sn.toString()); // Không cần bao trong object
            console.log('Payload gửi tới API:', payload);

            // Gửi API
            const response = await fetch('http://10.220.130.119:9090/api/SearchFA/search-history-by-list', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload) // Mảng JSON đơn giản
            });

            if (!response.ok) {
                throw new Error(`Lỗi API: ${response.status}`);
            }

            const data = await response.json();
            console.log('Dữ liệu trả về từ API:', data);

            if (!data.data || data.data.length === 0) {
                showInfo("Không có lịch sử Repair!");
                return;
            }

            populateRepairHistoryModal(data.data);
        } catch (error) {
            console.error('Lỗi khi lấy lịch sử sửa chữa:', error);
            showError("Error!");
        }
    }

    // Hiển thị lịch sử sửa chữa với FullName thay cho Tester
    async function populateRepairHistoryModal(history) {
        const repairTable = $('#repair-history-table').DataTable();  // Khởi tạo DataTable

        repairTable.clear();  // Xóa dữ liệu cũ trong bảng

        // Lọc và chỉ thêm những dòng có datA19 khác null
        const filteredHistory = history.filter(item => item.datA19 !== null);

        if (filteredHistory.length === 0) {
            showInfo("Không có lịch sử Repair!")
            return;
        }

        // Duyệt qua từng item và lấy FullName từ Tester
        for (const item of filteredHistory) {
            const fullName = await fetchFullName(item.tester);  // Lấy FullName từ API

            repairTable.row.add([
                item.seriaL_NUMBER || '',
                item.datA12 || '',
                item.datA11 || '',
                item.datE3 ? new Date(item.datE3).toLocaleString() : '',
                fullName || 'Không tìm thấy',  // Hiển thị FullName thay cho Tester
                `<span title="${item.datA19 || ''}">${item.datA19 || ''}</span>`,
                `<span title="${item.datA17 || ''}">${item.datA17 || ''}</span>`
            ]);
        }

        repairTable.draw();  // Vẽ lại bảng với dữ liệu mới
        $('#repairHistoryModal').modal('show');  // Hiển thị modal
    }
    //END HIỂN THỊ LỊCH SỬ SỬA CHỮA

    //CHỨC NĂNG THÊM LỊCH SỬ SỬA CHỮA
    $('#sn-table tbody').on('click', '.save-repair-history', function () {
        const serialNumber = $(this).data('serial-number');
        const currentRow = table.row($(this).closest('tr')).data(); // Lấy dữ liệu hàng hiện tại
        // Gắn thông tin vào modal
        $('#save-serial-number').text(serialNumber);
        $('#confirm-save-repair').data('current-row', currentRow); // Lưu dữ liệu hàng hiện tại
        $('#save-repair-modal').modal('show');
    });

    $('#confirm-save-repair').on('click', function () {
        const currentRow = $(this).data('current-row'); // Dữ liệu hàng hiện tại
        const notes = $('#save-notes').val(); // Lấy nội dung ghi chú từ người dùng

        if (!notes.trim()) {
            showWarning("Vui lòng nhập ghi chú!")
            return;
        }

        const payload = {
            serialNumbers: currentRow[0], //Serial Number từ cột đầu tiên
            type: currentRow[8],         //Status hiện tại
            status: currentRow[8],       //Status hiện tại
            employeeId: $('#analysisPerson').val(), // ID người dùng
            notes: notes,                //Ghi chú từ người dùng
            tag: "save"                  //Gắn tag là "save"
        };

        saveRepairHistory(payload);
        $('#save-repair-modal').modal('hide'); // Đóng modal sau khi gửi yêu cầu
    });

    async function saveRepairHistory(payload) {
        try {
            console.log('Payload gửi để lưu lịch sử:', payload);

            // Đường dẫn API đúng từ Swagger
            const apiUrl = 'http://10.220.130.119:9090/api/RepairStatus/repair-status';

            // Gửi yêu cầu tới API
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            });
            const result = await response.json();

            const cleanMessage = result.message.replace(/"/g, '').trim();
            console.log("cleanMessage: ", cleanMessage);
            if (result.success && cleanMessage === "OK") {
                showSuccess("Success!");
            } else {
                showError("Error!");
            }
        } catch (error) {
            showError("Error!");
        }
    }
    //END CHỨC NĂNG THÊM LỊCH SỬ REPAIR

    //CHỨC NĂNG THAY LIỆU
    //LẤY ALL SN TRONG DATATABLE
    function getAllSerialNumbers() {
        const serialNumbers = [];
        table.rows().every(function () {
            const rowData = this.data(); // Lấy dữ liệu của từng hàng
            const serialNumber = rowData[0]; // Lấy giá trị từ cột đầu tiên (Serial Number)
            serialNumbers.push(serialNumber.trim()); // Loại bỏ khoảng trắng nếu có
        });
        return serialNumbers;
    }

    $('.btn-thay-lieu').on('click', function () {
        console.log('Nút Thay Liệu được nhấn');
        const serialNumbers = getAllSerialNumbers(); // Lấy tất cả SN trong bảng
        console.log('Danh sách Serial Numbers:', serialNumbers);

        if (serialNumbers.length === 0) {
            showError("Không có dữ liệu trong database!");
            return;
        }

        // Hiển thị modal nhập ghi chú
        $('#modal-serial-number').text(serialNumbers.join(', ')); // Hiển thị tất cả SN trong modal (nếu cần)
        $('#save-notes-thaylieu').val(''); // Làm mới nội dung ghi chú
        $('#modal-thaylieu').modal('show');
    });

    $('#btn-save-thaylieu').off('click').on('click', async function () {
        const notes = $('#save-notes-thaylieu').val(); // Lấy nội dung ghi chú từ người dùng
        const serialNumbers = [];
        const statuses = [];

        // Lấy tất cả Serial Numbers và Status tương ứng từ bảng
        table.rows().every(function () {
            const rowData = this.data();
            serialNumbers.push(rowData[0]); // Cột 0: Serial Number
            statuses.push(rowData[7]); // Cột 7: Status
        });

        if (!notes.trim()) {
            showWarning("Vui lòng nhập ghi chú!");
            return;
        }

        if (serialNumbers.length === 0) {
            showWarning("Không có SN trong database!");
            return;
        }

        // Kiểm tra trạng thái đồng nhất
        const uniqueStatuses = [...new Set(statuses)];
        if (uniqueStatuses.length > 1) {
            showWarning("SN không cùng trạng thái!")
            return;
        }

        const status = uniqueStatuses[0];

        const payloadHistory = {
            serialNumbers: serialNumbers.join(','), // Chuỗi SN, phân tách bởi dấu phẩy
            type: 'THAY LIỆU', // Dùng trạng thái hiện tại làm type
            status: status,
            employeeId: $('#analysisPerson').val(),
            notes: notes,
            tag: 'confirm'
        };

        const payloadHandOver = {
            serialNumbers: payloadHistory.serialNumbers,
            handOverStatus: 'WAITING_HAND_OVER',
            tag: 'giao'
        };

        try {
            // Gọi API thêm lịch sử sửa chữa
            await saveRepairHistory(payloadHistory);

            // Gọi API cập nhật trạng thái bàn giao
            await callHandOverStatusAPI(payloadHandOver);

            $('#modal-thaylieu').modal('hide'); // Đóng modal sau khi xử lý
        } catch (error) {
            console.error('Lỗi khi xử lý Thay Liệu:', error);
            showError("Error!");
        }
    });

    async function callHandOverStatusAPI(payload) {
        try {
            console.log('Payload gửi đến hand_over_status API:', payload);

            const response = await fetch('http://10.220.130.119:9090/api/RepairStatus/hand-over-status', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            });

            const data = await response.json();
            if (response.ok) {
            } else {
                showError("Error!");
            }
        } catch (error) {
            console.error('Lỗi khi gọi API hand_over_status:', error);
            showError("Error!");
        }
    }

    // Gọi API lấy FullName
    async function fetchFullName(empId) {
        return fetch(`http://10.220.130.119:9090/api/SearchFA/get-fullname?username=${empId}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Lỗi API: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                return data.fullName || 'Không xác định'; // Trả về fullname hoặc mặc định
            })
            .catch(error => {
                console.error('Lỗi:', error);
                return 'Không thể lấy tên';
            });
    }

    // Sự kiện click nút lấy thông tin Tester
    $('#btn-fetch-tester').off('click').on('click', async function () {
        try {
            const serialNumbers = getAllSerialNumbers();

            if (!serialNumbers.length) {
                showWarning("Không có dữ liệu trong database!");
                return;
            }

            // Gọi API lấy dữ liệu
            const testerData = await fetchTesterData(serialNumbers);

            // Hiển thị dữ liệu trong modal
            populateTesterModal(testerData);

            // Hiển thị modal (Bootstrap 5)
            const modal = new bootstrap.Modal(document.getElementById('modal-tester-info'));
            modal.show();
            console.log("HIỂN THỊ MODAL NÈ:");
        } catch (error) {
            console.error('Lỗi khi gọi API:', error);
            showError("Error!");
        }
    });

    // Gọi API lấy dữ liệu Tester
    async function fetchTesterData(serialNumbers) {
        const response = await fetch('http://10.220.130.119:9090/api/SearchFA/get-latest-tester', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(serialNumbers)
        });

        if (!response.ok) {
            throw new Error(`Lỗi API: ${response.statusText}`);
        }

        return response.json();
    }

    // Hiển thị dữ liệu vào DataTable
    async function populateTesterModal(data) {
        const table = $('#tester-info-table').DataTable();
        console.log("HIỂN THỊ DATATABLE NÈ:");
        // Xóa dữ liệu cũ
        table.clear();

        // Duyệt qua dữ liệu và thêm vào bảng
        for (const item of data) {
            const fullName = await fetchFullName(item.tester); // Gọi API lấy FullName

            table.row.add([
                item.seriaL_NUMBER || '', // Hiển thị Serial Number
                item.tester || '',        // Hiển thị Tester (username)
                fullName || '' // Hiển thị Full Name
            ]);
        }

        // Vẽ lại bảng
        table.draw();
    }
    // Khởi tạo DataTable
    $(document).ready(function () {
        $('#tester-info-table').DataTable({
            paging: true,
            searching: true,
            ordering: false,
            info: false
        });
    });

});
