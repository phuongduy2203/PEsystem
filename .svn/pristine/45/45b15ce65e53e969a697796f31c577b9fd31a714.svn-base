document.addEventListener('DOMContentLoaded', () => {
    const scanEl = document.getElementById('scan-log');
    const foundEl = document.getElementById('repairCount');
    //const textarea = document.getElementById('serialNumber');
    const fromInput = document.getElementById('fromTime');
    const toInput = document.getElementById('toTime');
    const applyBtn = document.getElementById('applyTime');
    //const searchBtn = document.getElementById('search-btn');
    //let table;

    const spinner = document.getElementById('spinner-overlay');
    const listItemsSection = document.getElementById('listItemsSection');
    const listTitle = document.getElementById('selectedListTitle');
    let listsTable;
    let itemsTable;

    function toggleSpinner(show) {
        if (!spinner) return;
        spinner.style.display = show ? 'flex' : 'none';
    }
    function setDefaultRange() {
        const now = new Date();
        const start = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        fromInput.value = start.toISOString().slice(0, 16);
        toInput.value = now.toISOString().slice(0, 16);
    }

    async function updateCounts() {
        if (!scanEl || !foundEl) return;
        const params = new URLSearchParams();
        //if (fromInput.value) params.append('from', new Date(fromInput.value).toISOString());
        //if (toInput.value) params.append('to', new Date(toInput.value).toISOString());
        if (fromInput?.value) params.append('from', new Date(fromInput.value).toISOString());
        if (toInput?.value) params.append('to', new Date(toInput.value).toISOString());
        try {
            const scanResp = await fetch(`http://10.220.130.119:9090/api/scan/count?${params.toString()}`);
            const scanData = await scanResp.json();
            scanEl.textContent = scanData.count ?? 0;
        } catch {
            scanEl.textContent = 'N/A';
        }
        try {
            const foundResp = await fetch(`http://10.220.130.119:9090/api/scan/found-count?${params.toString()}`);
            const foundData = await foundResp.json();
            foundEl.textContent = foundData.count ?? 0;
        } catch {
            foundEl.textContent = 'N/A';
        }
    }

    function renderSearchLists(data) {
        const lists = Array.isArray(data) ? data : [];
        if (!listsTable) {
            listsTable = $('#searchListsTable').DataTable({
                data: lists,
                columns: [
                    { data: 'listName', title: 'List Name', defaultContent: '' },
                    {
                        data: 'totalItems',
                        title: 'Tổng SN',
                        render: value => (value ?? 0)
                    },
                    {
                        data: 'foundItems',
                        title: 'Đã tìm thấy',
                        render: value => (value ?? 0)
                    },
                    { data: 'createdBy', title: 'Người tạo', defaultContent: '' },
                    {
                        data: 'createdAt',
                        title: 'Ngày tạo',
                        render: value => (value ? new Date(value).toLocaleString() : ''),
                        defaultContent: ''
                    },
                    {
                        data: null,
                        title: 'Chi tiết',
                        orderable: false,
                        searchable: false,
                        className: 'text-center',
                        defaultContent: '',
                        render: () => '<button type="button" class="btn btn-link detail-link p-0" data-action="detail">Detail</button>'
                    }
                ],
                order: [[0, 'asc']],
                language: {
                    emptyTable: 'Không có dữ liệu'
                }
            });

            $('#searchListsTable tbody').on('click', 'button[data-action="detail"]', function () {
                const rowData = listsTable.row($(this).closest('tr')).data();
                if (rowData) {
                    showListItems(rowData);
                }
            });
        } else {
            listsTable.clear().rows.add(lists).draw();
        }

        if (lists.length === 0 && listItemsSection) {
            listItemsSection.classList.add('d-none');
        }
    }

    function renderListItems(items) {
        const data = Array.isArray(items) ? items : [];
        if (!itemsTable) {
            itemsTable = $('#listItemsTable').DataTable({
                data,
                columns: [
                    { data: 'serialNumber', title: 'Serial Number', defaultContent: '' },
                    {
                        data: 'isFound',
                        title: 'Đã tìm thấy',
                        render: value => (value ? 'Có' : 'Không')
                    },
                    {
                        data: 'scanTime',
                        title: 'Thời gian scan',
                        render: value => (value ? new Date(value).toLocaleString() : '')
                    }
                ],
                order: [[0, 'asc']],
                language: {
                    emptyTable: 'Không có dữ liệu'
                },
                rowCallback: (row, rowData) => {
                    if (rowData && rowData.isFound) {
                        row.classList.add('table-success');
                    } else {
                        row.classList.remove('table-success');
                    }
                }
            });
        } else {
            itemsTable.clear().rows.add(data).draw();
        }
    }

    function showListItems(listData) {
        if (!listData) return;
        if (listTitle) {
            const name = listData.listName ?? '';
            listTitle.textContent = name ? `Danh sách SerialNumber - ${name}` : 'Danh sách SerialNumber';
        }
        renderListItems(listData.items ?? []);
        if (listItemsSection) {
            listItemsSection.classList.remove('d-none');
        }
    }

    async function loadSearchLists() {
        toggleSpinner(true);
        try {
            const resp = await fetch('http://10.220.130.119:9090/api/scan/search-lists/details');
            if (!resp.ok) {
                renderSearchLists([]);
                return;
            }
            const payload = await resp.json();
            renderSearchLists(payload?.lists ?? []);
        } catch {
            renderSearchLists([]);
        } finally {
            toggleSpinner(false);
        }
    }

    applyBtn?.addEventListener('click', e => {
        e.preventDefault();
        updateCounts();
    });

    setDefaultRange();
    updateCounts();
    loadSearchLists();
});
