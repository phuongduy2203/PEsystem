@{
    ViewData["Title"] = "History Error";
}
@{
    Layout = "~/Areas/Allpart/Views/Shared/layout_allpart.cshtml";
}

<div class="card shadow-sm">
    <div class="card-header bg-nvidia-green text-white">
        <h1 class="h4 mb-0 text-center">FAIL ATE</h1>
    </div>
    <div class="card-body">
        <div class="row g-3 mb-4 align-items-center">
            <div class="col-md-4">
                <textarea id="serialNumber" class="form-control" rows="1" placeholder="Nhập SerialNumber..."></textarea>
            </div>
            <div class="col-md-2">
                <button onclick="search()" class="btn btn-nvidia-green w-100">Tìm kiếm</button>
            </div>
        </div>

        <div class="mt-5">
            <div class="table-responsive align-items-center">
                <table id="historyDataTable" class="display table table-bordered table-striped datatable-table" style="width:100%">
                    <thead>
                        <tr>
                            <th>SERIAL_NUMBER</th>
                            <th>MODEL_NAME</th>
                            <th>LINE_NAME</th>
                            <th>SECTION_NAME</th>
                            <th>GROUP_NAME</th>
                            <th>STATION_NAME</th>
                            <th>ERROR_CODE</th>
                            <th>ERROR_DESC</th>
                            <th>DATA12</th>
                            <th>PASS_COUNT</th>
                            <th>RETEST_COUNT</th>
                            <th>TEST_VALUE</th>
                            <th>IN_STATION_TIME</th>
                            <th>RESULT</th>
                            <th>DATA2</th>
                            <th>TEST_MODE</th>
                            <th>SCOF_MIN</th>
                        </tr>
                    </thead>
                    <tbody id="historyDataTableBody"></tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <style>
        .bg-nvidia-green {
            background-color: #76B900 !important;
        }

        .btn-nvidia-green {
            background-color: #76B900 !important;
            border-color: #76B900 !important;
            color: #fff;
            height: 100%;
        }

            .btn-nvidia-green:hover {
                background-color: #639A00 !important;
                border-color: #639A00 !important;
            }

        .custom-tooltip {
            position: absolute;
            background-color: #333;
            color: #fff;
            padding: 5px 10px;
            border-radius: 3px;
            font-size: 12px;
            z-index: 1000;
            display: none;
            max-width: 200px;
            word-wrap: break-word;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }

        .datatable-table tbody tr:hover td,
        .datatable-table tbody tr:hover th {
            background-color: #76B900 !important;
        }

        .dataTables_wrapper .dataTables_filter,
        .dataTables_wrapper .dataTables_paginate {
            position: sticky;
            top: 0;
            background-color: #fff;
            z-index: 1;
            border-radius: 5px;
            margin-bottom: 5px;
            padding: 5px;
            vertical-align: middle;
        }

        .dataTables_wrapper {
            overflow-x: auto;
        }

        .table-responsive {
            overflow-x: auto;
        }

        .row.align-items-center {
            display: flex;
            align-items: stretch;
        }

        .form-control {
            height: auto;
            resize: vertical;
        }

        .datatable-table th, .datatable-table td {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 150px;
            padding: 5px;
        }

        .loading-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 2000;
            justify-content: center;
            align-items: center;
        }

        .loading-message {
            background: #fff;
            padding: 15px 30px;
            border-radius: 5px;
            font-size: 16px;
            font-weight: bold;
            color: #333;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
        }
    </style>
    <script>
        let historyTable = null;

        async function search() {
            const sn = $("#serialNumber").val().trim().toUpperCase();
            if (!sn) {
                Swal.fire("Thông báo", "Vui lòng nhập Serial Number!", "warning");
                return;
            }

            try {
                Swal.fire({
                    title: "Đang tải dữ liệu...",
                    didOpen: () => Swal.showLoading(),
                    allowOutsideClick: false,
                    showConfirmButton: false
                });

                const response = await fetch("http://10.220.130.119:9090/api/CheckInOut/get-fail-ate", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(sn)
                });

                if (!response.ok) {
                    throw new Error("API trả về lỗi: " + response.status);
                }

                const result = await response.json();

                Swal.close();

                if (!result.success || !result.data || result.data.length === 0) {
                    Swal.fire("Không có dữ liệu!", "Không tìm thấy dữ liệu lỗi cho SN: " + sn, "info");
                    if (historyTable) {
                        historyTable.clear().draw();
                    }
                    return;
                }

                renderTable(result.data);
            } catch (err) {
                Swal.close();
                console.error(err);
                Swal.fire("Lỗi!", err.message, "error");
            }
        }

        function renderTable(data) {
            // Nếu DataTable đã tồn tại => clear & reload
            if (historyTable) {
                historyTable.clear().rows.add(data).draw();
                return;
            }

            historyTable = $('#historyDataTable').DataTable({
                destroy: true,
                data: data,
                pageLength: 10,
                order: [[0, "desc"]],
                scrollX: true,
                autoWidth: false,
                columns: [
                    { data: "serialNumber" },
                    { data: "modelName" },
                    { data: "lineName" },
                    { data: "sectionName" },
                    { data: "groupName" },
                    { data: "stationName" },
                    { data: "errorCode" },
                    {
                        data: "errorDesc",
                        render: function (data) {
                            if (!data) return "";
                            const text = data.toString().replace(/"/g, '&quot;');
                            return `<span title="${text}">${text}</span>`;
                        }
                    },
                    { data: "data12" },
                    { data: "passCount" },
                    { data: "retestCount" },
                    { data: "testValue" },
                    {
                        data: "testTime",
                        render: function (data) {
                            return data ? new Date(data).toLocaleString() : "";
                        }
                    },
                    { data: "result" },
                    { data: "data2" },
                    { data: "testMode" },
                    { data: "scofMin" }
                ],
                language: {
                    search: "Tìm kiếm:",
                    lengthMenu: "Hiển thị _MENU_ dòng",
                    info: "Hiển thị _START_ - _END_ / _TOTAL_ dòng",
                    paginate: {
                        first: "Đầu",
                        last: "Cuối",
                        next: "→",
                        previous: "←"
                    },
                    emptyTable: "Không có dữ liệu để hiển thị"
                },
                createdRow: function (row, data, dataIndex) {
                    // ✅ Tự động thêm tooltip cho mọi ô
                    $('td', row).each(function () {
                        const text = $(this).text().trim();
                        if (text.length > 0) {
                            $(this).attr('title', text);
                        }
                    });
                },
                initComplete: function () {
                    // ✅ Bật tooltip của trình duyệt (title)
                    $('#historyDataTable td[title]').tooltip({
                        placement: 'top',
                        trigger: 'hover',
                        container: 'body'
                    });
                }
            });
        }

        // ✅ CSS thêm tooltip đẹp + cắt nội dung dài
        $(document).ready(function () {
            const style = `
            <style>
                table.dataTable td {
                    white-space: nowrap;
                    overflow: hidden;
                    text-overflow: ellipsis;
                    max-width: 220px;
                    vertical-align: middle;
                }
                table.dataTable td:hover {
                    background-color: #fff9d6 !important;
                }
            </style>`;
            $('head').append(style);
        });
    </script>
}