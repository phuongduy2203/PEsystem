@{
    ViewData["Title"] = "Repository";
}
@{
    Layout = "~/Areas/Repositories/Views/Shared/_Layout_Repo.cshtml";
}

<section class="section dashboard">
    <!-- Biểu đồ duy nhất -->
    <div class="chart-container">
        <div id="stackedChart" style="width: 100%; height: 500px;"></div>
    </div>
    <!-- Tổng số và thông báo lỗi -->
    <div class="summary-container">
        <div class="summary-item">
            <span class="summary-label">Trong RE(Chưa sửa):</span>
            <span id="countInReTotal" class="total-count"></span>
            <span id="countInReError" class="error-message" style="color: red; display: none;"></span>
        </div>
        <div class="summary-item">
            <span class="summary-label">Trong RE(Đã sửa):</span>
            <span id="countWaitCheckoutTotal" class="total-count"></span>
            <span id="countWaitCheckoutError" class="error-message" style="color: red; display: none;"></span>
        </div>
        <div class="summary-item">
            <span class="summary-label">Ngoài truyền:</span>
            <span id="countCheckInTotal" class="total-count"></span>
            <span id="countCheckInError" class="error-message" style="color: red; display: none;"></span>
        </div>
        <div class="summary-item">
            <span class="summary-label">Đã link MO:</span>
            <span id="countLinkMoTotal" class="total-count"></span>
            <span id="countLinkMoError" class="error-message" style="color: red; display: none;"></span>
        </div>
        <div class="summary-item">
            <span class="summary-label">Chờ Link MO:</span>
            <span id="countWaitLinkMoTotal" class="total-count"></span>
            <span id="countWaitLinkMoError" class="error-message" style="color: red; display: none;"></span>
        </div>
    </div>
    <!-- Legend chung -->
    <div class="shared-legend">
        <div class="legend-item">
            <span class="legend-color" style="background-color: #36A2EB;"></span>
            <span>1-7 Days</span>
        </div>
        <div class="legend-item">
            <span class="legend-color" style="background-color: #FFCE56;"></span>
            <span>8-14 Days</span>
        </div>
        <div class="legend-item-campus">
            <span class="legend-color" style="background-color: #FF0000;"></span>
            <span>15-21 Days</span>
        </div>
    </div>

    <!-- Modal hiển thị bảng dữ liệu -->
    <div id="dataModal" class="modal" style="display: none;">
        <div class="modal-content">
            <span class="close">×</span>
            <h2 id="modalTitle"></h2>
            <table id="dataTable" class="data-table">
                <thead>
                    <tr>
                        <th>Serial Number</th>
                        <th>Model Name</th>
                        <th>Test Time</th>
                        <th>Test Group</th>
                        <th>Test Code</th>
                        <th>Data1</th>
                        <th>Reason Code</th>
                        <th>WIP Group</th>
                        <th>Days Since First Test</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
</section>

<style>

    /* CSS hiện tại giữ nguyên, thêm style cho modal và DataTables */
    /* CSS hiện tại giữ nguyên, thêm style cho modal và DataTables */
    .modal {
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.4);
    }

    .modal-content {
        background-color: #fefefe;
        margin: 5% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 1200px;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

    .data-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        font-size: 12px; /* Đặt font chữ 12px */
    }

        .data-table th,
        .data-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
            max-width: 100px; /* Giới hạn chiều rộng tối đa của ô */
            white-space: nowrap; /* Không xuống dòng */
            overflow: hidden; /* Ẩn nội dung thừa */
            text-overflow: ellipsis; /* Thêm dấu ... khi nội dung bị cắt */
            font-size: 12px; /* Đảm bảo font chữ 12px */
        }

        .data-table th {
            background-color: #f2f2f2;
        }

    /* Style cho box hiển thị nội dung đầy đủ */
    .content-tooltip {
        position: absolute;
        background-color: #fff;
        border: 1px solid #ccc;
        padding: 1px;
        z-index: 1001;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        max-width: 300px;
        word-wrap: break-word;
        display: none;
        font-size: 12px; /* Font chữ 12px cho tooltip */
    }

    /* Style cho DataTables */
    .dataTables_wrapper {
        font-size: 12px; /* Font chữ 12px cho toàn bộ DataTables */
    }

    .dataTables_filter {
        position: relative;
        display: inline-block;
    }

    .excel-export-icon {
        position: absolute;
        right: 5px;
        top: 50%;
        transform: translateY(-50%);
        cursor: pointer;
        color: #28a745;
        font-size: 14px;
        font-weight: bold;
    }

        .excel-export-icon:hover {
            text-decoration: underline;
        }

        .section.dashboard {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .chart-container {
        width: 100%;
        max-width: 1200px; /* Giới hạn chiều rộng tối đa của biểu đồ */
    }

    .summary-container {
        width: 100%;
        max-width: 1200px;
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        justify-content: center;
    }

    .summary-item {
        display: flex;
        align-items: center;
    }

    .summary-label {
        font-weight: bold;
        color: #000;
    }

    .total-count {
        font-weight: bold;
        color: #000;
    }

    .error-message {
        margin-left: 10px;
    }

    /* Legend chung */
    .shared-legend {
        width: 100%;
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 10px;
    }

    .legend-item {
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .legend-color {
        width: 15px;
        height: 15px;
        display: inline-block;
        border-radius: 3px;
    }
</style>

@section Scripts {
    <script src="~/assets/vendor/echarts/echarts.min.js"></script>
    <script>
        // Hàm vẽ biểu đồ cột xếp chồng
        function drawStackedColumnChart(chartId, dataList) {
            const chartDom = document.getElementById(chartId);
            const myChart = echarts.init(chartDom);

            const option = {
                tooltip: {
                    trigger: 'axis',
                    axisPointer: { type: 'shadow' },
                    formatter: function (params) {
                        let result = `${params[0].axisValue}<br/>`;
                        params.forEach(item => {
                            result += `${item.marker} ${item.seriesName}: ${item.value}<br/>`;
                        });
                        return result;
                    }
                },
                legend: { show: false },
                grid: {
                    left: '3%',
                    right: '3%',
                    bottom: '3%',
                    containLabel: true
                },
                xAxis: {
                    type: 'category',
                    data: [
                        'Trong RE(Chưa sửa)',
                        'Trong RE(Đã sửa)',
                        'Ngoài truyền',
                        'Đã link MO',
                        'Chờ Link MO'
                    ],
                    axisLabel: { rotate: 0, interval: 0 }
                },
                yAxis: {
                    type: 'value',
                    name: 'Số lượng',
                    nameLocation: 'middle',
                    nameGap: 50
                },
                series: [
                    {
                        name: '1-7 Days',
                        type: 'bar',
                        stack: 'total',
                        data: dataList.map(item => item.data.count1To7Days || 0),
                        barWidth: 60,
                        itemStyle: { color: '#36A2EB' },
                        label: {
                            show: true,
                            position: 'inside',
                            formatter: params => params.value > 0 ? params.value : ''
                        }
                    },
                    {
                        name: '8-14 Days',
                        type: 'bar',
                        stack: 'total',
                        data: dataList.map(item => item.data.count8To14Days || 0),
                        barWidth: 60,
                        itemStyle: { color: '#FFCE56' },
                        label: {
                            show: true,
                            position: 'inside',
                            formatter: params => params.value > 0 ? params.value : ''
                        }
                    },
                    {
                        name: '15-21 Days',
                        type: 'bar',
                        stack: 'total',
                        data: dataList.map(item => item.data.count15To21Days || 0),
                        barWidth: 60,
                        itemStyle: { color: '#FF0000' },
                        label: {
                            show: true,
                            position: 'inside',
                            formatter: params => params.value > 0 ? params.value : ''
                        }
                    }
                ]
            };

            myChart.setOption(option);

            // Xử lý sự kiện nhấp vào cột
            myChart.on('click', function (params) {
                const category = params.name; // Tên cột (ví dụ: 'Trong RE(Đã sửa)')
                const seriesName = params.seriesName; // Tên vùng (ví dụ: '1-7 Days')
                if (params.value > 0) { // Chỉ hiển thị nếu có dữ liệu
                    showModal(category, seriesName);
                }
            });
        }


        // Hàm hiển thị modal với bảng dữ liệu
        async function showModal(category, seriesName) {
            const modal = document.getElementById('dataModal');
            const modalTitle = document.getElementById('modalTitle');
            const tbody = document.querySelector('#dataTable tbody');
            let dataTableInstance = null; // Biến để lưu instance của DataTable
            let tableData = []; // Lưu dữ liệu để xuất Excel

            // Xác định region và URL API dựa trên category và seriesName
            const regionMap = {
                '1-7 Days': '1',
                '8-14 Days': '2',
                '15-21 Days': '3'
            };
            const region = regionMap[seriesName];

            const apiMap = {
                'Trong RE(Chưa sửa)': 'http://10.220.130.119:9090/api/Bonepile2/region-wip-in-re',
                'Trong RE(Đã sửa)': 'http://10.220.130.119:9090/api/Bonepile2/region-wip-wait-out-re',
                'Ngoài truyền': 'http://10.220.130.119:9090/api/Bonepile2/region-wip-wait-check-in',
                'Đã link MO': 'http://10.220.130.119:9090/api/Bonepile2/region-wip-wait-link-mo',
                'Chờ Link MO': 'http://10.220.130.119:9090/api/Bonepile2/region-wip-link-mo'
            };
            const apiUrl = apiMap[category];

            if (!apiUrl || !region) return;

            // Gọi API để lấy dữ liệu chi tiết
            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(region)
                });
                const result = await response.json();

                if (result.success) {
                    modalTitle.innerText = `${category} - ${seriesName}`;
                    tbody.innerHTML = ''; // Xóa dữ liệu cũ
                    tableData = result.data; // Lưu dữ liệu để xuất Excel

                    // Đổ dữ liệu vào bảng
                    result.data.forEach(item => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td data-fulltext="${item.serialNumber}">${item.serialNumber}</td>
                            <td data-fulltext="${item.modelName}">${item.modelName}</td>
                            <td data-fulltext="${new Date(item.testTime).toLocaleString()}">${new Date(item.testTime).toLocaleString()}</td>
                            <td data-fulltext="${item.testGroup}">${item.testGroup}</td>
                            <td data-fulltext="${item.testCode}">${item.testCode}</td>
                            <td data-fulltext="${item.data1 || ''}">${item.data1 || ''}</td>
                            <td data-fulltext="${item.reasonCode || ''}">${item.reasonCode || ''}</td>
                            <td data-fulltext="${item.wipGroup}">${item.wipGroup}</td>
                            <td data-fulltext="${item.daysSinceFirstTest}">${item.daysSinceFirstTest}</td>
                        `;
                        tbody.appendChild(row);
                    });

                    // Hủy DataTable cũ nếu đã tồn tại
                    if ($.fn.DataTable.isDataTable('#dataTable')) {
                        $('#dataTable').DataTable().destroy();
                    }

                    // Khởi tạo DataTable mới
                    dataTableInstance = $('#dataTable').DataTable({
                        "paging": true,
                        "searching": true,
                        "ordering": true,
                        "info": true,
                        "lengthChange": true,
                        "pageLength": 10,
                        "language": {
                            "search": "Tìm kiếm:",
                            "lengthMenu": "Hiển thị _MENU_ bản ghi",
                            "info": "Hiển thị _START_ đến _END_ của _TOTAL_ bản ghi",
                            "paginate": {
                                "first": "Đầu",
                                "last": "Cuối",
                                "next": "Tiếp",
                                "previous": "Trước"
                            }
                        },
                        "drawCallback": function () {
                            // Thêm icon xuất Excel sau khi DataTable được vẽ
                            const filterWrapper = document.querySelector('.dataTables_filter');
                            if (filterWrapper && !filterWrapper.querySelector('.excel-export-icon')) {
                                const exportIcon = document.createElement('span');
                                exportIcon.className = 'excel-export-icon';
                                exportIcon.innerText = 'Xuất Excel';
                                filterWrapper.appendChild(exportIcon);

                                // Thêm sự kiện click cho icon xuất Excel
                                exportIcon.addEventListener('click', () => {
                                    exportTableToExcel(`${category}_${seriesName}.xlsx`, tableData);
                                });
                            }
                        }
                    });

                    // Thêm sự kiện hover để hiển thị nội dung đầy đủ
                    const cells = document.querySelectorAll('#dataTable td');
                    cells.forEach(cell => {
                        cell.addEventListener('mouseover', (e) => {
                            const fullText = cell.getAttribute('data-fulltext');
                            if (fullText && cell.scrollWidth > cell.clientWidth) { // Chỉ hiển thị nếu nội dung bị cắt
                                const tooltip = document.createElement('div');
                                tooltip.className = 'content-tooltip';
                                tooltip.innerHTML = `<div>${fullText}</div>`;
                                document.body.appendChild(tooltip);

                                // Định vị tooltip bên dưới ô
                                const rect = cell.getBoundingClientRect();
                                tooltip.style.top = `${rect.bottom + window.scrollY + 5}px`;
                                tooltip.style.left = `${rect.left + window.scrollX}px`;
                                tooltip.style.display = 'block';

                                cell._tooltip = tooltip; // Lưu tooltip để xóa sau
                            }
                        });

                        cell.addEventListener('mouseout', () => {
                            if (cell._tooltip) {
                                cell._tooltip.remove();
                                cell._tooltip = null;
                            }
                        });
                    });

                    // Hiển thị modal
                    modal.style.display = 'block';
                } else {
                    alert(`Error: ${result.message}`);
                }
            } catch (error) {
                alert(`Error fetching data: ${error.message}`);
            }

            // Đóng modal và hủy DataTable
            const closeModal = () => {
                modal.style.display = 'none';
                if (dataTableInstance) {
                    dataTableInstance.destroy();
                }
                // Xóa tất cả tooltip còn sót lại
                document.querySelectorAll('.content-tooltip').forEach(tooltip => tooltip.remove());
            };

            // Đóng modal khi nhấp vào nút đóng
            document.querySelector('.close').addEventListener('click', closeModal);

            // Đóng modal khi nhấp ra ngoài
            window.addEventListener('click', (event) => {
                if (event.target === modal) {
                    closeModal();
                }
            });
        }

        // Đóng modal
        document.querySelector('.close').addEventListener('click', () => {
            document.getElementById('dataModal').style.display = 'none';
        });

        // Đóng modal khi nhấp ra ngoài
        window.addEventListener('click', (event) => {
            const modal = document.getElementById('dataModal');
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        });


        // Hàm xuất dữ liệu bảng ra file Excel
        function exportTableToExcel(filename, tableData) {
            const wsData = [
                [
                    'Serial Number',
                    'Model Name',
                    'Test Time',
                    'Test Group',
                    'Test Code',
                    'Data1',
                    'Reason Code',
                    'WIP Group',
                    'Days Since First Test'
                ],
                ...tableData.map(item => [
                    item.serialNumber,
                    item.modelName,
                    new Date(item.testTime).toLocaleString(),
                    item.testGroup,
                    item.testCode,
                    item.data1 || '',
                    item.reasonCode || '',
                    item.wipGroup,
                    item.daysSinceFirstTest
                ])
            ];

            const ws = XLSX.utils.aoa_to_sheet(wsData);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');
            XLSX.writeFile(wb, filename);
        }

        // Hàm gọi API và vẽ biểu đồ
        async function fetchDataAndDrawChart() {
            const apiCalls = [
                { url: 'http://localhost:5025/api/Bonepile2/count-In-RE', totalId: 'countInReTotal', errorId: 'countInReError' },
                { url: 'http://localhost:5025/api/Bonepile2/count-wait-checkout', totalId: 'countWaitCheckoutTotal', errorId: 'countWaitCheckoutError' },
                { url: 'http://localhost:5025/api/Bonepile2/count-wait-checkin-RE', totalId: 'countCheckInTotal', errorId: 'countCheckInError' },
                { url: 'http://localhost:5025/api/Bonepile2/count-link-mo', totalId: 'countLinkMoTotal', errorId: 'countLinkMoError' },
                { url: 'http://localhost:5025/api/Bonepile2/count-wait-link-mo', totalId: 'countWaitLinkMoTotal', errorId: 'countWaitLinkMoError' }
            ];

            const dataList = [];

            for (const api of apiCalls) {
                try {
                    const response = await fetch(api.url);
                    if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                    const data = await response.json();
                    console.log(`Data from ${api.url}:`, data);

                    const errorElement = document.getElementById(api.errorId);
                    const totalElement = document.getElementById(api.totalId);

                    if (!errorElement || !totalElement) {
                        console.error(`Element not found: ${api.errorId} or ${api.totalId}`);
                        dataList.push({ data: { totalCount: 0, count1To7Days: 0, count8To14Days: 0, count15To21Days: 0 } });
                        continue;
                    }

                    if (data && data.success) {
                        dataList.push({ data });
                        totalElement.innerText = `(${data.totalCount || 0})`;
                        errorElement.style.display = 'none';
                    } else {
                        console.error(`API call failed for ${api.url}:`, data ? data.message : 'No data');
                        errorElement.innerText = `Error: ${data ? data.message : 'API call failed'}`;
                        errorElement.style.display = 'inline';
                        dataList.push({ data: { totalCount: 0, count1To7Days: 0, count8To14Days: 0, count15To21Days: 0 } });
                    }
                } catch (error) {
                    console.error(`Error fetching data from ${api.url}:`, error);
                    const errorElement = document.getElementById(api.errorId);
                    if (errorElement) {
                        errorElement.innerText = `Error: ${error.message}`;
                        errorElement.style.display = 'inline';
                    }
                    dataList.push({ data: { totalCount: 0, count1To7Days: 0, count8To14Days: 0, count15To21Days: 0 } });
                }
            }

            drawStackedColumnChart('stackedChart', dataList);
        }

        document.addEventListener('DOMContentLoaded', fetchDataAndDrawChart);
    </script>
}