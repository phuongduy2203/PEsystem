// Hàm để ẩn tất cả các form và khu vực kết quả
function hideAllElements() {
    const forms = ["input-sn-form", "custom-form", "update-data-form", "history-apply-form"];
    const results = ["input-sn-result", "create-task-result", "update-data-result", "history-apply-result"];

    forms.forEach(formId => {
        const form = document.getElementById(formId);
        if (form) {
            form.classList.add("hidden");
        } else {
            console.warn(`Form with ID ${formId} not found.`);
        }
    });

    results.forEach(resultId => {
        const result = document.getElementById(resultId);
        if (result) {
            result.classList.add("hidden");
        } else {
            console.warn(`Result with ID ${resultId} not found.`);
        }
    });

    // Xóa giá trị của các trường nhập liệu khi ẩn form
    const snInput = document.getElementById("sn-input");
    const snInputUpdate = document.getElementById("sn-input-update");
    const descriptionInput = document.getElementById("description-input");
    const nvMemberInput = document.getElementById("NVmember-input");
    const taskInput = document.getElementById("task-input");
    const poInput = document.getElementById("po-input");
    const costInput = document.getElementById("cost-input");
    const fileInput = document.getElementById("file-input");
    const scrapOptions = document.getElementById("Scrap-options");

    if (snInput) snInput.value = "";
    if (snInputUpdate) snInputUpdate.value = "";
    if (descriptionInput) descriptionInput.value = "";
    if (nvMemberInput) nvMemberInput.value = "";
    if (taskInput) taskInput.value = "";
    if (poInput) poInput.value = "";
    if (costInput) costInput.value = "";
    if (fileInput) fileInput.value = "";
    if (scrapOptions) scrapOptions.selectedIndex = 0;
}

// Ẩn tất cả các form và khu vực kết quả ngay lập tức
hideAllElements();

/** 🔥 Lấy currentUsername từ thẻ HTML */
function getCurrentUsername() {
    const usernameElement = document.querySelector(".d-none.d-md-block.ps-2");
    return usernameElement ? usernameElement.textContent.trim() : null;
}

// Hàm tạo và tải xuống file Excel
function exportToExcel(data, filename) {
    const worksheet = XLSX.utils.json_to_sheet(data);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "ScrapData");
    XLSX.writeFile(workbook, filename);
}

// Hàm xử lý tạo task (dùng chung cho create-task-btn và create-history-task-btn)
async function processCreateTask(internalTasks, saveApplyStatus, resultDivId) {
    const resultDiv = document.getElementById(resultDivId);
    resultDiv.innerHTML = `
        <div class="alert alert-info">
            <strong>Thông báo:</strong> Đang tải xuống dữ liệu...
        </div>
    `;

    const requestData = {
        internalTasks: internalTasks,
        saveApplyStatus: saveApplyStatus
    };

    try {
        const response = await fetch("http://10.220.130.119:9090/api/Scrap/create-task", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(requestData)
        });

        const result = await response.json();

        if (response.ok) {
            const excelData = result.data.map(item => ({
                Item: item.item ?? "N/A ",
                Project: item.project ?? "N/A",
                OPN: item.opn ?? "N/A",
                Purpose: item.purpose ?? "N/A",
                "IC PN": item.icPn ?? "N/A",
                "IC Detail PN": item.icDetailPn ?? "N/A",
                "Board SN": item.boardSN ?? "N/A",
                Qty: item.qty ?? "N/A",
                "After/Before Kanban": item.afterBeforeKanban ?? "N/A",
                Category: item.category ?? "N/A",
                CM: item.cm ?? "N/A",
                Plant: item.plant ?? "N/A",
                Sloc: item.sloc ?? "N/A",
                "Task Number": item.taskNumber ?? "N/A",
                "PO Number": item.poNumber ?? "N/A",
                "Create By": item.createBy ?? "N/A",
                "Create Date": item.createDate ?? "N/A",
                Cost: item.cost ?? "N/A",
                Remark: item.smtTime ?? "N/A"
            }));

            const now = new Date();
            const filename = `ScrapData_${now.toISOString().replace(/[:.]/g, '-')}.xlsx`;
            exportToExcel(excelData, filename);

            setTimeout(() => {
                location.reload();
            }, 1000);
        } else {
            resultDiv.innerHTML = `
                <div class="alert alert-danger">
                    <strong>Lỗi:</strong> ${result.message}
                </div>
            `;
        }
    } catch (error) {
        resultDiv.innerHTML = `
            <div class="alert alert-danger">
                <strong>Lỗi:</strong> Không thể kết nối đến API. Vui lòng kiểm tra lại.
            </div>
        `;
        console.error("Error:", error);
    }
}

// Hàm hiển thị bảng với phân trang
function renderTableWithPagination(data, resultDiv, tableHeaders, rowTemplate, selectAllId, checkboxName) {
    const rowsPerPage = 10; // Số dòng mỗi trang
    let currentPage = 1; // Trang hiện tại
    const totalRows = data.length; // Tổng số dòng
    const totalPages = Math.ceil(totalRows / rowsPerPage); // Tổng số trang

    // Hàm hiển thị dữ liệu cho trang hiện tại
    function displayPage(page) {
        const start = (page - 1) * rowsPerPage;
        const end = start + rowsPerPage;
        const paginatedData = data.slice(start, end);

        let tableHtml = `
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            ${tableHeaders}
                        </tr>
                    </thead>
                    <tbody>
        `;

        paginatedData.forEach(item => {
            tableHtml += rowTemplate(item);
        });

        tableHtml += `
                    </tbody>
                </table>
            </div>
        `;

        // Thêm nút phân trang nếu cần
        if (totalRows > rowsPerPage) {
            tableHtml += `
                <div class="pagination" style="margin-top: 10px; text-align: center;">
                    <button id="prev-page" class="btn btn-sm btn-secondary" ${currentPage === 1 ? 'disabled' : ''}>Previous</button>
                    <span style="margin: 0 10px;">Page ${currentPage} of ${totalPages}</span>
                    <button id="next-page" class="btn btn-sm btn-secondary" ${currentPage === totalPages ? 'disabled' : ''}>Next</button>
                </div>
            `;
        }

        resultDiv.innerHTML = tableHtml;

        // Thêm sự kiện cho nút "Select All"
        const selectAllCheckbox = document.getElementById(selectAllId);
        if (selectAllCheckbox) {
            selectAllCheckbox.addEventListener("change", function () {
                const checkboxes = document.getElementsByName(checkboxName);
                checkboxes.forEach(checkbox => {
                    checkbox.checked = this.checked;
                });
            });
        }

        // Thêm sự kiện cho nút phân trang
        const prevButton = document.getElementById("prev-page");
        const nextButton = document.getElementById("next-page");

        if (prevButton) {
            prevButton.addEventListener("click", () => {
                if (currentPage > 1) {
                    currentPage--;
                    displayPage(currentPage);
                }
            });
        }

        if (nextButton) {
            nextButton.addEventListener("click", () => {
                if (currentPage < totalPages) {
                    currentPage++;
                    displayPage(currentPage);
                }
            });
        }
    }

    // Hiển thị trang đầu tiên
    displayPage(currentPage);
}

// Ẩn tất cả các form và khu vực kết quả khi trang tải lần đầu
document.addEventListener("DOMContentLoaded", function () {
    console.log("DOMContentLoaded triggered");
    hideAllElements();

    // Xử lý sự kiện khi nhấn nút "INPUT SN"
    document.getElementById("input-sn-btn").addEventListener("click", async function () {
        const snInput = document.getElementById("sn-input").value.trim();
        const description = document.getElementById("description-input").value.trim();
        const approveScrapPerson = document.getElementById("NVmember-input").value.trim();
        const purpose = document.getElementById("Scrap-options").value;
        const currentUsername = getCurrentUsername();

        if (!currentUsername) {
            alert("Failed to get the current username.");
            return;
        }

        const sNs = snInput.split(/\r?\n/).map(sn => sn.trim()).filter(sn => sn);

        if (!sNs.length) {
            alert("Vui lòng nhập ít nhất một Serial Number hợp lệ.");
            return;
        }
        if (!description) {
            alert("Vui lòng nhập mô tả (Description).");
            return;
        }
        if (!approveScrapPerson) {
            alert("Vui lòng nhập tên người phê duyệt (NV person approve).");
            return;
        }
        if (purpose !== "0" && purpose !== "1") {
            alert("Vui lòng chọn loại scrap (Purpose).");
            return;
        }

        const requestData = {
            sNs: sNs,
            createdBy: currentUsername,
            description: description,
            approveScrapPerson: approveScrapPerson,
            purpose: purpose
        };

        const resultDiv = document.getElementById("input-sn-result");
        if (!resultDiv) {
            console.error("Element with ID 'input-sn-result' not found.");
            return;
        }
        resultDiv.innerHTML = `
        <div class="alert alert-info">
            <strong>Thông báo:</strong> Đang chờ xử lý...
        </div>
    `;
        console.log("Loading message set: Đang chờ xử lý...");

        await new Promise(resolve => setTimeout(resolve, 0));

        try {
            // Gọi API input-sn
            const response = await fetch("http://localhost:5025/api/Scrap/input-sn", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(requestData)
            });

            const result = await response.json();

            if (response.ok) {
                // Nếu API input-sn thành công, gọi API UpdateProduct
                const updateProductRequest = {
                    serialNumbers: sNs, // Sử dụng danh sách SN đã nhập
                    note: "Đã được NV approved scrap"
                };

                try {
                    const updateProductResponse = await fetch("http://10.220.130.119:9090/api/Product/UpdateProduct", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify(updateProductRequest)
                    });

                    const updateProductResult = await updateProductResponse.json();

                    if (updateProductResponse.ok && updateProductResult.success) {
                        // Nếu cả hai API đều thành công
                        resultDiv.innerHTML = `
                        <div class="alert alert-success">
                            <strong>${result.message}</strong><br>
                            Internal Task: ${result.internalTask}<br>
                            Update Product: ${updateProductResult.message}
                        </div>
                    `;
                    } else {
                        // Nếu API UpdateProduct thất bại
                        resultDiv.innerHTML = `
                        <div class="alert alert-warning">
                            <strong>${result.message}</strong><br>
                            Internal Task: ${result.internalTask}<br>
                            <strong>Lỗi khi cập nhật Product:</strong> ${updateProductResult.message || "Không có thông tin lỗi"}
                        </div>
                    `;
                    }
                } catch (updateError) {
                    // Nếu có lỗi khi gọi API UpdateProduct
                    resultDiv.innerHTML = `
                    <div class="alert alert-warning">
                        <strong>${result.message}</strong><br>
                        Internal Task: ${result.internalTask}<br>
                        <strong>Lỗi khi gọi API UpdateProduct:</strong> Không thể kết nối đến API. Vui lòng kiểm tra lại.
                    </div>
                `;
                    console.error("UpdateProduct Error:", updateError);
                }
            } else {
                // Nếu API input-sn thất bại
                resultDiv.innerHTML = `
                <div class="alert alert-danger">
                    <strong>Lỗi:</strong> ${result.message}
                </div>
            `;
            }
        } catch (error) {
            // Nếu có lỗi khi gọi API input-sn
            resultDiv.innerHTML = `
            <div class="alert alert-danger">
                <strong>Lỗi:</strong> Không thể kết nối đến API. Vui lòng kiểm tra lại.
            </div>
        `;
            console.error("Error:", error);
        }
    });

    // Xử lý sự kiện khi nhấn nút "Create Task"
    document.getElementById("create-task-btn").addEventListener("click", async function () {
        const checkboxes = document.querySelectorAll('input[name="task-checkbox"]:checked');
        const selectedInternalTasks = Array.from(checkboxes).map(checkbox => checkbox.value);

        if (selectedInternalTasks.length === 0) {
            alert("Vui lòng chọn ít nhất một Internal Task.");
            return;
        }

        const modalHtml = `
            <div id="custom-modal" class="modal" style="display: block; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1000;">
                <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: white; padding: 20px; border-radius: 5px; text-align: center;">
                    <p>Bạn có muốn lưu lại những InternalTask này vào list đã gửi cho khách hàng?</p>
                    <button id="modal-yes-btn" style="margin-right: 10px;">Có</button>
                    <button id="modal-no-btn">Không</button>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML('beforeend', modalHtml);

        document.getElementById("modal-yes-btn").addEventListener("click", async function () {
            document.getElementById("custom-modal").remove();
            await processCreateTask(selectedInternalTasks, "1", "create-task-result");
        });

        document.getElementById("modal-no-btn").addEventListener("click", function () {
            document.getElementById("custom-modal").remove();
            processCreateTask(selectedInternalTasks, "0", "create-task-result");
        });
    });

    // Xử lý sự kiện khi nhấn nút "Create History Task"
    document.getElementById("create-history-task-btn").addEventListener("click", async function () {
        const checkboxes = document.querySelectorAll('input[name="history-task-checkbox"]:checked');
        const selectedInternalTasks = Array.from(checkboxes).map(checkbox => checkbox.value);

        if (selectedInternalTasks.length === 0) {
            alert("Vui lòng chọn ít nhất một Internal Task.");
            return;
        }

        // Vì ApplyTaskStatus đã là 1, gọi trực tiếp API /api/Scrap/create-task với saveApplyStatus = "1"
        await processCreateTask(selectedInternalTasks, "1", "history-apply-result");
    });

    // Xử lý sự kiện khi nhấn nút "Update Task PO"
    document.getElementById("update-task-btn").addEventListener("click", async function () {
        const snInput = document.getElementById("sn-input-update").value.trim();
        const task = document.getElementById("task-input").value.trim();
        const po = document.getElementById("po-input").value.trim();

        const snList = snInput.split(/\r?\n/).map(sn => sn.trim()).filter(sn => sn);

        console.log("snInput:", snInput);
        console.log("snList:", snList);

        if (!snList.length) {
            alert("Vui lòng nhập ít nhất một Serial Number hợp lệ.");
            return;
        }
        if (!task) {
            alert("Vui lòng nhập Task.");
            return;
        }
        if (!po) {
            alert("Vui lòng nhập PO.");
            return;
        }

        const requestData = {
            snList: snList,
            task: task,
            po: po
        };

        const resultDiv = document.getElementById("update-data-result");
        if (!resultDiv) {
            console.error("Element with ID 'update-data-result' not found.");
            return;
        }
        resultDiv.innerHTML = `
            <div class="alert alert-info">
                <strong>Thông báo:</strong> Đang chờ xử lý...
            </div>
        `;
        console.log("Loading message set: Đang chờ xử lý...");

        await new Promise(resolve => setTimeout(resolve, 0));

        try {
            const response = await fetch("http://10.220.130.119:9090/api/Scrap/update-task-po", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(requestData)
            });

            const result = await response.json();

            if (response.ok) {
                resultDiv.innerHTML = `
                    <div class="alert alert-success">
                        <strong>${result.message}</strong>
                    </div>
                `;
            } else {
                resultDiv.innerHTML = `
                    <div class="alert alert-danger">
                        <strong>Lỗi:</strong> ${result.message}
                    </div>
                `;
            }
        } catch (error) {
            resultDiv.innerHTML = `
                <div class="alert alert-danger">
                    <strong>Lỗi:</strong> Không thể kết nối đến API. Vui lòng kiểm tra lại.
                </div>
            `;
            console.error("Error:", error);
        }
    });

    // Xử lý sự kiện khi nhấn nút "Update Cost"
    document.getElementById("update-cost-btn").addEventListener("click", async function () {
        const fileInput = document.getElementById("file-input");
        const resultDiv = document.getElementById("update-data-result");

        if (!fileInput.files || fileInput.files.length === 0) {
            alert("Vui lòng chọn một file Excel để tải lên.");
            return;
        }

        const file = fileInput.files[0];
        const reader = new FileReader();

        reader.onload = async function (e) {
            try {
                const data = new Uint8Array(e.target.result);
                const workbook = XLSX.read(data, { type: "array" });

                const firstSheetName = workbook.SheetNames[0];
                const worksheet = workbook.Sheets[firstSheetName];

                const jsonData = XLSX.utils.sheet_to_json(worksheet);

                if (!jsonData || jsonData.length === 0) {
                    alert("File Excel không chứa dữ liệu.");
                    return;
                }

                const requiredColumns = ["Board SN", "Cost"];
                const columns = Object.keys(jsonData[0]);
                const missingColumns = requiredColumns.filter(col => !columns.includes(col));
                if (missingColumns.length > 0) {
                    alert(`File Excel thiếu các cột: ${missingColumns.join(", ")}.`);
                    return;
                }

                const boardSNs = [];
                const costs = [];
                jsonData.forEach(row => {
                    const boardSN = row["Board SN"] ? String(row["Board SN"]).trim() : null;
                    const cost = row["Cost"] != null ? Number(row["Cost"]) : null;

                    if (boardSN && cost != null) {
                        boardSNs.push(boardSN);
                        costs.push(cost);
                    }
                });

                if (boardSNs.length === 0 || costs.length === 0 || boardSNs.length !== costs.length) {
                    alert("Dữ liệu trong file Excel không hợp lệ. Vui lòng kiểm tra lại cột 'Board SN' và 'Cost'.");
                    return;
                }

                const requestData = {
                    boardSNs: boardSNs,
                    costs: costs
                };

                resultDiv.innerHTML = `
                    <div class="alert alert-info">
                        <strong>Thông báo:</strong> Đang chờ xử lý...
                    </div>
                `;
                console.log("Loading message set: Đang chờ xử lý...");

                await new Promise(resolve => setTimeout(resolve, 0));

                const response = await fetch("http://10.220.130.119:9090/api/Scrap/update-cost", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(requestData)
                });

                const result = await response.json();

                if (response.ok) {
                    resultDiv.innerHTML = `
                        <div class="alert alert-success">
                            <strong>${result.message}</strong>
                        </div>
                    `;
                } else {
                    resultDiv.innerHTML = `
                        <div class="alert alert-danger">
                            <strong>Lỗi:</strong> ${result.message}
                        </div>
                    `;
                }
            } catch (error) {
                resultDiv.innerHTML = `
                    <div class="alert alert-danger">
                        <strong>Lỗi:</strong> Không thể xử lý file Excel hoặc kết nối đến API. Vui lòng kiểm tra lại.
                    </div>
                `;
                console.error("Error:", error);
            }
        };

        reader.onerror = function () {
            alert("Không thể đọc file Excel. Vui lòng kiểm tra lại file.");
        };

        reader.readAsArrayBuffer(file);
    });

    // Xử lý sự kiện thay đổi giá trị trong dropdown
    document.getElementById("search-options").addEventListener("change", async function () {
        console.log("Dropdown changed to:", this.value);
        hideAllElements();

        const selectedValue = this.value;

        if (selectedValue === "INPUT_SN") {
            document.getElementById("input-sn-form").classList.remove("hidden");
            document.getElementById("input-sn-result").classList.remove("hidden");
        } else if (selectedValue === "CREATE_TASK_FORM") {
            document.getElementById("custom-form").classList.remove("hidden");
            document.getElementById("create-task-result").classList.remove("hidden");
            try {
                const response = await fetch("http://10.220.130.119:9090/api/Scrap/get-scrap-status-zero", {
                    method: "GET",
                    headers: {
                        "Content-Type": "application/json"
                    }
                });

                const result = await response.json();
                const resultDiv = document.getElementById("create-task-result");

                if (response.ok) {
                    const sortedData = result.sort((a, b) => new Date(a.createTime) - new Date(b.createTime));

                    const tableHeaders = `
                        <th class="checkbox-column"><input type="checkbox" id="select-all"></th>
                        <th>Internal Task</th>
                        <th>Description</th>
                        <th>Approve Scrap Person</th>
                        <th>KanBan Status</th>
                        <th>Create Time</th>
                        <th>Create By</th>
                        <th>Apply Task Status</th>
                        <th>Total Q'ty</th>
                    `;

                    const rowTemplate = (item) => `
                        <tr>
                            <td class="checkbox-column"><input type="checkbox" name="task-checkbox" value="${item.internalTask}"></td>
                            <td>${item.internalTask}</td>
                            <td>${item.description}</td>
                            <td>${item.approveScrapPerson}</td>
                            <td>${item.kanBanStatus}</td>
                            <td>${item.createTime}</td>
                            <td>${item.createBy}</td>
                            <td>${item.applyTaskStatus}</td>
                            <td>${item.totalQty}</td>
                        </tr>
                    `;

                    renderTableWithPagination(sortedData, resultDiv, tableHeaders, rowTemplate, "select-all", "task-checkbox");
                } else {
                    resultDiv.innerHTML = `
                        <div class="alert alert-danger">
                            <strong>Lỗi:</strong> ${result.message}
                        </div>
                    `;
                }
            } catch (error) {
                const resultDiv = document.getElementById("create-task-result");
                resultDiv.innerHTML = `
                    <div class="alert alert-danger">
                        <strong>Lỗi:</strong> Không thể kết nối đến API. Vui lòng kiểm tra lại.
                    </div>
                `;
                console.error("Error:", error);
            }
        } else if (selectedValue === "UPDATE_DATA") {
            document.getElementById("update-data-form").classList.remove("hidden");
            document.getElementById("update-data-result").classList.remove("hidden");
        } else if (selectedValue === "HISTORY_APPLY") {
            document.getElementById("history-apply-form").classList.remove("hidden");
            document.getElementById("history-apply-result").classList.remove("hidden");

            try {
                const response = await fetch("http://10.220.130.119:9090/api/Scrap/get-history-apply", {
                    method: "GET",
                    headers: {
                        "Content-Type": "application/json"
                    }
                });

                const result = await response.json();
                const resultDiv = document.getElementById("history-apply-result");

                if (response.ok) {
                    const sortedData = result.sort((a, b) => new Date(b.applyTime) - new Date(a.applyTime));

                    const tableHeaders = `
                        <th class="checkbox-column"><input type="checkbox" id="select-all-history"></th>
                        <th>Internal Task</th>
                        <th>Description</th>
                        <th>Approve Scrap Person</th>
                        <th>KanBan Status</th>
                        <th>Create Time</th>
                        <th>Create By</th>
                        <th>Apply Time</th>
                        <th>Apply Task Status</th>
                        <th>Total Q'ty</th>
                    `;

                    const rowTemplate = (item) => `
                        <tr>
                            <td class="checkbox-column"><input type="checkbox" name="history-task-checkbox" value="${item.internalTask}"></td>
                            <td>${item.internalTask}</td>
                            <td>${item.description}</td>
                            <td>${item.approveScrapPerson}</td>
                            <td>${item.kanBanStatus}</td>
                            <td>${item.createTime}</td>
                            <td>${item.createBy}</td>
                            <td>${item.applyTime}</td>
                            <td>${item.applyTaskStatus}</td>
                            <td>${item.totalQty}</td>
                        </tr>
                    `;

                    renderTableWithPagination(sortedData, resultDiv, tableHeaders, rowTemplate, "select-all-history", "history-task-checkbox");
                } else {
                    resultDiv.innerHTML = `
                        <div class="alert alert-danger">
                            <strong>Lỗi:</strong> ${result.message}
                        </div>
                    `;
                }
            } catch (error) {
                const resultDiv = document.getElementById("history-apply-result");
                resultDiv.innerHTML = `
                    <div class="alert alert-danger">
                        <strong>Lỗi:</strong> Không thể kết nối đến API. Vui lòng kiểm tra lại.
                    </div>
                `;
                console.error("Error:", error);
            }
        }
    });
});