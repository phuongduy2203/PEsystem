using API_WEB.Models.SmartFA;
using API_WEB.ModelsDB;
using API_WEB.ModelsOracle;
using DocumentFormat.OpenXml.InkML;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Oracle.ManagedDataAccess.Client;
using System.DirectoryServices.Protocols;
using static API_WEB.Controllers.ProductController;

namespace API_WEB.Controllers.SmartFA
{
    [Route("api/[controller]")]
    [ApiController]
    public class SearchFAController : ControllerBase
    {
        private readonly CSDL_NE _sqlContext;
        private readonly OracleDbContext _oracleContext;
        public SearchFAController(CSDL_NE sqlContext, OracleDbContext oracleContext)
        {
            _sqlContext = sqlContext;
            _oracleContext = oracleContext;
        }

        [HttpGet("get-fullname")]
        public IActionResult GetFullName(string username)
        {
            if (string.IsNullOrEmpty(username))
            {
                return BadRequest(new { success = false, message = "Username không được để trống." });
            }
            try
            {
                // Tìm FullName dựa trên Username
                var user = _sqlContext.Users.FirstOrDefault(u => u.Username == username);

                if (user == null)
                {
                    return NotFound(new { success = false, message = "Không tìm thấy người dùng." });
                }

                return Ok(new { success = true, fullName = user.FullName });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        //Lấy FullName theo từng ID
        [HttpPost("get-fullname-batch")]
        public IActionResult GetFullNameBatch([FromBody] List<string> usernames)
        {
            var users = _sqlContext.Users
                .Where(u => usernames.Contains(u.Username))
                .ToDictionary(u => u.Username, u => u.FullName);

            return Ok(new { success = true, data = users });
        }

        //Lấy FullName theo list
        [HttpPost("get-fullname-batch-list")]
        public async Task<IActionResult> GetFullNameBatchList([FromBody] List<string> usernames)
        {
            if (usernames == null || usernames.Count == 0)
            {
                return BadRequest(new { success = false, message = "Danh sách ID không được để trống." });
            }

            try
            {
                // Lấy danh sách FullName từ SQL Server
                var users = await _sqlContext.Users
                    .Where(u => usernames.Contains(u.Username))
                    .ToDictionaryAsync(u => u.Username, u => u.FullName);

                return Ok(new { success = true, data = users });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }


        [HttpGet("get-unique-modelnames")]
        public async Task<IActionResult> GetUniqueModelNames()
        {
            try
            {
                // Truy vấn để lấy danh sách ModelName khác nhau với điều kiện MODEL_SERIAL != "SWITCH"
                var uniqueModelNames = await (
                    from task in _oracleContext.OracleDataRepairTask
                    join modelDesc in _oracleContext.OracleDataCModelDesc
                    on task.MODEL_NAME equals modelDesc.MODEL_NAME
                    where task.MODEL_NAME != null
                          && modelDesc.MODEL_SERIAL != "SWITCH" // Điều kiện MODEL_SERIAL
                    select task.MODEL_NAME
                )
                .Distinct()
                .ToListAsync();

                return Ok(new
                {
                    success = true,
                    data = uniqueModelNames
                });
            }
            catch (Oracle.ManagedDataAccess.Client.OracleException ex)
            {
                // Xử lý lỗi liên quan đến Oracle
                return StatusCode(500, new
                {
                    success = false,
                    message = $"Oracle Error: {ex.Message}"
                });
            }
            catch (Exception ex)
            {
                // Xử lý lỗi chung
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }

        [HttpGet("get-unique-status")]
        public async Task<IActionResult> GetUniqueStatus()
        {
            try
            {
                // Truy vấn để lấy danh sách status khác nhau
                var uniqueStatus = await _oracleContext.OracleDataRepairTask
                    .Where(task => task.DATA11 != null && !task.MODEL_NAME.StartsWith("SA")) // Loại bỏ giá trị NULL
                    .Select(task => task.DATA11)
                    .Distinct()
                    .ToListAsync();

                return Ok(new
                {
                    success = true,
                    data = uniqueStatus
                });
            }
            catch (Oracle.ManagedDataAccess.Client.OracleException ex)
            {
                // Xử lý lỗi liên quan đến Oracle
                return StatusCode(500, new
                {
                    success = false,
                    message = $"Oracle Error: {ex.Message}"
                });
            }
            catch (Exception ex)
            {
                // Xử lý lỗi chung
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }

        [HttpGet("get-unique-SN")]
        public async Task<IActionResult> GetUniqueSN()
        {
            try
            {
                var uniqueStatus = await (
                    from task in _oracleContext.OracleDataRepairTask
                    join modelDesc in _oracleContext.OracleDataCModelDesc
                    on task.MODEL_NAME equals modelDesc.MODEL_NAME
                    where task.SERIAL_NUMBER != null
                          && modelDesc.MODEL_SERIAL != "SWITCH"
                          && task.MODEL_NAME != null
                          && modelDesc.MODEL_NAME != null // Kiểm tra null để đảm bảo an toàn
                    select task.SERIAL_NUMBER
                )
                .Distinct()
                .ToListAsync();

                return Ok(new
                {
                    success = true,
                    data = uniqueStatus
                });
            }
            catch (Oracle.ManagedDataAccess.Client.OracleException ex)
            {
                return StatusCode(500, new
                {
                    success = false,
                    message = $"Oracle Error: {ex.Message}"
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }

        [HttpPost("search-history-by-list")]
        public async Task<IActionResult> GetHistoryBySerialNumberList([FromBody] List<string> serialNumbers)
        {
            try
            {
                if (serialNumbers == null || serialNumbers.Count == 0)
                {
                    return BadRequest(new { success = false, message = "Danh sách Serial Number không được để trống." });
                }

                // Truy vấn lịch sử theo danh sách Serial Numbers
                var history = await _oracleContext.Set<R_REPAIR_TASK_DETAIL_T>()
                    .Where(detail => serialNumbers.Contains(detail.SERIAL_NUMBER))
                    .Select(detail => new
                    {
                        SERIAL_NUMBER = detail.SERIAL_NUMBER ?? "",
                        MO_NUMBER = detail.MO_NUMBER ?? "",
                        MODEL_NAME = detail.MODEL_NAME ?? "",
                        TEST_GROUP = detail.TEST_GROUP ?? "",
                        TEST_CODE = detail.TEST_CODE ?? "",
                        DATA1 = detail.DATA1 ?? "",
                        DATA11 = detail.DATA11 ?? "",
                        DATA12 = detail.DATA12 ?? "",
                        DATE3 = detail.DATE3,
                        TESTER = detail.TESTER ?? "",
                        DATA17 = detail.DATA17??"",//type
                        DATA18 = detail.DATA18??"",//Location
                        DATA19 = detail.DATA19??"",//Lịch sử sửa chữa.
                    })
                    .ToListAsync();

                if (history == null || history.Count == 0)
                {
                    return Ok(new { success = true, message = "Không tìm thấy lịch sử.", data = new List<object>() });
                }

                return Ok(new { success = true, data = history });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        [HttpPost("search")]
        public async Task<IActionResult> SearchRepairTasks([FromBody] SearchRequestNe request)
        {
            try
            {
                // 1. Truy vấn OracleDataRepairTask và chỉ lấy SERIAL_NUMBER với MODEL_SERIAL != "SWITCH"
                var oracleTasks = await (
                    from task in _oracleContext.OracleDataRepairTask
                    join modelDesc in _oracleContext.OracleDataCModelDesc
                    on task.MODEL_NAME equals modelDesc.MODEL_NAME
                    join wipGroup in _oracleContext.OracleDataR107 // Join với bảng 107
                    on task.SERIAL_NUMBER equals wipGroup.SERIAL_NUMBER
                    where modelDesc.MODEL_SERIAL != "SWITCH" // Điều kiện lọc MODEL_SERIAL
                          && (string.IsNullOrEmpty(request.Data1) || EF.Functions.Like(task.DATA1, $"%{request.Data1}%"))
                          && (request.SerialNumbers == null || !request.SerialNumbers.Any() || request.SerialNumbers.Contains(task.SERIAL_NUMBER))
                          && (string.IsNullOrEmpty(request.ModelName) || task.MODEL_NAME == request.ModelName)
                          && (string.IsNullOrEmpty(request.TestCode) || task.TEST_CODE == request.TestCode)
                          && (string.IsNullOrEmpty(request.Status) || task.DATA11 == request.Status)
                          && (string.IsNullOrEmpty(request.HandoverStatus) || task.DATA13 == request.HandoverStatus)
                    select new
                    {
                        task.SERIAL_NUMBER,
                        task.MODEL_NAME,
                        task.TEST_GROUP,
                        task.TEST_CODE,
                        task.DATA1,
                        task.DATA11,
                        task.DATA12,
                        task.DATE3,
                        task.TESTER,
                        task.DATA13,
                        task.DATA17,
                        task.DATA18,
                        WIP_GROUP = wipGroup.WIP_GROUP
                    }
                ).ToListAsync();

                if (!oracleTasks.Any())
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Không tìm thấy dữ liệu phù hợp.",
                        data = new List<object>()
                    });
                }

                // 2. Lấy danh sách ModelName từ OracleTasks
                var modelNames = oracleTasks.Select(t => t.MODEL_NAME).Distinct().ToList();

                // 3. Truy vấn ProductLine từ bảng SFIS1.C_MODEL_DESC_T
                string productLineQuery = $@"
                    SELECT MODEL_NAME, PRODUCT_LINE
                    FROM SFIS1.C_MODEL_DESC_T
                    WHERE MODEL_NAME IN ({string.Join(",", modelNames.Select(mn => $"'{mn}'"))})";

                var productLineResults = await _oracleContext.OracleDataCModelDesc
                    .FromSqlRaw(productLineQuery)
                    .AsNoTracking()
                    .Select(pl => new
                    {
                        MODEL_NAME = pl.MODEL_NAME,
                        PRODUCT_LINE = pl.PRODUCT_LINE ?? ""
                    })
                    .ToListAsync();

                // 4. Kết hợp ProductLine với dữ liệu OracleTasks
                var oracleWithProductLine = oracleTasks.Select(task => new
                { 
                    task.SERIAL_NUMBER,
                    task.MODEL_NAME,
                    task.TEST_GROUP,
                    task.TEST_CODE,
                    task.DATA1,
                    task.DATA11,
                    task.DATA12,
                    task.DATE3,
                    task.TESTER,
                    DATA13 = task.DATA13,
                    DATA18 = task.DATA18,
                    task.DATA17,
                    task.WIP_GROUP,
                    ProductLine = productLineResults.FirstOrDefault(pl => pl.MODEL_NAME == task.MODEL_NAME)?.PRODUCT_LINE ?? "Không tìm thấy"
                });

                // 5. Truy vấn dữ liệu từ bảng Products (SQL Server)
                var products = await _sqlContext.Products
                    .AsNoTracking()
                    .Include(p => p.Shelf)
                    .Where(product => oracleWithProductLine.Select(t => t.SERIAL_NUMBER).Contains(product.SerialNumber))
                    .Select(product => new
                    {
                        product.SerialNumber,
                        ShelfCode = product.Shelf != null ? product.Shelf.ShelfCode : null,
                        product.ColumnNumber,
                        product.LevelNumber,
                        product.TrayNumber,
                        product.PositionInTray,
                        product.BorrowStatus
                    })
                    .ToListAsync();

                // 6. Kết hợp dữ liệu Oracle và SQL Server
                var combinedResults = oracleWithProductLine
                    .GroupJoin(
                        products,
                        oracle => oracle.SERIAL_NUMBER,
                        product => product.SerialNumber,
                        (oracle, productGroup) => new
                        {
                            OracleTask = oracle,
                            ProductData = productGroup.FirstOrDefault()
                        }
                    )
                    .Select(result => new
                    {
                        result.OracleTask.SERIAL_NUMBER,
                        result.OracleTask.MODEL_NAME,
                        result.OracleTask.TEST_GROUP,
                        result.OracleTask.TEST_CODE,
                        result.OracleTask.DATA1,
                        result.OracleTask.DATA11,
                        result.OracleTask.DATA12,
                        result.OracleTask.DATE3,
                        result.OracleTask.TESTER,
                        result.OracleTask.DATA13,
                        result.OracleTask.DATA18,
                        result.OracleTask.DATA17,
                        result.OracleTask.ProductLine, // Thêm ProductLine
                        result.OracleTask.WIP_GROUP,
                        ShelfCode = result.ProductData?.ShelfCode??"",
                        ColumnNumber = result.ProductData?.ColumnNumber,
                        LevelNumber = result.ProductData?.LevelNumber,
                        TrayNumber = result.ProductData?.TrayNumber,
                        PositionInTray = result.ProductData?.PositionInTray,
                        BorrowStatus = result.ProductData?.BorrowStatus
                    })
                    .ToList();

                // 7. Trả kết quả
                return Ok(new
                {
                    success = true,
                    totalResults = combinedResults.Count,
                    data = combinedResults
                });
            }
            catch (Exception ex)
            {
                // Log chi tiết lỗi
                Console.WriteLine($"Error Message: {ex.Message}");
                Console.WriteLine($"Stack Trace: {ex.StackTrace}");
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        [HttpPost("get-status-counts")]
        public async Task<IActionResult> GetStatusCounts([FromBody] string type)
        {
            try
            {
                IQueryable<dynamic> query;

                switch (type?.ToUpper())
                {
                    case "ALL":
                        query = _oracleContext.OracleDataRepairTask
                            .Where(task => task.DATA11 != null)
                            .Join(
                                _oracleContext.OracleDataCModelDesc,
                                task => task.MODEL_NAME,
                                modelDesc => modelDesc.MODEL_NAME,
                                (task, modelDesc) => new { task, modelDesc }
                            )
                            .Where(joined => joined.modelDesc.MODEL_SERIAL != "SWITCH")
                            .GroupBy(joined => joined.task.DATA11)
                            .Select(group => new
                            {
                                Status = group.Key,
                                Count = group.Count()
                            })
                            .OrderByDescending(x => x.Count); // ✅ Sắp xếp giảm dần
                        break;

                    case "HANDOVER":
                        query = _oracleContext.OracleDataRepairTask
                            .Where(task => task.DATA13 != null)
                            .Join(
                                _oracleContext.OracleDataCModelDesc,
                                task => task.MODEL_NAME,
                                modelDesc => modelDesc.MODEL_NAME,
                                (task, modelDesc) => new { task, modelDesc }
                            )
                            .Where(joined => joined.modelDesc.MODEL_SERIAL != "SWITCH")
                            .GroupBy(joined => joined.task.DATA11)
                            .Select(group => new
                            {
                                Status = group.Key,
                                Count = group.Count()
                            })
                            .OrderByDescending(x => x.Count); // ✅ Sắp xếp giảm dần
                        break;

                    case "ONLINE":
                        query = _oracleContext.OracleDataRepairTask
                            .Where(task => task.DATA18 != null && task.DATA18 != "TRONG_KHO" && task.DATA13 != "WAITING_HAND_OVER")
                            .Join(
                                _oracleContext.OracleDataCModelDesc,
                                task => task.MODEL_NAME,
                                modelDesc => modelDesc.MODEL_NAME,
                                (task, modelDesc) => new { task, modelDesc }
                            )
                            .Where(joined => joined.modelDesc.MODEL_SERIAL != "SWITCH")
                            .GroupBy(joined => joined.task.DATA11)
                            .Select(group => new
                            {
                                Status = group.Key,
                                Count = group.Count()
                            })
                            .OrderByDescending(x => x.Count); // ✅ Sắp xếp giảm dần
                        break;

                    default:
                        return BadRequest(new
                        {
                            success = false,
                            message = "Type không hợp lệ. Vui lòng sử dụng: 'ALL', 'HANDOVER', hoặc 'ONLINE'."
                        });
                }

                // Thực thi truy vấn và trả về kết quả
                var statusCounts = await query.ToListAsync();

                // ✅ Tính tổng số lượng nếu "ALL"
                int totalCount = (type.ToUpper() == "ALL") ? statusCounts.Sum(x => x.Count) : 0;

                return Ok(new
                {
                    success = true,
                    data = statusCounts,
                    totalCount = totalCount
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }


        // API lấy dữ liệu xóa R_ theo owner

        [HttpPost("get-repair-owner-data")]
        public async Task<IActionResult> GetRepairOwnerData([FromBody] DateRangeRequest request)
        {
            try
            {
                // Kiểm tra đầu vào
                if (request == null || request.StartDate == null || request.EndDate == null)
                {
                    return BadRequest(new
                    {
                        success = false,
                        message = "Thông tin đầu vào không hợp lệ. Vui lòng cung cấp StartDate và EndDate."
                    });
                }

                // Thực hiện truy vấn dữ liệu từ Entity Framework
                var repairOwnerData = await (
                    from detail in _oracleContext.OracleDataRepairTaskDetail
                    join repair in _oracleContext.OracleDataR109
                    on detail.TESTER equals repair.REPAIRER
                    where
                        detail.DATE3 >= request.StartDate &&
                        detail.DATE3 <= request.EndDate &&
                        repair.REPAIR_TIME >= request.StartDate &&
                        repair.REPAIR_TIME <= request.EndDate &&
                        EF.Functions.Like(detail.DATA17.ToUpper(), "%NHAN%")
                    select new
                    {
                        OWNER = detail.TESTER,
                        repair.SERIAL_NUMBER,
                        repair.MODEL_NAME,
                        repair.TEST_GROUP,
                        repair.TEST_CODE,
                        repair.DATA1,
                        REPAIRER = repair.REPAIRER,
                        REPAIR_TIME = repair.REPAIR_TIME,
                        repair.REASON_CODE,
                        repair.ERROR_ITEM_CODE
                    }
                ).Distinct().ToListAsync();

                return Ok(new
                {
                    success = true,
                    data = repairOwnerData
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }

        public class DateRangeRequest
        {
            public DateTime StartDate { get; set; }
            public DateTime EndDate { get; set; }
        }

        // API lấy dữ liệu confirm và save theo theo thời gian.
        [HttpPost("get-confirm-save-data")]
        public async Task<IActionResult> GetConfirmSaveData([FromBody] DateRangeRequest request)
        {
            try
            {
                if (request.StartDate == null || request.EndDate == null)
                {
                    return BadRequest(new
                    {
                        success = false,
                        message = "Ngày bắt đầu và ngày kết thúc không được để trống."
                    });
                }

                var result = await _oracleContext.OracleDataRepairTaskDetail
                    .Where(task =>
                        (EF.Functions.Like(task.DATA17.ToUpper(), "%CONFIRM%") || EF.Functions.Like(task.DATA17.ToUpper(), "%SAVE%")) &&
                        task.DATE3 >= request.StartDate && task.DATE3 <= request.EndDate && task.TESTER != null)
                    .Select(task => new
                    {
                        OWNER = task.TESTER,
                        task.SERIAL_NUMBER,
                        task.MODEL_NAME,
                        task.TEST_GROUP,
                        task.TEST_CODE,
                        task.DATA1,
                        TYPE = task.DATA17,
                        TIME_SAVE = task.DATE3,
                        CURRENT_STATUS = task.DATA12,
                        NEXT_STATUS = task.DATA11,
                        REMARK = task.DATA19
                    })
                    .OrderBy(task => task.OWNER) // Sắp xếp theo OWNER
                    .ToListAsync();
                return Ok(new
                {
                    success = true,
                    data = result
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }
        // API bảng tổng hợp summary owner theo thời gian
        [HttpPost("get-summary-owner")]
        public async Task<IActionResult> GetSummaryOwner([FromBody] TimeRequest timeRange)
        {
            try
            {
                using (var connection = new OracleConnection("User Id=TE;Password=B05te;Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=10.220.130.220)(PORT=1521)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=vnsfc)));"))
                {
                    await connection.OpenAsync();

                    string query = @"
                SELECT 
                    COALESCE(B1.owner, COALESCE(B2.owner, COALESCE(B3.owner, B4.owner))) AS owner,
                    B1.NHAN,
                    B2.CONFIRM,
                    B3.SAVE,
                    B4.REPAIR
                FROM (
                    SELECT COUNT(serial_number) AS NHAN, tester AS owner
                    FROM SFISM4.R_REPAIR_TASK_DETAIL_T  
                    WHERE UPPER(data17) LIKE '%NHAN%'  
                      AND date3 BETWEEN TO_DATE(:StartDate, 'YYYY-MM-DD HH24:MI:SS') 
                                   AND TO_DATE(:EndDate, 'YYYY-MM-DD HH24:MI:SS')
                    GROUP BY tester
                ) B1
                LEFT JOIN (
                    SELECT COUNT(a2.serial_number) AS CONFIRM, a2.tester AS owner
                    FROM (
                        SELECT aa.* 
                        FROM (
                            SELECT * 
                            FROM SFISM4.R_REPAIR_TASK_DETAIL_T  
                            WHERE UPPER(data17) LIKE '%CONFIRM%'  
                              AND date3 BETWEEN TO_DATE(:StartDate, 'YYYY-MM-DD HH24:MI:SS') 
                                          AND TO_DATE(:EndDate, 'YYYY-MM-DD HH24:MI:SS')
                            UNION ALL
                            SELECT * 
                            FROM SFISM4.R_REPAIR_TASK_DETAIL_T  
                            WHERE UPPER(data17) LIKE '%SAVE%'  
                              AND date3 BETWEEN TO_DATE(:StartDate, 'YYYY-MM-DD HH24:MI:SS') 
                                          AND TO_DATE(:EndDate, 'YYYY-MM-DD HH24:MI:SS') 
                              AND SERIAL_NUMBER NOT IN (
                                  SELECT SERIAL_NUMBER 
                                  FROM SFISM4.R_REPAIR_TASK_DETAIL_T  
                                  WHERE UPPER(data17) LIKE '%CONFIRM%'
                              )
                        ) aa 
                        WHERE (aa.serial_number, tester) NOT IN (
                            SELECT serial_number, repairer  
                            FROM sfism4.R109 
                            WHERE repair_time BETWEEN TO_DATE(:StartDate, 'YYYY-MM-DD HH24:MI:SS') 
                                                 AND TO_DATE(:EndDate, 'YYYY-MM-DD HH24:MI:SS')
                        )
                    ) a2 
                    WHERE UPPER(data17) LIKE '%CONFIRM%'    
                    GROUP BY tester
                ) B2 ON B1.owner = B2.owner
                LEFT JOIN (
                    SELECT COUNT(a3.serial_number) AS SAVE, a3.tester AS owner
                    FROM (
                        SELECT aa.* 
                        FROM (
                            SELECT * 
                            FROM SFISM4.R_REPAIR_TASK_DETAIL_T  
                            WHERE UPPER(data17) LIKE '%CONFIRM%'  
                            UNION ALL
                            SELECT * 
                            FROM SFISM4.R_REPAIR_TASK_DETAIL_T  
                            WHERE UPPER(data17) LIKE '%SAVE%'  
                              AND SERIAL_NUMBER NOT IN (
                                  SELECT SERIAL_NUMBER 
                                  FROM SFISM4.R_REPAIR_TASK_DETAIL_T  
                                  WHERE UPPER(data17) LIKE '%CONFIRM%'
                              )
                        ) aa 
                        WHERE (aa.serial_number, tester) NOT IN (
                            SELECT serial_number, repairer  
                            FROM sfism4.R109 
                            WHERE repair_time BETWEEN TO_DATE(:StartDate, 'YYYY-MM-DD HH24:MI:SS') 
                                                 AND TO_DATE(:EndDate, 'YYYY-MM-DD HH24:MI:SS')
                        )
                    ) a3 
                    WHERE UPPER(data17) LIKE '%SAVE%'    
                    GROUP BY tester
                ) B3 ON B1.owner = B3.owner
                LEFT JOIN (
                    SELECT COUNT(serial_number) AS REPAIR, repairer AS owner
                    FROM sfism4.R109
                    WHERE repair_time BETWEEN TO_DATE(:StartDate, 'YYYY-MM-DD HH24:MI:SS') 
                                                AND TO_DATE(:EndDate, 'YYYY-MM-DD HH24:MI:SS')  
                    GROUP BY repairer
                ) B4 ON B1.owner = B4.owner
                ORDER BY owner";

                    using (var command = new OracleCommand(query, connection))
                    {
                        command.Parameters.Add(new OracleParameter("StartDate", timeRange.StartDate.ToString("yyyy-MM-dd HH:mm:ss")));
                        command.Parameters.Add(new OracleParameter("EndDate", timeRange.EndDate.ToString("yyyy-MM-dd HH:mm:ss")));

                        var data = new List<dynamic>();
                        int totalNHAN = 0, totalCONFIRM = 0, totalSAVE = 0, totalREPAIR = 0;

                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                int nhan = reader["NHAN"] == DBNull.Value ? 0 : Convert.ToInt32(reader["NHAN"]);
                                int confirm = reader["CONFIRM"] == DBNull.Value ? 0 : Convert.ToInt32(reader["CONFIRM"]);
                                int save = reader["SAVE"] == DBNull.Value ? 0 : Convert.ToInt32(reader["SAVE"]);
                                int repair = reader["REPAIR"] == DBNull.Value ? 0 : Convert.ToInt32(reader["REPAIR"]);

                                data.Add(new
                                {
                                    Owner = reader["owner"]?.ToString(),
                                    NHAN = nhan,
                                    CONFIRM = confirm,
                                    SAVE = save,
                                    REPAIR = repair
                                });

                                // Cộng dồn để tính tổng
                                totalNHAN += nhan;
                                totalCONFIRM += confirm;
                                totalSAVE += save;
                                totalREPAIR += repair;
                            }
                        }

                        return Ok(new
                        {
                            success = true,
                            data,
                            totals = new
                            {
                                Total_NHAN = totalNHAN,
                                Total_CONFIRM = totalCONFIRM,
                                Total_SAVE = totalSAVE,
                                Total_REPAIR = totalREPAIR
                            }
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }

        public class TimeRequest
        {
            public DateTime StartDate { get; set; }
            public DateTime EndDate { get; set; }
        }

        // API lấy quyền truy cập của các mã thẻ

        public class CardCodeRequest
        {
            public string CardCode { get; set; } = string.Empty;
        }

        [HttpPost("get-allowed-areas")]
        public IActionResult GetAllowedAreas([FromBody] CardCodeRequest request)
        {
            if (string.IsNullOrEmpty(request.CardCode))
            {
                return BadRequest(new { success = false, message = "Mã thẻ không được để trống." });
            }

            try
            {
                // Tìm người dùng theo mã thẻ (Username)
                var user = _sqlContext.Users.FirstOrDefault(u => u.Username == request.CardCode);

                if (user == null)
                {
                    return NotFound(new { success = false, message = "Không tìm thấy người dùng với mã thẻ này." });
                }

                return Ok(new { success = true, allowedAreas = user.AllowedAreas });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        [HttpPost("get-latest-tester")]
        public async Task<IActionResult> GetLatestTester([FromBody] List<string> serialNumbers)
        {
            if (serialNumbers == null || !serialNumbers.Any())
                return BadRequest(new { message = "Serial numbers list cannot be empty." });

            try
            {
                var serialNumbersList = string.Join(",", serialNumbers.Select(sn => $"'{sn}'"));

                // SQL Query chỉ lấy SERIAL_NUMBER và TESTER
                string query = $@"
                    SELECT *
                        FROM (
                            SELECT
                                DETAIL_T.SERIAL_NUMBER,
                                DETAIL_T.TESTER,
                                DETAIL_T.DATE3,
                                DETAIL_T.DATA17
                            FROM SFISM4.R_REPAIR_TASK_DETAIL_T DETAIL_T
                            WHERE DETAIL_T.SERIAL_NUMBER IN ({serialNumbersList}) 
                            AND DETAIL_T.DATA17 = 'confirm'
                            ORDER BY DETAIL_T.DATE3 DESC
                        )
                        WHERE ROWNUM = 1
                        ";

                // Kết nối cơ sở dữ liệu Oracle và thực hiện truy vấn
                using (var command = _oracleContext.Database.GetDbConnection().CreateCommand())
                {
                    command.CommandText = query;
                    command.CommandType = System.Data.CommandType.Text;

                    _oracleContext.Database.OpenConnection(); // Mở kết nối

                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var results = new List<SerialNumberTesterDto>();
                        while (await reader.ReadAsync())
                        {
                            results.Add(new SerialNumberTesterDto
                            {
                                SERIAL_NUMBER = reader["SERIAL_NUMBER"].ToString(),
                                TESTER = reader["TESTER"].ToString()
                            });
                        }

                        if (!results.Any())
                            return NotFound(new { message = "No records found for the given Serial Numbers!" });

                        return Ok(results);
                    }
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = "An error occurred while processing the request.", error = ex.Message });
            }
        }

        // DTO chỉ chứa SERIAL_NUMBER và TESTER
        public class SerialNumberTesterDto
        {
            public string SERIAL_NUMBER { get; set; }
            public string TESTER { get; set; }
        }


        //API get-retest-summary
        [HttpPost("get-retest-summary")]
        public async Task<IActionResult> GetRetestSummary([FromBody] DateRangeRequest request)
        {
            try
            {
                using (var connection = new OracleConnection(_oracleContext.Database.GetDbConnection().ConnectionString))
                {
                    await connection.OpenAsync();

                    string query = @"
                SELECT 
                    tester AS ID,
                    COUNT(CASE WHEN test_result = 'PASS' THEN 1 END) AS QTY_OK,
                    COUNT(CASE WHEN test_result = 'FAIL' THEN 1 END) AS QTY_NG,
                    COUNT(CASE WHEN test_result = 'not data' THEN 1 END) AS NOT_DEFINE,
                    COUNT(*) AS TOTAL
                FROM (
                    SELECT 
                        tester,
                        NVL(REGEXP_SUBSTR(data19, 'KQ:([^/]+)', 1, 1, NULL, 1), 'not data') AS test_result
                    FROM sfism4.r_repair_task_detail_t 
                    WHERE data12 = 'RETEST'
                    AND data17 = 'confirm'
                    AND (data19 IS NULL OR data19 != 'CONFIRM_PUT_B36R') 
                    AND date3 BETWEEN TO_DATE(:StartDate, 'YYYY-MM-DD HH24:MI:SS') 
                                  AND TO_DATE(:EndDate, 'YYYY-MM-DD HH24:MI:SS')
                ) sub
                GROUP BY tester
                ORDER BY TOTAL DESC";

                    using (var command = new OracleCommand(query, connection))
                    {
                        command.Parameters.Add(new OracleParameter("StartDate", request.StartDate.ToString("yyyy-MM-dd HH:mm:ss")));
                        command.Parameters.Add(new OracleParameter("EndDate", request.EndDate.ToString("yyyy-MM-dd HH:mm:ss")));

                        var data = new List<dynamic>();

                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                data.Add(new
                                {
                                    ID = reader["ID"].ToString(),
                                    QTY_OK = Convert.ToInt32(reader["QTY_OK"]),
                                    QTY_NG = Convert.ToInt32(reader["QTY_NG"]),
                                    NOT_DEFINE = Convert.ToInt32(reader["NOT_DEFINE"]),
                                    TOTAL = Convert.ToInt32(reader["TOTAL"])
                                });
                            }
                        }

                        return Ok(new
                        {
                            success = true,
                            data
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }

        //API get-retest-detail-normal
        [HttpPost("get-retest-details-normal")]
        public async Task<IActionResult> GetRetestDetails([FromBody] DateRangeRequest request)
        {
            try
            {
                using (var connection = new OracleConnection(_oracleContext.Database.GetDbConnection().ConnectionString))
                {
                    await connection.OpenAsync();

                    string query = @"
                SELECT 
                    date3,
                    tester,
                    serial_number,
                    model_name,
                    test_group,
                    data1,
                    NVL(REGEXP_SUBSTR(data19, 'KQ:([^/]+)', 1, 1, NULL, 1), 'not data') AS test_result,
                    NVL(REGEXP_SUBSTR(data19, 'remark:([^/]+)', 1, 1, NULL, 1), 'not data') AS remark
                FROM sfism4.r_repair_task_detail_t 
                WHERE data12 = 'RETEST'
                AND data17 = 'confirm'
                AND (data19 IS NULL OR data19 != 'CONFIRM_PUT_B36R')
                AND data1 NOT LIKE '%mcu_test_group%' 
                AND data1 NOT LIKE '%DPU_MEM_TEST%' 
                AND date3 BETWEEN TO_DATE(:StartDate, 'YYYY-MM-DD HH24:MI:SS') 
                              AND TO_DATE(:EndDate, 'YYYY-MM-DD HH24:MI:SS')
                ORDER BY tester DESC";

                    using (var command = new OracleCommand(query, connection))
                    {
                        command.Parameters.Add(new OracleParameter("StartDate", request.StartDate.ToString("yyyy-MM-dd HH:mm:ss")));
                        command.Parameters.Add(new OracleParameter("EndDate", request.EndDate.ToString("yyyy-MM-dd HH:mm:ss")));

                        var data = new List<dynamic>();

                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                data.Add(new
                                {
                                    Date = reader["date3"] != DBNull.Value ? Convert.ToDateTime(reader["date3"]) : (DateTime?)null,
                                    Tester = reader["tester"].ToString(),
                                    SerialNumber = reader["serial_number"].ToString(),
                                    ModelName = reader["model_name"].ToString(),
                                    TestGroup = reader["test_group"].ToString(),
                                    Data1 = reader["data1"].ToString(),
                                    TestResult = reader["test_result"].ToString(),
                                    Remark = reader["remark"].ToString()
                                });
                            }
                        }

                        return Ok(new
                        {
                            success = true,
                            data
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }

        //API get-retest-detail-MCU
        [HttpPost("get-retest-mcu-test-group")]
        public async Task<IActionResult> GetRetestMCUTestGroup([FromBody] DateRangeRequest request)
        {
            try
            {
                using (var connection = new OracleConnection(_oracleContext.Database.GetDbConnection().ConnectionString))
                {
                    await connection.OpenAsync();

                    string query = @"
                SELECT 
                    date3,
                    tester,
                    serial_number,
                    model_name,
                    test_group,
                    data1,
                    NVL(REGEXP_SUBSTR(data19, 'KQ:([^/]+)', 1, 1, NULL, 1), 'not data') AS test_result,
                    NVL(REGEXP_SUBSTR(data19, 'remark:([^/]+)', 1, 1, NULL, 1), 'not data') AS remark
                FROM sfism4.r_repair_task_detail_t 
                WHERE data12 = 'RETEST'
                AND data17 = 'confirm'
                AND (data19 IS NULL OR data19 != 'CONFIRM_PUT_B36R')
                AND data1 LIKE '%mcu_test_group%' 
                AND date3 BETWEEN TO_DATE(:StartDate, 'YYYY-MM-DD HH24:MI:SS') 
                              AND TO_DATE(:EndDate, 'YYYY-MM-DD HH24:MI:SS')
                ORDER BY tester DESC";

                    using (var command = new OracleCommand(query, connection))
                    {
                        command.Parameters.Add(new OracleParameter("StartDate", request.StartDate.ToString("yyyy-MM-dd HH:mm:ss")));
                        command.Parameters.Add(new OracleParameter("EndDate", request.EndDate.ToString("yyyy-MM-dd HH:mm:ss")));

                        var data = new List<dynamic>();

                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                data.Add(new
                                {
                                    Date = reader["date3"] != DBNull.Value ? Convert.ToDateTime(reader["date3"]) : (DateTime?)null,
                                    Tester = reader["tester"].ToString(),
                                    SerialNumber = reader["serial_number"].ToString(),
                                    ModelName = reader["model_name"].ToString(),
                                    TestGroup = reader["test_group"].ToString(),
                                    Data1 = reader["data1"].ToString(),
                                    TestResult = reader["test_result"].ToString(),
                                    Remark = reader["remark"].ToString()
                                });
                            }
                        }

                        return Ok(new
                        {
                            success = true,
                            data
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }

        //API get-retest-dpu-mem-test
        [HttpPost("get-retest-dpu-mem-test")]
        public async Task<IActionResult> GetRetestDPUMemTest([FromBody] DateRangeRequest request)
        {
            try
            {
                using (var connection = new OracleConnection(_oracleContext.Database.GetDbConnection().ConnectionString))
                {
                    await connection.OpenAsync();

                    string query = @"
                SELECT 
                    date3,
                    tester,
                    serial_number,
                    model_name,
                    test_group,
                    data1,
                    NVL(REGEXP_SUBSTR(data19, 'KQ:([^/]+)', 1, 1, NULL, 1), 'not data') AS test_result,
                    NVL(REGEXP_SUBSTR(data19, 'remark:([^/]+)', 1, 1, NULL, 1), 'not data') AS remark
                FROM sfism4.r_repair_task_detail_t 
                WHERE data12 = 'RETEST'
                AND data17 = 'confirm'
                AND (data19 IS NULL OR data19 != 'CONFIRM_PUT_B36R')
                AND data1 LIKE '%DPU_MEM_TEST%' 
                AND date3 BETWEEN TO_DATE(:StartDate, 'YYYY-MM-DD HH24:MI:SS') 
                              AND TO_DATE(:EndDate, 'YYYY-MM-DD HH24:MI:SS')
                ORDER BY tester DESC";

                    using (var command = new OracleCommand(query, connection))
                    {
                        command.Parameters.Add(new OracleParameter("StartDate", request.StartDate.ToString("yyyy-MM-dd HH:mm:ss")));
                        command.Parameters.Add(new OracleParameter("EndDate", request.EndDate.ToString("yyyy-MM-dd HH:mm:ss")));

                        var data = new List<dynamic>();

                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                data.Add(new
                                {
                                    Date = reader["date3"] != DBNull.Value ? Convert.ToDateTime(reader["date3"]) : (DateTime?)null,
                                    Tester = reader["tester"].ToString(),
                                    SerialNumber = reader["serial_number"].ToString(),
                                    ModelName = reader["model_name"].ToString(),
                                    TestGroup = reader["test_group"].ToString(),
                                    Data1 = reader["data1"].ToString(),
                                    TestResult = reader["test_result"].ToString(),
                                    Remark = reader["remark"].ToString()
                                });
                            }
                        }

                        return Ok(new
                        {
                            success = true,
                            data
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }

    }
}








