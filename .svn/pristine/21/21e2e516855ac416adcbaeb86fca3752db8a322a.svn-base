using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Oracle.ManagedDataAccess.Client;
using Microsoft.EntityFrameworkCore;
using API_WEB.ModelsOracle;
using API_WEB.ModelsDB;

namespace API_WEB.Controllers.SmartFA
{
    [ApiController]
    [Route("api/[controller]")]
    public class CheckInOutController : ControllerBase
    {
        private readonly OracleDbContext _oracleContext;
        private readonly CSDL_NE _sqlContext;
        public CheckInOutController(OracleDbContext oracleContext, CSDL_NE sqlContext)
        {
            _oracleContext = oracleContext;
            _sqlContext = sqlContext;
        }

        // Use a distinct request model name to avoid Swagger schema clashes
        public class CheckInOutRequest
        {
            public DateTime StartDate { get; set; }
            public DateTime EndDate { get; set; }
        }

        public class CheckInRecord
        {
            public string SERIAL_NUMBER { get; set; } = string.Empty;
            public string SFG { get; set; } = string.Empty;
            public string FG { get; set; } = string.Empty;
            public string MO_NUMBER { get; set; } = string.Empty;
            public string PRODUCT_LINE { get; set; } = string.Empty;
            public string MODEL_NAME { get; set; } = string.Empty;
            public string P_SENDER { get; set; } = string.Empty;
            public string STATION_NAME { get; set; } = string.Empty;
            public string ERROR_CODE { get; set; } = string.Empty;
            public string REPAIRER { get; set; } = string.Empty;
            public DateTime? IN_DATETIME { get; set; }
            public DateTime? OUT_DATETIME { get; set; }
            public string ERROR_DESC { get; set; } = string.Empty;
            public string ERROR_FLAG { get; set; } = string.Empty;
            public string WIP_GROUP { get; set; } = string.Empty;
            public string WORK_FLAG { get; set; } = string.Empty;
            public string TYPE { get; set; } = string.Empty;
            public string AGING_HOURS { get; set; } = string.Empty;
        }

        public class CheckOutRecord
        {
            public string SERIAL_NUMBER { get; set; } = string.Empty;
            public string MODEL_NAME { get; set; } = string.Empty;
            public string PRODUCT_LINE { get; set; } = string.Empty;
            public string P_SENDER { get; set; } = string.Empty;
            public string REPAIRER { get; set; } = string.Empty;
            public string STATION_NAME { get; set; } = string.Empty;
            public DateTime? IN_DATETIME { get; set; }
            public DateTime? OUT_DATETIME { get; set; }
            public string ERROR_CODE { get; set; } = string.Empty;
            public string ERROR_DESC { get; set; } = string.Empty;
            public string CHECKIN_STATUS { get; set; } = string.Empty;
            public string ERROR_FLAG { get; set; } = string.Empty;
            public string WIP_GROUP { get; set; } = string.Empty;
            public string WORK_FLAG { get; set; } = string.Empty;
            public string MO_NUMBER { get; set; } = string.Empty;
        }

        [HttpGet("GetCheckInOutBeforeKanban")]
        public async Task<IActionResult> GetCheckInOutBeforeKanban(DateTime? startDate, DateTime? endDate)
        {
            await using var connection = new OracleConnection(_oracleContext.Database.GetDbConnection().ConnectionString);
            try
            {
                await connection.OpenAsync();

                var defaultEnd = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 7, 30, 0);
                var end = endDate ?? defaultEnd;
                var start = startDate ?? end.AddDays(-1);

                var checkInQuery = @"SELECT a.SERIAL_NUMBER,
                                            a.MO_NUMBER,
                                            a.MODEL_NAME,
                                            b.PRODUCT_LINE,
                                            r107.MO_NUMBER,
                                            r107.WIP_GROUP,
                                            r107.ERROR_FLAG,
                                            r107.WORK_FLAG,
                                            r107.WIP_GROUP,
                                            a.STATION_NAME,
                                            a.P_SENDER,
                                            b.PRODUCT_LINE,
                                            a.REMARK AS ERROR_CODE,
                                            a.IN_DATETIME,
                                            c.ERROR_DESC
                                       FROM SFISM4.R_REPAIR_IN_OUT_T a
                                       INNER JOIN SFIS1.C_MODEL_DESC_T b ON a.MODEL_NAME = b.MODEL_NAME
                                       INNER JOIN SFISM4.R107 r107 ON a.serial_number = r107.serial_number
                                       INNER JOIN SFIS1.C_ERROR_CODE_T c ON a.REMARK = c.ERROR_CODE
                                       WHERE b.MODEL_SERIAL = 'ADAPTER'
                                         AND a.P_SENDER IN ('V0904136','V3209541', 'V0945375', 'V0928908', 'V3245384', 'V3211693')
                                         AND a.IN_DATETIME BETWEEN :startDate AND :endDate
                                         AND NOT REGEXP_LIKE(a.MODEL_NAME, '^(900|692|930)')
                                         AND a.REMARK NOT IN ('CK00')
                                         AND NOT EXISTS (
                                              SELECT 1
                                              FROM sfism4.z_kanban_tracking_t z
                                              WHERE z.serial_number = a.serial_number)";

                var checkInList = new List<CheckInRecord>();
                await using (var cmd = new OracleCommand(checkInQuery, connection))
                {
                    cmd.BindByName = true;
                    cmd.Parameters.Add(new OracleParameter(":startDate", OracleDbType.Date) { Value = start });
                    cmd.Parameters.Add(new OracleParameter(":endDate", OracleDbType.Date) { Value = end });
                    await using var reader = await cmd.ExecuteReaderAsync();
                    while (await reader.ReadAsync())
                    {
                        checkInList.Add(new CheckInRecord
                        {
                            SERIAL_NUMBER = reader["SERIAL_NUMBER"].ToString() ?? string.Empty,
                            MO_NUMBER = reader["MO_NUMBER"].ToString() ?? string.Empty,
                            MODEL_NAME = reader["MODEL_NAME"].ToString() ?? string.Empty,
                            WIP_GROUP = reader["WIP_GROUP"].ToString() ?? string.Empty,
                            WORK_FLAG = reader["WORK_FLAG"].ToString() ?? string.Empty,
                            ERROR_FLAG = reader["ERROR_FLAG"].ToString() ?? string.Empty,
                            PRODUCT_LINE = reader["PRODUCT_LINE"].ToString() ?? string.Empty,
                            STATION_NAME = reader["STATION_NAME"].ToString() ?? string.Empty,
                            P_SENDER = reader["P_SENDER"].ToString() ?? string.Empty,
                            ERROR_CODE = reader["ERROR_CODE"].ToString() ?? string.Empty,
                            IN_DATETIME = reader["IN_DATETIME"] as DateTime?,
                            ERROR_DESC = reader["ERROR_DESC"].ToString() ?? string.Empty
                        });
                    }
                }

                var checkOutQuery = @"SELECT a.SERIAL_NUMBER,
                                             a.MODEL_NAME,
                                             b.PRODUCT_LINE,
                                             a.P_SENDER,
                                             a.REPAIRER,
                                             a.IN_DATETIME,
                                             a.OUT_DATETIME,
                                             a.STATION_NAME,
                                             r107.MO_NUMBER,
                                             r107.WIP_GROUP,
                                             r107.ERROR_FLAG,
                                             r107.WORK_FLAG,
                                             r107.WIP_GROUP,
                                             b.PRODUCT_LINE,
                                             a.REMARK AS ERROR_CODE,
                                             c.ERROR_DESC,
                                             CASE WHEN TRUNC(a.IN_DATETIME) = TRUNC(a.OUT_DATETIME) THEN 'CHECKIN_TRONG_NGAY' ELSE 'CHECKIN_TRUOC_DO' END AS CHECKIN_STATUS
                                        FROM sfism4.r_repair_in_out_t a
                                        INNER JOIN sfis1.c_model_desc_t b ON a.model_name = b.model_name
                                        INNER JOIN sfis1.c_error_code_t c ON a.REMARK = c.ERROR_CODE
                                        INNER JOIN SFISM4.R107 r107 ON a.serial_number = r107.serial_number
                                        WHERE b.MODEL_SERIAL = 'ADAPTER'
                                          AND a.P_SENDER IN ('V0904136', 'V0945375','V3209541', 'V0928908', 'V3245384', 'V3211693')
                                          AND a.REPAIRER IS NOT NULL
                                          AND r107.ERROR_FLAG  != '8'
                                          AND a.REMARK NOT IN ('CK00')
                                          AND a.OUT_DATETIME BETWEEN :startDate AND :endDate
                                          AND NOT REGEXP_LIKE(a.MODEL_NAME, '^(900|692|930)')
                                          AND NOT EXISTS (
                                              SELECT 1
                                              FROM sfism4.z_kanban_tracking_t z
                                              WHERE z.serial_number = a.serial_number
                                          )";

                var checkOutList = new List<CheckOutRecord>();
                await using (var cmd = new OracleCommand(checkOutQuery, connection))
                {
                    cmd.BindByName = true;
                    cmd.Parameters.Add(new OracleParameter(":startDate", OracleDbType.Date) { Value = start });
                    cmd.Parameters.Add(new OracleParameter(":endDate", OracleDbType.Date) { Value = end });
                    await using var reader = await cmd.ExecuteReaderAsync();
                    while (await reader.ReadAsync())
                    {
                        checkOutList.Add(new CheckOutRecord
                        {
                            SERIAL_NUMBER = reader["SERIAL_NUMBER"].ToString() ?? string.Empty,
                            MODEL_NAME = reader["MODEL_NAME"].ToString() ?? string.Empty,
                            WIP_GROUP = reader["WIP_GROUP"].ToString() ?? string.Empty,
                            MO_NUMBER = reader["MO_NUMBER"].ToString() ?? string.Empty,
                            WORK_FLAG = reader["WORK_FLAG"].ToString() ?? string.Empty,
                            ERROR_FLAG = reader["ERROR_FLAG"].ToString() ?? string.Empty,
                            PRODUCT_LINE = reader["PRODUCT_LINE"].ToString() ?? string.Empty,
                            P_SENDER = reader["P_SENDER"].ToString() ?? string.Empty,
                            REPAIRER = reader["REPAIRER"].ToString() ?? string.Empty,
                            STATION_NAME = reader["STATION_NAME"].ToString() ?? string.Empty,
                            IN_DATETIME = reader["IN_DATETIME"] as DateTime?,
                            OUT_DATETIME = reader["OUT_DATETIME"] as DateTime?,
                            ERROR_CODE = reader["ERROR_CODE"].ToString() ?? string.Empty,
                            ERROR_DESC = reader["ERROR_DESC"].ToString() ?? string.Empty,
                            CHECKIN_STATUS = reader["CHECKIN_STATUS"].ToString() ?? string.Empty
                        });
                    }
                }

                var checkOutTrongNgay = checkOutList
                    .Where(c => c.CHECKIN_STATUS == "CHECKIN_TRONG_NGAY")
                    .ToList();
                var checkOutTonKhoCu = checkOutList
                    .Where(c => c.CHECKIN_STATUS == "CHECKIN_TRUOC_DO")
                    .ToList();

                var checkOutSerials = new HashSet<string>(checkOutList.Select(co => co.SERIAL_NUMBER));
                var tonKhoTrongNgay = checkInList
                    .Where(ci => !checkOutSerials.Contains(ci.SERIAL_NUMBER))
                    .ToList();

                var response = new
                {
                    checkIn = new { count = checkInList.Count, data = checkInList },
                    checkOut = new
                    {
                        count = checkOutList.Count,
                        trongNgay = new { count = checkOutTrongNgay.Count, data = checkOutTrongNgay },
                        tonKhoCu = new { count = checkOutTonKhoCu.Count, data = checkOutTonKhoCu }
                    },
                    tonKhoTrongNgay = new { count = tonKhoTrongNgay.Count, data = tonKhoTrongNgay }
                };

                return Ok(response);
            }
            catch (OracleException ex)
            {
                return StatusCode(500, $"Database error: {ex.Message}");
            }
            finally
            {
                if (connection.State == ConnectionState.Open)
                {
                    await connection.CloseAsync();
                }
            }
        }

        [HttpGet("GetCheckInAfterKanBan")]
        public async Task<IActionResult> getCheckInAfterKanBan(DateTime? startDate, DateTime? endDate)
        {
            await using var connection = new OracleConnection(_oracleContext.Database.GetDbConnection().ConnectionString);
            try
            {
                await connection.OpenAsync();
                var defaultEnd = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 7, 30, 0);
                var end = endDate ?? defaultEnd;
                var start = startDate ?? end.AddDays(-1);
                var checkInQuery = @"
                    SELECT 
                        CASE 
                        WHEN REGEXP_LIKE(a.MODEL_NAME, '^(900|692|930)') THEN COALESCE(kp.KEY_PART_SN, kr.KEY_PART_SN)
                            ELSE a.SERIAL_NUMBER
                            END AS SFG,
                        a.SERIAL_NUMBER AS FG,
                        a.MODEL_NAME,
                        d.PRODUCT_LINE,
                        a.MO_NUMBER,
                        a.P_SENDER,
                        a.REPAIRER,
                        a.STATION_NAME,
                        a.REMARK AS ERROR_CODE,
                        c.ERROR_DESC,
                        a.IN_DATETIME,
                        a.OUT_DATETIME,
                        r107.WIP_GROUP,
                        r107.ERROR_FLAG,
                        r107.WORK_FLAG
                    FROM sfism4.R_REPAIR_IN_OUT_T a
                    LEFT JOIN SFISM4.R107 r107
                    on r107.SERIAL_NUMBER = a.SERIAL_NUMBER
                    LEFT JOIN SFIS1.C_ERROR_CODE_T c 
                    on c.ERROR_CODE = a.REMARK
                    INNER JOIN SFIS1.C_MODEL_DESC_T d 
                    ON d.MODEL_NAME = a.MODEL_NAME
                    LEFT JOIN (
                        SELECT SERIAL_NUMBER, KEY_PART_SN
                        FROM (
                            SELECT kp.SERIAL_NUMBER, kp.KEY_PART_SN,
                                   ROW_NUMBER() OVER (PARTITION BY kp.SERIAL_NUMBER ORDER BY kp.WORK_TIME DESC) rn
                                   FROM sfism4.P_WIP_KEYPARTS_T kp where kp.GROUP_NAME = 'SFG_LINK_FG' 
                                   AND LENGTH(kp.SERIAL_NUMBER) in (12, 18, 21, 20) 
                                   AND LENGTH(kp.KEY_PART_SN) in(14, 13)
                        )
                        WHERE rn = 1
                    ) kp
                        ON a.SERIAL_NUMBER = kp.SERIAL_NUMBER
                    LEFT JOIN (
                        SELECT SERIAL_NUMBER, KEY_PART_SN
                        FROM (
                        SELECT kr.SERIAL_NUMBER, kr.KEY_PART_SN,
                            ROW_NUMBER() OVER (PARTITION BY kr.SERIAL_NUMBER ORDER BY kr.WORK_TIME DESC) rn
                            FROM sfism4.R_WIP_KEYPARTS_T kr where kr.GROUP_NAME = 'SFG_LINK_FG' 
                            AND LENGTH(kr.SERIAL_NUMBER) in (12, 18, 21, 20) 
                                   AND LENGTH(kr.KEY_PART_SN) in(14, 13)
                        )
                        WHERE rn = 1
                        ) kr
                        ON a.SERIAL_NUMBER = kr.SERIAL_NUMBER
                    WHERE 
                        (
                            (
                                REGEXP_LIKE(a.MODEL_NAME, '^(900|692|930)') 
                                AND a.P_SENDER IN ('V3209541', 'V0928908','V0945375', 'V3211693', 'V0904136')
                            ) 
                            OR 
                            (
                                a.MO_NUMBER LIKE '8%' 
                                AND a.STATION_NAME NOT LIKE '%REPAIR_B36R%'
                                AND a.P_SENDER IN ('V3209541', 'V0928908', 'V3211693', 'V0904136')
                            )
                        )
                      AND a.IN_DATETIME BETWEEN :startDate AND :endDate";
                var checkInList = new List<CheckInRecord>();
                await using (var cmd = new OracleCommand(checkInQuery, connection))
                {
                    cmd.BindByName = true;
                    cmd.Parameters.Add(new OracleParameter(":startDate", OracleDbType.Date) { Value = start });
                    cmd.Parameters.Add(new OracleParameter(":endDate", OracleDbType.Date) { Value = end });
                    await using var reader = await cmd.ExecuteReaderAsync();
                    while (await reader.ReadAsync())
                    {
                        checkInList.Add(new CheckInRecord
                        {
                            SFG = reader["SFG"].ToString() ?? string.Empty,
                            FG = reader["FG"].ToString() ?? string.Empty,
                            MODEL_NAME = reader["MODEL_NAME"].ToString() ?? string.Empty,
                            PRODUCT_LINE = reader["PRODUCT_LINE"].ToString() ?? string.Empty,
                            MO_NUMBER = reader["MO_NUMBER"].ToString() ?? string.Empty,
                            P_SENDER = reader["P_SENDER"].ToString() ?? string.Empty,
                            REPAIRER = reader["REPAIRER"].ToString() ?? string.Empty,
                            WIP_GROUP = reader["WIP_GROUP"].ToString() ?? string.Empty,
                            ERROR_FLAG = reader["ERROR_FLAG"].ToString() ?? string.Empty,
                            WORK_FLAG = reader["WORK_FLAG"].ToString() ?? string.Empty,
                            STATION_NAME = reader["STATION_NAME"].ToString() ?? string.Empty,
                            ERROR_CODE = reader["ERROR_CODE"].ToString() ?? string.Empty,
                            ERROR_DESC = reader["ERROR_DESC"].ToString() ?? string.Empty,
                            IN_DATETIME = reader["IN_DATETIME"] as DateTime?,
                            OUT_DATETIME = reader["OUT_DATETIME"] as DateTime?
                        });
                    }
                }
                var response = new
                {
                    count = checkInList.Count,
                    data = checkInList
                };
                return Ok(response);
            }
            catch (OracleException ex)
            {
                return StatusCode(500, $"Database error: {ex.Message}");
            }
            finally
            {
                if (connection.State == ConnectionState.Open)
                {
                    await connection.CloseAsync();
                }
            }
        }

        [HttpGet("getLackLocation")]
        public async Task<IActionResult> getLackLocation()
        {
            await using var connection = new OracleConnection(_oracleContext.Database.GetDbConnection().ConnectionString);
            try
            {
                await connection.OpenAsync();
                var checkInQuery = @"
                    SELECT *
                    FROM (
                        SELECT t.*,
                               ROW_NUMBER() OVER (
                                   PARTITION BY t.SFG
                                   ORDER BY t.IN_DATETIME DESC
                               ) rn
                        FROM (
                            -------------------------------------------------------------------
                            -- Query 1: từ R_REPAIR_IN_OUT_T
                            -------------------------------------------------------------------
                            SELECT 
                                CASE
                                    WHEN REGEXP_LIKE(a.MODEL_NAME, '^(900|692|930)') 
                                         THEN COALESCE(kp.KEY_PART_SN, kr.KEY_PART_SN, a.SERIAL_NUMBER)
                                    ELSE a.SERIAL_NUMBER
                                END AS SFG,
                                a.SERIAL_NUMBER AS FG,
                                a.MODEL_NAME,
                                b.PRODUCT_LINE,
                                a.MO_NUMBER,
                                a.P_SENDER,
                                a.REPAIRER,
                                a.STATION_NAME,
                                a.REMARK AS ERROR_CODE,
                                c.ERROR_DESC,
                                a.IN_DATETIME,
                                r107.WIP_GROUP,
                                r107.ERROR_FLAG,
                                r107.WORK_FLAG
                            FROM SFISM4.R_REPAIR_IN_OUT_T a
                            INNER JOIN SFIS1.C_MODEL_DESC_T b 
                                ON a.MODEL_NAME = b.MODEL_NAME
                            INNER JOIN SFIS1.C_ERROR_CODE_T c 
                                ON a.REMARK = c.ERROR_CODE
                            LEFT JOIN SFISM4.R107 r107 
                                ON a.SERIAL_NUMBER = r107.SERIAL_NUMBER
                            LEFT JOIN (
                                SELECT SERIAL_NUMBER, KEY_PART_SN
                                FROM (
                                    SELECT kp.SERIAL_NUMBER, kp.KEY_PART_SN,
                                           ROW_NUMBER() OVER (PARTITION BY kp.SERIAL_NUMBER ORDER BY kp.WORK_TIME DESC) rn
                                    FROM sfism4.P_WIP_KEYPARTS_T kp 
                                    WHERE kp.GROUP_NAME = 'SFG_LINK_FG'
                                      AND LENGTH(kp.SERIAL_NUMBER) IN (12,18,20,21) 
                                      AND LENGTH(kp.KEY_PART_SN) IN (13,14)
                                )
                                WHERE rn = 1
                            ) kp ON a.SERIAL_NUMBER = kp.SERIAL_NUMBER
                            LEFT JOIN (
                                SELECT SERIAL_NUMBER, KEY_PART_SN
                                FROM (
                                    SELECT kr.SERIAL_NUMBER, kr.KEY_PART_SN,
                                           ROW_NUMBER() OVER (PARTITION BY kr.SERIAL_NUMBER ORDER BY kr.WORK_TIME DESC) rn
                                    FROM sfism4.R_WIP_KEYPARTS_T kr 
                                    WHERE kr.GROUP_NAME = 'SFG_LINK_FG'
                                      AND LENGTH(kr.SERIAL_NUMBER) IN (12,18,20,21) 
                                      AND LENGTH(kr.KEY_PART_SN) IN (13,14)
                                )
                                WHERE rn = 1
                            ) kr ON a.SERIAL_NUMBER = kr.SERIAL_NUMBER
                            WHERE r107.WIP_GROUP NOT LIKE '%BR2C%'
                              AND r107.WIP_GROUP NOT LIKE '%BCFA%'
                              AND a.P_SENDER IN ('V0904136','V0945375','V3245384','V3211693')
                              AND a.REPAIRER IS NULL

                            UNION ALL

                            -------------------------------------------------------------------
                            -- Query 2: từ Z_KANBAN_TRACKING_T
                            -------------------------------------------------------------------
                            SELECT 
                                zkb.SERIAL_NUMBER AS SFG,
                                COALESCE(kp.SERIAL_NUMBER, zkb.SERIAL_NUMBER) AS FG,
                                r107.MODEL_NAME,
                                cmd.PRODUCT_LINE,
                                r107.MO_NUMBER,
                                zkb.EMP_NO AS P_SENDER,
                                NULL AS REPAIRER,
                                rp.TEST_GROUP AS STATION_NAME,
                                rp.TEST_CODE AS ERROR_CODE,
                                c.ERROR_DESC,
                                zkb.IN_STATION_TIME AS IN_DATETIME,
                                r107.WIP_GROUP,
                                r107.ERROR_FLAG,
                                r107.WORK_FLAG
                            FROM SFISM4.Z_KANBAN_TRACKING_T zkb
                            INNER JOIN SFIS1.C_MODEL_DESC_T cmd
                                ON cmd.MODEL_NAME = zkb.MODEL_NAME
                            INNER JOIN SFISM4.R107 r107
                                ON r107.SERIAL_NUMBER = zkb.SERIAL_NUMBER
                            LEFT JOIN SFISM4.R_REPAIR_TASK_T rp
                                ON rp.SERIAL_NUMBER = zkb.SERIAL_NUMBER
                            LEFT JOIN SFIS1.C_ERROR_CODE_T c 
                                ON rp.TEST_CODE = c.ERROR_CODE
                            LEFT JOIN (
                                SELECT SERIAL_NUMBER, KEY_PART_SN
                                FROM (
                                    SELECT kp.SERIAL_NUMBER, kp.KEY_PART_SN,
                                           ROW_NUMBER() OVER (
                                               PARTITION BY kp.KEY_PART_SN 
                                               ORDER BY kp.WORK_TIME DESC
                                           ) rn
                                    FROM sfism4.P_WIP_KEYPARTS_T kp
                                    WHERE kp.GROUP_NAME = 'SFG_LINK_FG'
                                      AND LENGTH(kp.SERIAL_NUMBER) IN (12,18,20,21)
                                      AND LENGTH(kp.KEY_PART_SN) IN (13,14)
                                )
                                WHERE rn = 1
                            ) kp ON zkb.SERIAL_NUMBER = kp.KEY_PART_SN
                            WHERE cmd.MODEL_SERIAL = 'ADAPTER'
                              AND zkb.WIP_GROUP LIKE '%B36R'
                              AND r107.WIP_GROUP NOT LIKE '%BR2C%'
                              AND r107.WIP_GROUP NOT LIKE '%BCFA%'
                        ) t
                    )
                    WHERE rn = 1
                    ORDER BY IN_DATETIME DESC";
                var checkInList = new List<CheckInRecord>();
                await using (var cmd = new OracleCommand(checkInQuery, connection))
                {
                    await using var reader = await cmd.ExecuteReaderAsync();
                    while (await reader.ReadAsync())
                    {
                        checkInList.Add(new CheckInRecord
                        {
                            SFG = reader["SFG"].ToString() ?? string.Empty,
                            FG = reader["FG"].ToString() ?? string.Empty,
                            MO_NUMBER = reader["MO_NUMBER"].ToString() ?? string.Empty,
                            WIP_GROUP = reader["WIP_GROUP"].ToString() ?? string.Empty,
                            WORK_FLAG = reader["WORK_FLAG"].ToString() ?? string.Empty,
                            ERROR_FLAG = reader["ERROR_FLAG"].ToString() ?? string.Empty,
                            PRODUCT_LINE = reader["PRODUCT_LINE"].ToString() ?? string.Empty,
                            MODEL_NAME = reader["MODEL_NAME"].ToString() ?? string.Empty,
                            REPAIRER = reader["REPAIRER"].ToString() ?? string.Empty,
                            STATION_NAME = reader["STATION_NAME"].ToString() ?? string.Empty,
                            P_SENDER = reader["P_SENDER"].ToString() ?? string.Empty,
                            ERROR_CODE = reader["ERROR_CODE"].ToString() ?? string.Empty,
                            IN_DATETIME = reader["IN_DATETIME"] as DateTime?,
                            ERROR_DESC = reader["ERROR_DESC"].ToString() ?? string.Empty
                        });
                    }
                }
                if (checkInList.Count > 0)
                {
                    var serialNumbers = checkInList
                        .Select(r => r.SFG)
                        .Where(sn => !string.IsNullOrWhiteSpace(sn))
                        .Distinct(StringComparer.OrdinalIgnoreCase)
                        .ToList();

                    if (serialNumbers.Count > 0)
                    {
                        var productSerials = await _sqlContext.Products
                        .Where(p => serialNumbers.Contains(p.SerialNumber))
                        .Select(p => p.SerialNumber)
                        .ToListAsync();

                        var khoScrapSerials = await _sqlContext.KhoScraps
                            .Where(p => serialNumbers.Contains(p.SERIAL_NUMBER))
                            .Select(p => p.SERIAL_NUMBER)
                            .ToListAsync();

                        var khoOkSerials = await _sqlContext.KhoOks
                            .Where(p => serialNumbers.Contains(p.SERIAL_NUMBER))
                            .Select(p => p.SERIAL_NUMBER)
                            .ToListAsync();

                        //await Task.WhenAll(productSerials, khoScrapSerials, khoOkSerials);

                        var excludedSerials = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
                        foreach (var serial in productSerials)
                            excludedSerials.Add(serial);

                        foreach (var serial in khoScrapSerials)
                            excludedSerials.Add(serial);

                        foreach (var serial in khoOkSerials)
                            excludedSerials.Add(serial);

                        var exportRecords = await _sqlContext.Exports
                            .Where(e => serialNumbers.Contains(e.SerialNumber))
                            .Select(e => new
                            {
                                e.SerialNumber,
                                e.ExportDate,
                                e.CheckingB36R
                            })
                            .ToListAsync();

                        var exportSerials = exportRecords
                            .GroupBy(e => e.SerialNumber, StringComparer.OrdinalIgnoreCase)
                            .Where(group =>
                            {
                                var latest = group
                                    .OrderByDescending(x => x.ExportDate ?? DateTime.MinValue)
                                    .FirstOrDefault();
                                return latest != null && (latest.CheckingB36R == 3 || latest.CheckingB36R == 2);
                            })
                            .Select(group => group.Key);

                        foreach (var serial in exportSerials)
                        {
                            excludedSerials.Add(serial);
                        }

                        checkInList = checkInList
                            .Where(record => !excludedSerials.Contains(record.SFG))
                            .ToList();
                    }
                }
                var response = new
                {
                    count = checkInList.Count,
                    data = checkInList
                };
                return Ok(response);
            }
            catch (OracleException ex)
            {
                return StatusCode(500, $"Database error: {ex.Message}");
            }
            finally
            {
                if (connection.State == ConnectionState.Open)
                {
                    await connection.CloseAsync();
                }
            }
        }

        //Số lượng tồn kho của Before Kanban và After Kanban
        [HttpGet("GetTonKhoSummary")]
        public async Task<IActionResult> GetTonKhoSummary(DateTime? startDate, DateTime? endDate)
        {
            var defaultEnd = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, 7, 30, 0);
            var end = endDate ?? defaultEnd;
            var start = startDate ?? end.AddDays(-1);

            var beforeResult = await GetTonKhoBeforeInternal(start, end);
            var afterResult = await GetTonKhoAfterInternal(start, end);

            var response = new
            {
                beforeKanban = new { count = beforeResult.Count, data = beforeResult },
                afterKanban = new { count = afterResult.Count, data = afterResult }
            };

            return Ok(response);
        }

        private async Task<List<CheckInRecord>> GetTonKhoBeforeInternal(DateTime start, DateTime end)
        {
            var checkInList = new List<CheckInRecord>();

            await using var connection = new OracleConnection(_oracleContext.Database.GetDbConnection().ConnectionString);
            await connection.OpenAsync();

            var checkInQuery = @"
        SELECT a.SERIAL_NUMBER,
               a.MO_NUMBER,
               a.MODEL_NAME,
               b.PRODUCT_LINE,
               r107.MO_NUMBER,
               r107.WIP_GROUP,
               r107.ERROR_FLAG,
               r107.WORK_FLAG,
               a.STATION_NAME,
               a.P_SENDER,
               a.REMARK AS ERROR_CODE,
               a.IN_DATETIME,
               a.OUT_DATETIME,
               a.REPAIRER,
               c.ERROR_DESC,
               ROUND((SYSDATE - a.IN_DATETIME) * 24, 2) AS AGING_HOURS
        FROM SFISM4.R_REPAIR_IN_OUT_T a
        INNER JOIN SFIS1.C_MODEL_DESC_T b ON a.MODEL_NAME = b.MODEL_NAME
        INNER JOIN SFISM4.R107 r107 ON a.serial_number = r107.serial_number
        INNER JOIN SFIS1.C_ERROR_CODE_T c ON a.REMARK = c.ERROR_CODE
        WHERE b.MODEL_SERIAL = 'ADAPTER'
          AND r107.ERROR_FLAG != '0'
          AND a.P_SENDER IN ('V0904136','V3209541','V0945375','V0928908','V3245384','V3211693')
          AND a.IN_DATETIME BETWEEN :startDate AND :endDate
          AND NOT REGEXP_LIKE(a.MODEL_NAME, '^(900|692|930)')
          AND a.REMARK NOT IN ('CK00')
          AND NOT EXISTS (
              SELECT 1
              FROM sfism4.z_kanban_tracking_t z
              WHERE z.serial_number = a.serial_number)";

            await using (var cmd = new OracleCommand(checkInQuery, connection))
            {
                cmd.BindByName = true;
                cmd.Parameters.Add(new OracleParameter(":startDate", OracleDbType.Date) { Value = start });
                cmd.Parameters.Add(new OracleParameter(":endDate", OracleDbType.Date) { Value = end });
                await using var reader = await cmd.ExecuteReaderAsync();
                while (await reader.ReadAsync())
                {
                    checkInList.Add(new CheckInRecord
                    {
                        SERIAL_NUMBER = reader["SERIAL_NUMBER"].ToString() ?? string.Empty,
                        MO_NUMBER = reader["MO_NUMBER"].ToString() ?? string.Empty,
                        MODEL_NAME = reader["MODEL_NAME"].ToString() ?? string.Empty,
                        WIP_GROUP = reader["WIP_GROUP"].ToString() ?? string.Empty,
                        WORK_FLAG = reader["WORK_FLAG"].ToString() ?? string.Empty,
                        ERROR_FLAG = reader["ERROR_FLAG"].ToString() ?? string.Empty,
                        PRODUCT_LINE = reader["PRODUCT_LINE"].ToString() ?? string.Empty,
                        STATION_NAME = reader["STATION_NAME"].ToString() ?? string.Empty,
                        P_SENDER = reader["P_SENDER"].ToString() ?? string.Empty,
                        ERROR_CODE = reader["ERROR_CODE"].ToString() ?? string.Empty,
                        IN_DATETIME = reader["IN_DATETIME"] as DateTime?,
                        OUT_DATETIME = reader["OUT_DATETIME"] as DateTime?,
                        REPAIRER = reader["REPAIRER"].ToString() ?? string.Empty,
                        ERROR_DESC = reader["ERROR_DESC"].ToString() ?? string.Empty,
                        TYPE = "BEFORE",
                        AGING_HOURS = reader["AGING_HOURS"].ToString() ?? string.Empty
                    });
                }
            }

            return checkInList;
        }

        private async Task<List<CheckInRecord>> GetTonKhoAfterInternal(DateTime start, DateTime end)
        {
            var checkInList = new List<CheckInRecord>();

            await using var connection = new OracleConnection(_oracleContext.Database.GetDbConnection().ConnectionString);
            await connection.OpenAsync();

            // === Query Check-In After ===
            var checkInQuery = @"
                SELECT 
                    CASE 
                        WHEN REGEXP_LIKE(a.MODEL_NAME, '^(900|692|930)') 
                             THEN COALESCE(kp.KEY_PART_SN, a.SERIAL_NUMBER)
                        ELSE a.SERIAL_NUMBER
                    END AS SFG,
                    a.SERIAL_NUMBER AS FG,
                    a.MODEL_NAME,
                    d.PRODUCT_LINE,
                    a.MO_NUMBER,
                    a.P_SENDER,
                    a.REPAIRER,
                    a.STATION_NAME,
                    a.REMARK AS ERROR_CODE,
                    c.ERROR_DESC,
                    a.IN_DATETIME,
                    a.OUT_DATETIME,
                    r107.WIP_GROUP,
                    r107.ERROR_FLAG,
                    r107.WORK_FLAG,
                    ROUND((SYSDATE - a.IN_DATETIME) * 24, 2) AS AGING_HOURS   -- ✅ thêm cột Aging theo giờ
                FROM sfism4.R_REPAIR_IN_OUT_T a
                LEFT JOIN SFISM4.R107 r107
                    ON r107.SERIAL_NUMBER = a.SERIAL_NUMBER
                LEFT JOIN SFIS1.C_ERROR_CODE_T c 
                    ON c.ERROR_CODE = a.REMARK
                INNER JOIN SFIS1.C_MODEL_DESC_T d 
                    ON d.MODEL_NAME = a.MODEL_NAME
                LEFT JOIN (
                    SELECT SERIAL_NUMBER, KEY_PART_SN
                    FROM (
                        SELECT kp.SERIAL_NUMBER, kp.KEY_PART_SN,
                               ROW_NUMBER() OVER (PARTITION BY kp.SERIAL_NUMBER ORDER BY kp.WORK_TIME DESC) rn
                        FROM sfism4.P_WIP_KEYPARTS_T kp 
                        WHERE kp.GROUP_NAME = 'SFG_LINK_FG' 
                          AND LENGTH(kp.SERIAL_NUMBER) IN (12, 18, 21, 20) 
                          AND LENGTH(kp.KEY_PART_SN) IN (14, 13)
                    )
                    WHERE rn = 1
                ) kp
                    ON a.SERIAL_NUMBER = kp.SERIAL_NUMBER
                LEFT JOIN (
                    SELECT SERIAL_NUMBER, KEY_PART_SN
                    FROM (
                        SELECT kr.SERIAL_NUMBER, kr.KEY_PART_SN,
                               ROW_NUMBER() OVER (PARTITION BY kr.SERIAL_NUMBER ORDER BY kr.WORK_TIME DESC) rn
                        FROM sfism4.R_WIP_KEYPARTS_T kr 
                        WHERE kr.GROUP_NAME = 'SFG_LINK_FG' 
                          AND LENGTH(kr.SERIAL_NUMBER) IN (12, 18, 21, 20) 
                          AND LENGTH(kr.KEY_PART_SN) IN (14, 13)
                    )
                    WHERE rn = 1
                ) kr
                    ON a.SERIAL_NUMBER = kr.SERIAL_NUMBER
                WHERE 
                    (
                        (
                            REGEXP_LIKE(a.MODEL_NAME, '^(900|692|930)') 
                            AND a.P_SENDER IN ('V3209541', 'V0928908','V0945375', 'V3211693', 'V0904136')
                            AND r107.ERROR_FLAG NOT IN ('0', '1')
                        ) 
                        OR 
                        (
                            a.MO_NUMBER LIKE '8%' 
                            AND a.STATION_NAME NOT LIKE '%REPAIR_B36R%'
                            AND a.P_SENDER IN ('V3209541', 'V0928908', 'V3211693', 'V0904136')
                            AND r107.ERROR_FLAG NOT IN ('0', '1')
                        )
                    )
                    AND a.IN_DATETIME BETWEEN :startDate and :endDate";

            await using (var cmd = new OracleCommand(checkInQuery, connection))
            {
                cmd.BindByName = true;
                cmd.Parameters.Add(new OracleParameter(":startDate", OracleDbType.Date) { Value = start });
                cmd.Parameters.Add(new OracleParameter(":endDate", OracleDbType.Date) { Value = end });
                await using var reader = await cmd.ExecuteReaderAsync();
                while (await reader.ReadAsync())
                {
                    checkInList.Add(new CheckInRecord
                    {
                        SFG = reader["SFG"].ToString() ?? string.Empty,
                        FG = reader["FG"].ToString() ?? string.Empty,
                        MODEL_NAME = reader["MODEL_NAME"].ToString() ?? string.Empty,
                        PRODUCT_LINE = reader["PRODUCT_LINE"].ToString() ?? string.Empty,
                        MO_NUMBER = reader["MO_NUMBER"].ToString() ?? string.Empty,
                        P_SENDER = reader["P_SENDER"].ToString() ?? string.Empty,
                        REPAIRER = reader["REPAIRER"].ToString() ?? string.Empty,
                        WIP_GROUP = reader["WIP_GROUP"].ToString() ?? string.Empty,
                        ERROR_FLAG = reader["ERROR_FLAG"].ToString() ?? string.Empty,
                        WORK_FLAG = reader["WORK_FLAG"].ToString() ?? string.Empty,
                        STATION_NAME = reader["STATION_NAME"].ToString() ?? string.Empty,
                        ERROR_CODE = reader["ERROR_CODE"].ToString() ?? string.Empty,
                        ERROR_DESC = reader["ERROR_DESC"].ToString() ?? string.Empty,
                        IN_DATETIME = reader["IN_DATETIME"] as DateTime?,
                        OUT_DATETIME = reader["OUT_DATETIME"] as DateTime?,
                        TYPE = "AFTER",
                        AGING_HOURS = reader["AGING_HOURS"].ToString() ?? string.Empty
                    });
                }
            }

            // Lấy Exports
            var serialNumbers = checkInList
                .Where(r => !string.IsNullOrWhiteSpace(r.SFG))
                .Select(r => r.SFG)
                .Distinct()
                .ToList();

            var exportRecords = await _sqlContext.Exports
                .Where(e => serialNumbers.Contains(e.SerialNumber) &&
                            (e.CheckingB36R == 1 || e.CheckingB36R == 2 || e.CheckingB36R == 3))
                .Select(e => new { e.SerialNumber, e.ExportDate, e.CheckingB36R })
                .ToListAsync();

            var exportDict = exportRecords
                .GroupBy(e => e.SerialNumber, StringComparer.OrdinalIgnoreCase)
                .ToDictionary(
                    g => g.Key,
                    g => g.OrderByDescending(x => x.ExportDate ?? DateTime.MinValue).First(),
                    StringComparer.OrdinalIgnoreCase);

            var tonKhoAfter = checkInList
                .Where(ci => !exportDict.ContainsKey(ci.SFG)
                          || (exportDict[ci.SFG].ExportDate != null && exportDict[ci.SFG].ExportDate <= ci.IN_DATETIME))
                .ToList();

            return tonKhoAfter;
        }

    }
}
