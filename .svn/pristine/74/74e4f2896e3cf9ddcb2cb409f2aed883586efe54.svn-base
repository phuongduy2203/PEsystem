@{
    ViewData["Title"] = "Repository";
    Layout = "~/Areas/Repositories/Views/Shared/_Layout_Repo.cshtml";
}

<section class="section dashboard">
    <!-- Biểu đồ -->
    <div class="chart-container">
        <div id="stackedChart" style="width: 100%; height: 500px;"></div>
    </div>
    <!-- Tổng số và thông báo lỗi -->
    <div class="summary-container">
        <div class="summary-item">
            <span class="summary-label">Trong RE (Chưa sửa):</span>
            <span id="countInReTotal" class="total-count" data-category="Trong RE">(0)</span>
            <span id="countInReError" class="error-message" style="color: red; display: none;"></span>
        </div>
        <div class="summary-item">
            <span class="summary-label">Trong RE (Đã sửa):</span>
            <span id="countWaitCheckoutTotal" class="total-count" data-category="Trong RE(Chờ checkout)">(0)</span>
            <span id="countWaitCheckoutError" class="error-message" style="color: red; display: none;"></span>
        </div>
        <div class="summary-item">
            <span class="summary-label">Ngoài truyền:</span>
            <span id="countCheckInTotal" class="total-count" data-category="Ngoài truyền">(0)</span>
            <span id="countCheckInError" class="error-message" style="color: red; display: none;"></span>
        </div>
        <div class="summary-item">
            <span class="summary-label">Đã link MO:</span>
            <span id="countLinkMoTotal" class="total-count" data-category="Đã link MO">(0)</span>
            <span id="countLinkMoError" class="error-message" style="color: red; display: none;"></span>
        </div>
        <div class="summary-item">
            <span class="summary-label">Chờ Link MO:</span>
            <span id="countWaitLinkMoTotal" class="total-count" data-category="Chờ Link MO">(0)</span>
            <span id="countWaitLinkMoError" class="error-message" style="color: red; display: none;"></span>
        </div>
    </div>
    <!-- Legend -->
    <div class="shared-legend">
        <div class="legend-item">
            <span class="legend-color" style="background-color: #36A2EB;"></span>
            <span>1-7 Days</span>
        </div>
        <div class="legend-item">
            <span class="legend-color" style="background-color: #FFCE56;"></span>
            <span>8-14 Days</span>
        </div>
        <div class="legend-item">
            <span class="legend-color" style="background-color: #FF0000;"></span>
            <span>15-21 Days</span>
        </div>
    </div>

    <!-- Modal hiển thị bảng dữ liệu -->
    <div id="dataModal" class="modal">
        <div class="modal-content">
            <span class="close">×</span>
            <h2 id="modalTitle"></h2>
            <table id="dataTable" class="data-table">
                <thead>
                    <tr>
                        <th>SERIAL_NUMBER</th>
                        <th>MODEL_NAME</th>
                        <th>TEST_TIME</th>
                        <th>TEST_GROUP</th>
                        <th>TEST_CODE</th>
                        <th>ERROR_DESC</th>
                        <th>REASON_CODE</th>
                        <th>WIP_GROUP</th>
                        <th>AGING</th>
                        <th>KỆ</th>
                        <th>CỘT</th>
                        <th>TẦNG</th>
                        <th>KHAY</th>
                        <th>Ô</th>
                        <th>NOTE</th>
                        <th>ACTION</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>
</section>

<style>
    .section.dashboard {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 20px;
    }

    .chart-container {
        width: 100%;
        max-width: 1200px;
    }

    .summary-container {
        width: 100%;
        max-width: 1200px;
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        justify-content: center;
        margin-top: 20px;
    }

    .summary-item {
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .summary-label {
        font-weight: bold;
        color: #333;
    }

    .total-count {
        font-weight: bold;
        color: #000;
        cursor: pointer;
    }

    .total-count:hover {
        text-decoration: underline;
    }

    .error-message {
        margin-left: 10px;
    }

    .shared-legend {
        width: 100%;
        max-width: 1200px;
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 20px;
    }

    .legend-item {
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .legend-color {
        width: 15px;
        height: 15px;
        border-radius: 3px;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.5);
    }

    .modal-content {
        background-color: #fff;
        margin: 5% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 100%;
        max-width: 96%;
        overflow-x: auto;
        position: relative;
    }

    #modalTitle {
        top: 10px;
        left: 20px;
        font-size: 20px;
        font-weight: bold;
    }

    .close {
        color: #aaa;
        position: absolute;
        right: 10px;
        top: 0px;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

    .close:hover,
    .close:focus {
        color: #000;
        text-decoration: none;
    }

    .data-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        font-size: 12px;
        min-width: 1600px;
    }

    .data-table th,
    .data-table td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
        max-width: 100px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        font-size: 12px;
    }

    .data-table th {
        background-color: #f2f2f2;
    }

    .dataTables_wrapper {
        font-size: 12px;
        overflow-x: auto;
    }

    .dataTables_filter {
        position: relative;
        display: inline-block;
    }

    .excel-export-icon {
        right: 5px;
        top: 50%;
        transform: translateY(-50%);
        cursor: pointer;
        color: #28a745;
        font-size: 24px;
    }

    .excel-export-icon:hover {
        color: #218838;
    }

    .excel-icon {
        width: 35px;
        height: 35px;
        margin-left: 5px;
        transition: transform 0.2s ease-in-out;
    }

    .excel-icon:hover {
        transform: scale(1.1);
    }
</style>

@section Scripts {
    <script src="~/assets/vendor/echarts/echarts.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script>
        // Vẽ biểu đồ cột xếp chồng
        function drawStackedColumnChart(chartId, dataList) {
            const chartDom = document.getElementById(chartId);
            const myChart = echarts.init(chartDom);

            const option = {
                tooltip: {
                    trigger: 'axis',
                    axisPointer: { type: 'shadow' },
                    formatter: params => {
                        let result = `${params[0].axisValue}<br/>`;
                        params.forEach(item => {
                            result += `${item.marker} ${item.seriesName}: ${item.value}<br/>`;
                        });
                        return result;
                    }
                },
                legend: { show: false },
                grid: { left: '3%', right: '3%', bottom: '3%', containLabel: true },
                xAxis: {
                    type: 'category',
                    data: [
                        'Trong RE',
                        'Trong RE(Chờ checkout)',
                        'Ngoài truyền',
                        'Chờ Link MO',
                        'Đã link MO'
                    ],
                    axisLabel: { rotate: 0, interval: 0 }
                },
                yAxis: {
                    type: 'value',
                    name: 'Số lượng',
                    nameLocation: 'middle',
                    nameGap: 50
                },
                series: [
                    {
                        name: '1-7 Days',
                        type: 'bar',
                        stack: 'total',
                        data: dataList.map(item => item.data.count1To7Days || 0),
                        barWidth: 60,
                        itemStyle: { color: '#36A2EB' },
                        label: { show: true, position: 'inside', formatter: params => params.value > 0 ? params.value : '' }
                    },
                    {
                        name: '8-14 Days',
                        type: 'bar',
                        stack: 'total',
                        data: dataList.map(item => item.data.count8To14Days || 0),
                        barWidth: 60,
                        itemStyle: { color: '#FFCE56' },
                        label: { show: true, position: 'inside', formatter: params => params.value > 0 ? params.value : '' }
                    },
                    {
                        name: '15-21 Days',
                        type: 'bar',
                        stack: 'total',
                        data: dataList.map(item => item.data.count15To21Days || 0),
                        barWidth: 60,
                        itemStyle: { color: '#FF0000' },
                        label: { show: true, position: 'inside', formatter: params => params.value > 0 ? params.value : '' }
                    }
                ]
            };

            myChart.setOption(option);

            myChart.on('click', params => {
                console.log('Clicked:', params.name, params.seriesName, params.value);
                if (params.value > 0) {
                    showModal(params.name, params.seriesName);
                }
            });
        }

        // Hiển thị modal với dữ liệu lọc theo thời gian
        async function showModal(category, seriesName) {
            const modal = document.getElementById('dataModal');
            const modalTitle = document.getElementById('modalTitle');
            const tbody = document.querySelector('#dataTable tbody');
            let dataTableInstance = null;

            const regionMap = { '1-7 Days': '1', '8-14 Days': '2', '15-21 Days': '3' };
            const apiMap = {
                'Trong RE': 'http://10.220.130.119:9090/api/Bonepile2/region-wip-in-re',
                'Trong RE(Chờ checkout)': 'http://10.220.130.119:9090/api/Bonepile2/region-wip-wait-out-re',
                'Ngoài truyền': 'http://10.220.130.119:9090/api/Bonepile2/region-wip-wait-check-in',
                'Chờ Link MO': 'http://10.220.130.119:9090/api/Bonepile2/region-wip-wait-link-mo',
                'Đã link MO': 'http://10.220.130.119:9090/api/Bonepile2/region-wip-link-mo'
            };

            const region = regionMap[seriesName];
            const apiUrl = apiMap[category];

            if (!apiUrl || !region) {
                alert('Invalid category or series name');
                return;
            }

            modalTitle.textContent = `${category} - ${seriesName}`;
            tbody.innerHTML = '';

            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(region)
                });
                const result = await response.json();
                console.log('API Response (Filtered):', result);

                if (result.success && result.data?.length > 0) {
                    result.data.forEach(item => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${item.serialNumber || ''}</td>
                            <td title="${item.modelName || ''}">${truncateText(item.modelName || '')}</td>
                            <td title="${item.testTime ? new Date(item.testTime).toLocaleString() : ''}">${truncateText(item.testTime ? new Date(item.testTime).toLocaleString() : '')}</td>
                            <td>${item.testGroup || ''}</td>
                            <td title="${item.testCode || ''}">${truncateText(item.testCode || '')}</td>
                            <td title="${item.data1 || ''}">${truncateText(item.data1 || '')}</td>
                            <td>${item.reasonCode || ''}</td>
                            <td>${item.wipGroup || ''}</td>
                            <td>${item.daysSinceFirstTest || ''}</td>
                            <td>${item.shelfCode || ''}</td>
                            <td>${item.columnNumber || ''}</td>
                            <td>${item.levelNumber || ''}</td>
                            <td>${item.trayNumber || ''}</td>
                            <td>${item.positionInTray || ''}</td>
                            <td title="${item.note || ''}">${truncateText(item.note, 20)}</td>
                            <td title="${item.action || ''}">${truncateText(item.action, 20)}</td>`;
                        tbody.appendChild(row);
                    });

                    if ($.fn.DataTable.isDataTable('#dataTable')) {
                        $('#dataTable').DataTable().destroy();
                    }

                    dataTableInstance = $('#dataTable').DataTable({
                        paging: true,
                        searching: true,
                        ordering: true,
                        info: true,
                        lengthChange: true,
                        pageLength: 10,
                        language: {
                            search: "Tìm kiếm:",
                            lengthMenu: "Hiển thị _MENU_ bản ghi",
                            info: "Hiển thị _START_ đến _END_ của _TOTAL_ bản ghi",
                            paginate: { first: "Đầu", last: "Cuối", next: "Tiếp", previous: "Trước" }
                        },
                        drawCallback: () => {
                            const filterWrapper = document.querySelector('.dataTables_filter');
                            if (filterWrapper && !filterWrapper.querySelector('.excel-export-icon')) {
                                const exportIcon = document.createElement('span');
                                exportIcon.className = 'excel-export-icon';
                                exportIcon.innerHTML = '<img id="export-all-btn" src="/assets/img/excel.png" alt="ExcelIcon" class="excel-icon">';
                                filterWrapper.appendChild(exportIcon);
                                exportIcon.addEventListener('click', () => exportTableToExcel(`${category}_${seriesName}.xlsx`, result.data));
                            }
                        }
                    });

                    modal.style.display = 'block';
                    dataTableInstance.columns.adjust().draw();
                } else {
                    tbody.innerHTML = '<tr><td colspan="16">Không có dữ liệu</td></tr>';
                    modal.style.display = 'block';
                }
            } catch (error) {
                console.error('Error fetching filtered data:', error);
                tbody.innerHTML = '<tr><td colspan="16">Lỗi khi tải dữ liệu</td></tr>';
                modal.style.display = 'block';
            }

            const closeModal = () => {
                modal.style.display = 'none';
                if (dataTableInstance) dataTableInstance.destroy();
            };

            document.querySelector('.close').onclick = closeModal;
            window.onclick = event => {
                if (event.target === modal) closeModal();
            };
        }

        // Hiển thị modal với toàn bộ dữ liệu
        async function showAllModal(category) {
            const modal = document.getElementById('dataModal');
            const modalTitle = document.getElementById('modalTitle');
            const tbody = document.querySelector('#dataTable tbody');
            let dataTableInstance = null;

            const apiMap = {
                'Trong RE': 'http://10.220.130.119:9090/api/Bonepile2/region-wip-in-re',
                'Trong RE(Chờ checkout)': 'http://10.220.130.119:9090/api/Bonepile2/region-wip-wait-out-re',
                'Ngoài truyền': 'http://10.220.130.119:9090/api/Bonepile2/region-wip-wait-check-in',
                'Chờ Link MO': 'http://10.220.130.119:9090/api/Bonepile2/region-wip-wait-link-mo',
                'Đã link MO': 'http://10.220.130.119:9090/api/Bonepile2/region-wip-link-mo'
            };

            const apiUrl = apiMap[category];
            if (!apiUrl) {
                alert('Invalid category');
                return;
            }

            modalTitle.textContent = `${category} - Toàn bộ`;
            tbody.innerHTML = '';

            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify("")
                });
                const result = await response.json();
                console.log('API Response (All):', result);

                if (result.success && result.data?.length > 0) {
                    result.data.forEach(item => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${item.serialNumber || ''}</td>
                            <td title="${item.modelName || ''}">${truncateText(item.modelName || '')}</td>
                            <td title="${item.testTime ? new Date(item.testTime).toLocaleString() : ''}">${truncateText(item.testTime ? new Date(item.testTime).toLocaleString() : '')}</td>
                            <td>${item.testGroup || ''}</td>
                            <td title="${item.testCode || ''}">${truncateText(item.testCode || '')}</td>
                            <td title="${item.data1 || ''}">${truncateText(item.data1 || '')}</td>
                            <td>${item.reasonCode || ''}</td>
                            <td>${item.wipGroup || ''}</td>
                            <td>${item.daysSinceFirstTest || ''}</td>
                            <td>${item.shelfCode || ''}</td>
                            <td>${item.columnNumber || ''}</td>
                            <td>${item.levelNumber || ''}</td>
                            <td>${item.trayNumber || ''}</td>
                            <td>${item.positionInTray || ''}</td>
                            <td title="${item.note || ''}">${truncateText(item.note, 20)}</td>
                            <td title="${item.action || ''}">${truncateText(item.action, 20)}</td>`;
                        tbody.appendChild(row);
                    });

                    if ($.fn.DataTable.isDataTable('#dataTable')) {
                        $('#dataTable').DataTable().destroy();
                    }

                    dataTableInstance = $('#dataTable').DataTable({
                        paging: true,
                        searching: true,
                        ordering: true,
                        info: true,
                        lengthChange: true,
                        pageLength: 10,
                        language: {
                            search: "Tìm kiếm:",
                            lengthMenu: "Hiển thị _MENU_ bản ghi",
                            info: "Hiển thị _START_ đến _END_ của _TOTAL_ bản ghi",
                            paginate: { first: "Đầu", last: "Cuối", next: "Tiếp", previous: "Trước" }
                        },
                        drawCallback: () => {
                            const filterWrapper = document.querySelector('.dataTables_filter');
                            if (filterWrapper && !filterWrapper.querySelector('.excel-export-icon')) {
                                const exportIcon = document.createElement('span');
                                exportIcon.className = 'excel-export-icon';
                                exportIcon.innerHTML = '<img id="export-all-btn" src="/assets/img/excel.png" alt="ExcelIcon" class="excel-icon">';
                                filterWrapper.appendChild(exportIcon);
                                exportIcon.addEventListener('click', () => exportTableToExcel(`${category}_All.xlsx`, result.data));
                            }
                        }
                    });

                    modal.style.display = 'block';
                    dataTableInstance.columns.adjust().draw();
                } else {
                    tbody.innerHTML = '<tr><td colspan="16">Không có dữ liệu</td></tr>';
                    modal.style.display = 'block';
                }
            } catch (error) {
                console.error('Error fetching all data:', error);
                tbody.innerHTML = '<tr><td colspan="16">Lỗi khi tải dữ liệu</td></tr>';
                modal.style.display = 'block';
            }

            const closeModal = () => {
                modal.style.display = 'none';
                if (dataTableInstance) dataTableInstance.destroy();
            };

            document.querySelector('.close').onclick = closeModal;
            window.onclick = event => {
                if (event.target === modal) closeModal();
            };
        }

        // Hàm cắt chuỗi
        function truncateText(text, maxLength = 30) {
            return text && text.length > maxLength ? text.substring(0, maxLength) + "..." : text || "";
        }

        // Xuất bảng ra Excel
        function exportTableToExcel(filename, tableData) {
            const wsData = [
                ['SERIAL_NUMBER', 'MODEL_NAME', 'TEST_TIME', 'TEST_GROUP', 'TEST_CODE', 'ERROR_DESC', 'REASON_CODE', 'WIP_GROUP', 'AGING', 'KỆ', 'CỘT', 'TẦNG', 'KHAY', 'Ô', 'NOTE', 'ACTION'],
                ...tableData.map(item => [
                    item.serialNumber || '',
                    item.modelName || '',
                    item.testTime ? new Date(item.testTime).toLocaleString() : '',
                    item.testGroup || '',
                    item.testCode || '',
                    item.data1 || '',
                    item.reasonCode || '',
                    item.wipGroup || '',
                    item.daysSinceFirstTest || '',
                    item.shelfCode || '',
                    item.columnNumber || '',
                    item.levelNumber || '',
                    item.trayNumber || '',
                    item.positionInTray || '',
                    item.note || '',
                    item.action || ''
                ])
            ];

            const ws = XLSX.utils.aoa_to_sheet(wsData);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');
            XLSX.writeFile(wb, filename);
        }

        // Gọi API và vẽ biểu đồ
        async function fetchDataAndDrawChart() {
            const apiCalls = [
                { url: 'http://10.220.130.119:9090/api/Bonepile2/count-In-RE', totalId: 'countInReTotal', errorId: 'countInReError', category: 'Trong RE' },
                { url: 'http://10.220.130.119:9090/api/Bonepile2/count-wait-checkout', totalId: 'countWaitCheckoutTotal', errorId: 'countWaitCheckoutError', category: 'Trong RE(Chờ checkout)' },
                { url: 'http://10.220.130.119:9090/api/Bonepile2/count-wait-checkin-RE', totalId: 'countCheckInTotal', errorId: 'countCheckInError', category: 'Ngoài truyền' },
                { url: 'http://10.220.130.119:9090/api/Bonepile2/count-wait-link-mo', totalId: 'countWaitLinkMoTotal', errorId: 'countWaitLinkMoError', category: 'Chờ Link MO' },
                { url: 'http://10.220.130.119:9090/api/Bonepile2/count-link-mo', totalId: 'countLinkMoTotal', errorId: 'countLinkMoError', category: 'Đã link MO' }
            ];

            const dataList = [];

            for (const api of apiCalls) {
                try {
                    const response = await fetch(api.url);
                    const data = await response.json();
                    console.log(`Data from ${api.url}:`, data);

                    const totalElement = document.getElementById(api.totalId);
                    const errorElement = document.getElementById(api.errorId);

                    if (data?.success) {
                        dataList.push({ data });
                        totalElement.textContent = `(${data.totalCount || 0})`;
                        errorElement.style.display = 'none';
                    } else {
                        throw new Error(data?.message || 'API call failed');
                    }
                } catch (error) {
                    console.error(`Error fetching ${api.url}:`, error);
                    const errorElement = document.getElementById(api.errorId);
                    errorElement.textContent = `Error: ${error.message}`;
                    errorElement.style.display = 'inline';
                    dataList.push({ data: { totalCount: 0, count1To7Days: 0, count8To14Days: 0, count15To21Days: 0 } });
                }
            }

            drawStackedColumnChart('stackedChart', dataList);

            // Thêm sự kiện nhấp vào tổng số
            document.querySelectorAll('.total-count').forEach(element => {
                element.addEventListener('click', () => {
                    const category = element.getAttribute('data-category');
                    const total = parseInt(element.textContent.replace(/[()]/g, '')) || 0;
                    if (total > 0) {
                        showAllModal(category);
                    }
                });
            });
        }

        document.addEventListener('DOMContentLoaded', fetchDataAndDrawChart);
    </script>
}