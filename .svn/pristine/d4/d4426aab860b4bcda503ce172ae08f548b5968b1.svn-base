@{
    ViewData["Title"] = "Allpart DC-LC";
}
@{
    Layout = "~/Areas/Allpart/Views/Shared/layout_allpart.cshtml";
}

<div class="card shadow-sm">
    <div class="card-header bg-nvidia-green text-white">
        <h1 class="h4 mb-0 text-center">Tìm Kiếm Thông Tin Linh Kiện</h1>
    </div>
    <div class="card-body">
        <div class="row g-3 mb-4 align-items-center">
            <div class="col-md-4">
                <textarea id="serialNumber" class="form-control" rows="3" placeholder="Nhập SerialNumber (mỗi dòng một giá trị)..."></textarea>
            </div>
            <div class="col-md-4">
                <textarea id="refDes" class="form-control" rows="3" placeholder="Nhập vị trí (mỗi dòng một giá trị)..."></textarea>
            </div>
            <div class="col-md-2">
                <button onclick="search()" class="btn btn-nvidia-green w-100">Tìm kiếm</button>
            </div>
            <div class="col-md-2">
                <button onclick="downloadExcel()" class="btn btn-nvidia-green w-100">Tải xuống Excel</button>
            </div>
        </div>

        <div class="mt-5">
            <div class="table-responsive align-items-center">
                <table id="dcLcTable" class="display table table-bordered table-striped datatable-table" style="width:100%">
                    <thead>
                        <tr>
                            <th>P_SN</th>
                            <th>MODEL_NAME</th>
                            <th>MÃ_LIỆU</th>
                            <th>VENDOR_CODE</th>
                            <th>VENDOR_NAME</th>
                            <th>REF_DES</th>
                            <th>DATE_CODE</th>
                            <th>LOT_CODE</th>
                            <th>PROCESS_FLAG</th>
                            <th>STATION</th>
                            <th>GROUP_NAME</th>
                            <th>WORK_TIME</th>
                            <th>WO</th>
                        </tr>
                    </thead>
                    <tbody id="dcLcTableBody"></tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <style>
        .bg-nvidia-green {
            background-color: #76B900 !important; /* Màu xanh lá của NVIDIA */
        }

        .btn-nvidia-green {
            background-color: #76B900 !important;
            border-color: #76B900 !important;
            color: #fff;
            height: 100%; /* Đảm bảo nút bấm cao bằng textarea */
        }

            .btn-nvidia-green:hover {
                background-color: #639A00 !important; /* Tông màu đậm hơn khi hover */
                border-color: #639A00 !important;
            }

        .custom-tooltip {
            position: absolute;
            background-color: #333;
            color: #fff;
            padding: 5px 5px;
            border-radius: 2px;
            font-size: 10px;
            z-index: 1000;
            display: none;
            max-width: 300px;
            word-wrap: break-word;
            box-shadow: 0 2px 2px rgba(0, 0, 0, 0.2);
        }

        .datatable-table tbody tr:hover td,
        .datatable-table tbody tr:hover th {
            background-color: #76B900;
        }

        .dataTables_wrapper .dataTables_filter,
        .dataTables_wrapper .dataTables_paginate {
            position: sticky;
            top: 0;
            background-color: #fff;
            z-index: 1;
            border-radius: 5px;
            margin-bottom: 5px;
            padding: 5px;
            vertical-align: middle; /* Căn giữa theo chiều dọc */
        }

        .dataTables_wrapper {
            overflow-x: hidden;
        }

        .table-responsive {
            overflow-x: auto;
        }

        /* Căn chỉnh các cột trong row */
        .row.align-items-center {
            display: flex;
            align-items: stretch; /* Đảm bảo tất cả các cột có chiều cao bằng nhau */
        }

        .form-control {
            height: auto; /* Để textarea tự điều chỉnh chiều cao */
            resize: vertical; /* Cho phép kéo dãn theo chiều dọc */
        }

        /* Điều chỉnh độ rộng cột trong bảng */
        .datatable-table td, .datatable-table th {
            min-width: 120px; /* Đặt độ rộng tối thiểu cho mỗi cột */
            white-space: normal; /* Cho phép xuống dòng tự động */
            word-wrap: break-word; /* Xử lý từ dài */
            padding: 5px; /* Đảm bảo padding đủ để hiển thị */
        }
    </style>

    <script>
        let dcLcTable;

        // Hàm tạo nội dung cho ô với tooltip
        function createTooltipCell(data) {
            return `<span class="tooltip-trigger" data-tooltip="${data || ''}">${data || ''}</span>`;
        }

        // Gắn sự kiện tooltip sử dụng event delegation
        function attachTooltipEvents() {
            $(document).on('mouseover', '.tooltip-trigger', function (e) {
                const $this = $(this);
                const tooltipText = $this.data('tooltip');
                if (tooltipText) {
                    let tooltip = document.querySelector('.custom-tooltip');
                    if (!tooltip) {
                        tooltip = document.createElement('div');
                        tooltip.className = 'custom-tooltip';
                        document.body.appendChild(tooltip);
                    }
                    tooltip.textContent = tooltipText;
                    tooltip.style.display = 'block';
                    tooltip.style.left = (e.pageX + 10) + 'px';
                    tooltip.style.top = (e.pageY - 20) + 'px';
                }
            }).on('mousemove', '.tooltip-trigger', function (e) {
                const tooltip = document.querySelector('.custom-tooltip');
                if (tooltip && tooltip.style.display === 'block') {
                    tooltip.style.left = (e.pageX + 10) + 'px';
                    tooltip.style.top = (e.pageY - 20) + 'px';
                }
            }).on('mouseout', '.tooltip-trigger', function () {
                const tooltip = document.querySelector('.custom-tooltip');
                if (tooltip) {
                    tooltip.style.display = 'none';
                }
            });
        }

        $(document).ready(function () {
            // Khởi tạo DataTable
            dcLcTable = $('#dcLcTable').DataTable({
                pageLength: 10,
                scrollX: true,
                responsive: true,
                columnDefs: [
                    { targets: '_all', width: '150px' } // Đặt độ rộng cố định cho tất cả cột
                ]
            });

            // Gắn sự kiện tooltip
            attachTooltipEvents();
        });

        async function search() {
            const serialNumberText = document.getElementById('serialNumber').value.trim();
            const refDesText = document.getElementById('refDes').value.trim();

            // Tách các giá trị từ textarea thành mảng, bỏ qua dòng trống
            const serialNumbers = serialNumberText.split('\n').filter(s => s);
            const refDesValues = refDesText.split('\n').filter(r => r);

            if (serialNumbers.length === 0 || refDesValues.length === 0) {
                alert('Vui lòng nhập đầy đủ Serial Number và Reference Designator (ít nhất một giá trị mỗi ô)!');
                return;
            }

            // Làm mới bảng trước khi tìm kiếm
            dcLcTable.clear();

            // Hiển thị loading
            const loading = document.createElement('div');
            loading.textContent = 'Đang tải dữ liệu...';
            loading.style.position = 'fixed';
            loading.style.top = '50%';
            loading.style.left = '50%';
            loading.style.transform = 'translate(-50%, -50%)';
            document.body.appendChild(loading);

            try {
                // Lặp qua từng cặp SerialNumber và RefDes để gọi API
                for (let i = 0; i < Math.min(serialNumbers.length, refDesValues.length); i++) {
                    const serialNumber = serialNumbers[i];
                    const refDes = refDesValues[i];

                    const dcLcResponse = await fetch('http://10.220.130.119:9090/api/RepairStatus/info-allpart/with-refdes', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            type: 'GET_DC_LC',
                            item: 'BY-RE-SN',
                            var_1: serialNumber,
                            var_2: refDes
                        })
                    });

                    if (!dcLcResponse.ok) {
                        const errorText = await dcLcResponse.text();
                        throw new Error(`Lỗi khi gọi API GET_DC_LC cho ${serialNumber}/${refDes}: ${dcLcResponse.status} - ${errorText}`);
                    }

                    const dcLcData = await dcLcResponse.json();

                    if (!dcLcData || typeof dcLcData !== 'object' || Object.keys(dcLcData).length === 0) {
                        alert(`Không tìm thấy dữ liệu hợp lệ từ API cho ${serialNumber}/${refDes}!`);
                        continue;
                    }

                    // Thêm dữ liệu vào bảng
                    dcLcTable.row.add([
                        createTooltipCell(dcLcData.p_sn),
                        createTooltipCell(dcLcData.p_no),
                        createTooltipCell(dcLcData.kp_no),
                        createTooltipCell(dcLcData.mfr_kp_no),
                        createTooltipCell(dcLcData.mfr_name),
                        createTooltipCell(dcLcData.ref_des),
                        createTooltipCell(dcLcData.date_code),
                        createTooltipCell(dcLcData.lot_code),
                        createTooltipCell(dcLcData.process_flag),
                        createTooltipCell(dcLcData.station),
                        createTooltipCell(dcLcData.group_name),
                        createTooltipCell(dcLcData.work_time),
                        createTooltipCell(dcLcData.wo)
                    ]).draw();
                }

                // Gắn sự kiện tooltip
                attachTooltipEvents();

            } catch (error) {
                alert(`Đã xảy ra lỗi: ${error.message}`);
            } finally {
                // Xóa loading
                document.body.removeChild(loading);
            }
        }

        function downloadExcel() {
            const table = document.getElementById('dcLcTable');
            const wb = XLSX.utils.table_to_book(table, { sheet: "Sheet1" });
            const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
            const blob = new Blob([wbout], { type: 'application/octet-stream' });

            // Tạo URL tạm thời và kích hoạt tải xuống
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'data_dclc_' + new Date().toISOString().slice(0, 10) + '.xlsx';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url); // Giải phóng bộ nhớ
        }
    </script>
}