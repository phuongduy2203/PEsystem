using API_WEB.Models.Repositories;
using API_WEB.ModelsDB;
using API_WEB.ModelsOracle;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Oracle.ManagedDataAccess.Client;

namespace API_WEB.Controllers.Repositories
{
    [Route("api/[controller]")]
    [ApiController]
    public class Bonepile2Controller : ControllerBase
    {

        private readonly CSDL_NE _sqlContext;
        private readonly OracleDbContext _oracleContext;

        public Bonepile2Controller(CSDL_NE sqlContext, OracleDbContext oracleContext)
        {
            _sqlContext = sqlContext;
            _oracleContext = oracleContext;
        }

        //Đã link MO
        [HttpGet("count-link-mo")]
        public async Task<IActionResult> GetCountLinkMO()
        {
            try
            {
                string query = @"
                SELECT 
                    COUNT(*) AS total_count,
                    SUM(CASE 
                        WHEN days_since_first_test BETWEEN 0 AND 7 THEN 1 
                        ELSE 0 
                    END) AS count_1_to_7_days,
                    SUM(CASE 
                        WHEN days_since_first_test BETWEEN 8 AND 14 THEN 1 
                        ELSE 0 
                    END) AS count_8_to_14_days,
                    SUM(CASE 
                        WHEN days_since_first_test BETWEEN 15 AND 21 THEN 1 
                        ELSE 0 
                    END) AS count_15_to_21_days
                FROM (
                    SELECT 
                        ROUND(SYSDATE - (
                            SELECT MIN(r109_inner.test_time)
                            FROM sfism4.r109 r109_inner
                            WHERE r109_inner.serial_number = r109.serial_number
                        )) AS days_since_first_test
                    FROM 
                        sfism4.r109 r109
                    INNER JOIN 
                        sfism4.r107 r107
                        ON r109.serial_number = r107.serial_number
                    INNER JOIN 
                        SFIS1.C_MODEL_DESC_T c_model
                        ON r109.model_name = c_model.model_name
                    WHERE 
                        r107.error_flag = 0
                        AND r107.wip_group NOT LIKE '%B28M' AND r107.wip_group NOT LIKE '%B31M'
                        AND r109.test_group IN ('ICT', 'FT')
                        AND c_model.model_serial = 'ADAPTER'
                        AND r107.wip_group NOT LIKE '%B36R%'
                        AND r109.test_time = (
                            SELECT MAX(test_time)
                            FROM sfism4.r109 r109_inner
                            WHERE r109_inner.serial_number = r109.serial_number
                        )
                        AND (
                            SELECT MIN(r109_inner.test_time)
                            FROM sfism4.r109 r109_inner
                            WHERE r109_inner.serial_number = r109.serial_number
                        ) >= TO_DATE('2025-03-17', 'YYYY-MM-DD')
                        AND r109.serial_number NOT LIKE 'MT%'
                )";
                using (var connection = _oracleContext.Database.GetDbConnection() as OracleConnection)
                {
                    await connection.OpenAsync();
                    using (var command = new OracleCommand(query, connection))
                    {
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            if (await reader.ReadAsync())
                            {
                                int totalCount = reader.GetInt32(reader.GetOrdinal("total_count"));
                                int count1To7Days = reader.GetInt32(reader.GetOrdinal("count_1_to_7_days"));
                                int count8To14Days = reader.GetInt32(reader.GetOrdinal("count_8_to_14_days"));
                                int count15To21Days = reader.GetInt32(reader.GetOrdinal("count_15_to_21_days"));

                                return Ok(new
                                {
                                    success = true,
                                    totalCount = totalCount,
                                    count1To7Days = count1To7Days,
                                    count8To14Days = count8To14Days,
                                    count15To21Days = count15To21Days
                                });
                            }
                            else
                            {
                                // Nếu không có dữ liệu, trả về giá trị mặc định
                                return Ok(new
                                {
                                    success = true,
                                    totalCount = 0,
                                    count1To7Days = 0,
                                    count8To14Days = 0,
                                    count15To21Days = 0
                                });
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        [HttpGet("count-wait-link-mo")]
        public async Task<IActionResult> GetCountWaitLinkMo()
        {
            try
            {
                string query = @"
                     SELECT 
                        COUNT(*) AS total_count,
                        SUM(CASE 
                            WHEN days_since_first_test BETWEEN 0 AND 7 THEN 1 
                            ELSE 0 
                        END) AS count_1_to_7_days,
                        SUM(CASE 
                            WHEN days_since_first_test BETWEEN 8 AND 14 THEN 1 
                            ELSE 0 
                        END) AS count_8_to_14_days,
                        SUM(CASE 
                            WHEN days_since_first_test BETWEEN 15 AND 21 THEN 1 
                            ELSE 0 
                        END) AS count_15_to_21_days
                    FROM (
                        SELECT 
                            ROUND(SYSDATE - (
                                SELECT MIN(r109_inner.test_time)
                                FROM sfism4.r109 r109_inner
                                WHERE r109_inner.serial_number = r109.serial_number
                            )) AS days_since_first_test
                        FROM 
                            sfism4.r109 r109
                        INNER JOIN 
                            sfism4.r107 r107
                            ON r109.serial_number = r107.serial_number
                        INNER JOIN 
                            SFIS1.C_MODEL_DESC_T c_model
                            ON r109.model_name = c_model.model_name
                        WHERE 
                            r107.error_flag = 0
                            AND (r107.wip_group LIKE '%B28M' OR r107.wip_group LIKE '%B31M')
                            AND r109.test_group IN ('ICT', 'FT')
                            AND c_model.model_serial = 'ADAPTER'
                            AND r107.wip_group NOT LIKE '%B36R%'
                            AND r109.test_time = (
                                SELECT MAX(test_time)
                                FROM sfism4.r109 r109_inner
                                WHERE r109_inner.serial_number = r109.serial_number
                            )
                            AND (
                                SELECT MIN(r109_inner.test_time)
                                FROM sfism4.r109 r109_inner
                                WHERE r109_inner.serial_number = r109.serial_number
                            ) >= TO_DATE('2025-03-17', 'YYYY-MM-DD')
                            AND r109.serial_number NOT LIKE 'MT%')";
                using (var connection = _oracleContext.Database.GetDbConnection() as OracleConnection)
                {
                    await connection.OpenAsync();
                    using (var command = new OracleCommand(query, connection))
                    {
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            if (await reader.ReadAsync())
                            {
                                int totalCount = reader.GetInt32(reader.GetOrdinal("total_count"));
                                int count1To7Days = reader.GetInt32(reader.GetOrdinal("count_1_to_7_days"));
                                int count8To14Days = reader.GetInt32(reader.GetOrdinal("count_8_to_14_days"));
                                int count15To21Days = reader.GetInt32(reader.GetOrdinal("count_15_to_21_days"));

                                return Ok(new
                                {
                                    success = true,
                                    totalCount = totalCount,
                                    count1To7Days = count1To7Days,
                                    count8To14Days = count8To14Days,
                                    count15To21Days = count15To21Days
                                });
                            }
                            else
                            {
                                // Nếu không có dữ liệu, trả về giá trị mặc định
                                return Ok(new
                                {
                                    success = true,
                                    totalCount = 0,
                                    count1To7Days = 0,
                                    count8To14Days = 0,
                                    count15To21Days = 0
                                });
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        [HttpGet("count-In-RE")]
        public async Task<IActionResult> GetCountInRe()
        {
            try
            {
                string query = @"
            SELECT 
                COUNT(*) AS total_count,
                SUM(CASE 
                    WHEN days_since_first_test BETWEEN 0 AND 7 THEN 1 
                    ELSE 0 
                END) AS count_1_to_7_days,
                SUM(CASE 
                    WHEN days_since_first_test BETWEEN 8 AND 14 THEN 1 
                    ELSE 0 
                END) AS count_8_to_14_days,
                SUM(CASE 
                    WHEN days_since_first_test BETWEEN 15 AND 21 THEN 1 
                    ELSE 0 
                END) AS count_15_to_21_days
            FROM (
                SELECT 
                    ROUND(SYSDATE - (
                        SELECT MIN(r109_inner.test_time)
                        FROM sfism4.r109 r109_inner
                        WHERE r109_inner.serial_number = r109.serial_number
                    )) AS days_since_first_test
                FROM 
                    sfism4.r109 r109
                INNER JOIN 
                    sfism4.r107 r107
                    ON r109.serial_number = r107.serial_number
                INNER JOIN 
                    SFIS1.C_MODEL_DESC_T c_model
                    ON r109.model_name = c_model.model_name
                WHERE 
                    r107.error_flag = 7
                    AND r109.test_group IN ('ICT', 'FT')
                    AND c_model.model_serial = 'ADAPTER'
                    AND r107.wip_group NOT LIKE '%B36R%'
                    AND r109.test_time = (
                        SELECT MAX(test_time)
                        FROM sfism4.r109 r109_inner
                        WHERE r109_inner.serial_number = r109.serial_number
                    )
                    AND (
                        SELECT MIN(r109_inner.test_time)
                        FROM sfism4.r109 r109_inner
                        WHERE r109_inner.serial_number = r109.serial_number
                    ) >= TO_DATE('2025-03-17', 'YYYY-MM-DD')
                    AND r109.serial_number NOT LIKE 'MT%')";

                using (var connection = _oracleContext.Database.GetDbConnection() as OracleConnection)
                {
                    await connection.OpenAsync();
                    using (var command = new OracleCommand(query, connection))
                    {
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            if (await reader.ReadAsync())
                            {
                                int totalCount = reader.GetInt32(reader.GetOrdinal("total_count"));
                                int count1To7Days = reader.GetInt32(reader.GetOrdinal("count_1_to_7_days"));
                                int count8To14Days = reader.GetInt32(reader.GetOrdinal("count_8_to_14_days"));
                                int count15To21Days = reader.GetInt32(reader.GetOrdinal("count_15_to_21_days"));

                                return Ok(new
                                {
                                    success = true,
                                    totalCount = totalCount,
                                    count1To7Days = count1To7Days,
                                    count8To14Days = count8To14Days,
                                    count15To21Days = count15To21Days
                                });
                            }
                            else
                            {
                                // Nếu không có dữ liệu, trả về giá trị mặc định
                                return Ok(new
                                {
                                    success = true,
                                    totalCount = 0,
                                    count1To7Days = 0,
                                    count8To14Days = 0,
                                    count15To21Days = 0
                                });
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        [HttpGet("count-wait-checkout")]
        public async Task<IActionResult> GetCountWaitCheckOut()
        {
            try
            {
                string query = @"
                    SELECT 
                        COUNT(*) AS total_count,
                        SUM(CASE 
                            WHEN days_since_first_test BETWEEN 0 AND 7 THEN 1 
                            ELSE 0 
                        END) AS count_1_to_7_days,
                        SUM(CASE 
                            WHEN days_since_first_test BETWEEN 8 AND 14 THEN 1 
                            ELSE 0 
                        END) AS count_8_to_14_days,
                        SUM(CASE 
                            WHEN days_since_first_test BETWEEN 15 AND 21 THEN 1 
                            ELSE 0 
                        END) AS count_15_to_21_days
                    FROM (
                        SELECT 
                            ROUND(SYSDATE - (
                                SELECT MIN(r109_inner.test_time)
                                FROM sfism4.r109 r109_inner
                                WHERE r109_inner.serial_number = r109.serial_number
                            )) AS days_since_first_test
                        FROM 
                            sfism4.r109 r109
                        INNER JOIN 
                            sfism4.r107 r107
                            ON r109.serial_number = r107.serial_number
                        INNER JOIN 
                            SFIS1.C_MODEL_DESC_T c_model
                            ON r109.model_name = c_model.model_name
                        WHERE 
                            r107.error_flag = 8
                            AND r109.test_group IN ('ICT', 'FT')
                            AND c_model.model_serial = 'ADAPTER'
                            AND r107.wip_group NOT LIKE '%B36R%'
                            AND r109.test_time = (
                                SELECT MAX(test_time)
                                FROM sfism4.r109 r109_inner
                                WHERE r109_inner.serial_number = r109.serial_number
                            )
                            AND (
                                SELECT MIN(r109_inner.test_time)
                                FROM sfism4.r109 r109_inner
                                WHERE r109_inner.serial_number = r109.serial_number
                            ) >= TO_DATE('2025-03-17', 'YYYY-MM-DD')
                            AND r109.serial_number NOT LIKE 'MT%'
                    )";
                using (var connection = _oracleContext.Database.GetDbConnection() as OracleConnection)
                {
                    await connection.OpenAsync();
                    using (var command = new OracleCommand(query, connection))
                    {
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            if (await reader.ReadAsync())
                            {
                                int totalCount = reader.GetInt32(reader.GetOrdinal("total_count"));
                                int count1To7Days = reader.GetInt32(reader.GetOrdinal("count_1_to_7_days"));
                                int count8To14Days = reader.GetInt32(reader.GetOrdinal("count_8_to_14_days"));
                                int count15To21Days = reader.GetInt32(reader.GetOrdinal("count_15_to_21_days"));

                                return Ok(new
                                {
                                    success = true,
                                    totalCount = totalCount,
                                    count1To7Days = count1To7Days,
                                    count8To14Days = count8To14Days,
                                    count15To21Days = count15To21Days
                                });
                            }
                            else
                            {
                                // Nếu không có dữ liệu, trả về giá trị mặc định
                                return Ok(new
                                {
                                    success = true,
                                    totalCount = 0,
                                    count1To7Days = 0,
                                    count8To14Days = 0,
                                    count15To21Days = 0
                                });
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        [HttpGet("count-wait-checkin-RE")]
        public async Task<IActionResult> GetCountNoCheckIn()
        {
            try
            {
                string query = @"
                    SELECT 
                        COUNT(*) AS total_count,
                        SUM(CASE 
                            WHEN days_since_first_test BETWEEN 0 AND 7 THEN 1 
                            ELSE 0 
                        END) AS count_1_to_7_days,
                        SUM(CASE 
                            WHEN days_since_first_test BETWEEN 8 AND 14 THEN 1 
                            ELSE 0 
                        END) AS count_8_to_14_days,
                        SUM(CASE 
                            WHEN days_since_first_test BETWEEN 15 AND 21 THEN 1 
                            ELSE 0 
                        END) AS count_15_to_21_days
                    FROM (
                        SELECT 
                            ROUND(SYSDATE - (
                                SELECT MIN(r109_inner.test_time)
                                FROM sfism4.r109 r109_inner
                                WHERE r109_inner.serial_number = r109.serial_number
                            )) AS days_since_first_test
                        FROM 
                            sfism4.r109 r109
                        INNER JOIN 
                            sfism4.r107 r107
                            ON r109.serial_number = r107.serial_number
                        INNER JOIN 
                            SFIS1.C_MODEL_DESC_T c_model
                            ON r109.model_name = c_model.model_name
                        WHERE 
                            r107.error_flag = 1
                            AND r109.test_group IN ('ICT', 'FT')
                            AND c_model.model_serial = 'ADAPTER'
                            AND r107.wip_group NOT LIKE '%B36R%'
                            AND r109.test_time = (
                                SELECT MAX(test_time)
                                FROM sfism4.r109 r109_inner
                                WHERE r109_inner.serial_number = r109.serial_number
                            )
                            AND (
                                SELECT MIN(r109_inner.test_time)
                                FROM sfism4.r109 r109_inner
                                WHERE r109_inner.serial_number = r109.serial_number
                            ) >= TO_DATE('2025-03-17', 'YYYY-MM-DD')
                            AND r109.serial_number NOT LIKE 'MT%'
                    )";
                using (var connection = _oracleContext.Database.GetDbConnection() as OracleConnection)
                {
                    await connection.OpenAsync();
                    using (var command = new OracleCommand(query, connection))
                    {
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            if (await reader.ReadAsync())
                            {
                                int totalCount = reader.GetInt32(reader.GetOrdinal("total_count"));
                                int count1To7Days = reader.GetInt32(reader.GetOrdinal("count_1_to_7_days"));
                                int count8To14Days = reader.GetInt32(reader.GetOrdinal("count_8_to_14_days"));
                                int count15To21Days = reader.GetInt32(reader.GetOrdinal("count_15_to_21_days"));

                                return Ok(new
                                {
                                    success = true,
                                    totalCount = totalCount,
                                    count1To7Days = count1To7Days,
                                    count8To14Days = count8To14Days,
                                    count15To21Days = count15To21Days
                                });
                            }
                            else
                            {
                                // Nếu không có dữ liệu, trả về giá trị mặc định
                                return Ok(new
                                {
                                    success = true,
                                    totalCount = 0,
                                    count1To7Days = 0,
                                    count8To14Days = 0,
                                    count15To21Days = 0
                                });
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        //[HttpGet("pending-checkout-re")]
        //public async Task<IActionResult> GetPendingCheckOut()
        //{
        //    try
        //    {
        //        string query = @"
        //            SELECT 
        //                r109.serial_number,
        //                r109.model_name,
        //                r109.test_time,
        //                r109.TEST_GROUP,
        //                r109.test_code,
        //                r109.data1,
        //                r109.reason_code,
        //                r107.wip_group,
        //                ROUND(SYSDATE - (
        //                    SELECT MIN(r109_inner.test_time)
        //                    FROM sfism4.r109 r109_inner
        //                    WHERE r109_inner.serial_number = r109.serial_number
        //                )) AS days_since_first_test
        //            FROM 
        //                sfism4.r109 r109
        //            INNER JOIN 
        //                sfism4.r107 r107
        //                ON r109.serial_number = r107.serial_number
        //            INNER JOIN 
        //                SFIS1.C_MODEL_DESC_T c_model
        //                ON r109.model_name = c_model.model_name
        //            WHERE 
        //                r107.error_flag = 8
        //                AND r109.test_group IN ('ICT', 'FT')
        //                AND c_model.model_serial = 'ADAPTER'
        //                AND r109.test_time = (
        //                    SELECT MAX(test_time)
        //                    FROM sfism4.r109 r109_inner
        //                    WHERE r109_inner.serial_number = r109.serial_number
        //                )
        //                AND (
        //                    SELECT MIN(r109_inner.test_time)
        //                    FROM sfism4.r109 r109_inner
        //                    WHERE r109_inner.serial_number = r109.serial_number
        //                ) >= TO_DATE('2025-03-17', 'YYYY-MM-DD')
        //                AND r109.serial_number NOT LIKE 'MT%'";
        //        var serialNumbers = new List<SerialNumberInfo>();
        //        using (var connection = _oracleContext.Database.GetDbConnection() as OracleConnection)
        //        {
        //            await connection.OpenAsync();
        //            using (var command = new OracleCommand(query, connection))
        //            {
        //                using (var reader = await command.ExecuteReaderAsync())
        //                {
        //                    while (await reader.ReadAsync())
        //                    {
        //                        serialNumbers.Add(new SerialNumberInfo
        //                        {
        //                            SerialNumber = reader["serial_number"].ToString(),
        //                            ModelName = reader["model_name"].ToString(),
        //                            TestTime = Convert.ToDateTime(reader["test_time"]),
        //                            TestCode = reader["test_code"].ToString(),
        //                            Data1 = reader["data1"].ToString(),
        //                            ReasonCode = reader["reason_code"].ToString(),
        //                            WipGroup = reader["wip_group"].ToString()
        //                        });
        //                    }
        //                }
        //            }
        //        }
        //        return Ok(new { success = true, data = serialNumbers });
        //    }
        //    catch (Exception ex)
        //    {
        //        return StatusCode(500, new { success = false, message = ex.Message });
        //    }
        //}

        //[HttpPost("region-wip-in-re")]
        //public async Task<IActionResult> GetRegionWIPRE([FromBody] string region)
        //{
        //    try
        //    {
        //        // Chuyển đổi region từ string sang int, mặc định là 0 nếu không hợp lệ
        //        int regionValue = 0;
        //        if (!string.IsNullOrEmpty(region) && int.TryParse(region, out int parsedRegion))
        //        {
        //            regionValue = parsedRegion;
        //        }

        //        // Truy vấn với subquery
        //        string query = @"
        //    SELECT *
        //    FROM (
        //        SELECT 
        //            r109.serial_number,
        //            r109.model_name,
        //            r109.test_time,
        //            r109.TEST_GROUP,
        //            r109.test_code,
        //            r109.data1,
        //            r109.reason_code,
        //            r107.wip_group,
        //            ROUND(SYSDATE - (
        //                SELECT MIN(r109_inner.test_time)
        //                FROM sfism4.r109 r109_inner
        //                WHERE r109_inner.serial_number = r109.serial_number
        //            )) AS days_since_first_test
        //        FROM 
        //            sfism4.r109 r109
        //        INNER JOIN 
        //            sfism4.r107 r107
        //            ON r109.serial_number = r107.serial_number
        //        INNER JOIN 
        //            SFIS1.C_MODEL_DESC_T c_model
        //            ON r109.model_name = c_model.model_name
        //        WHERE 
        //            r107.error_flag = 7
        //            AND r109.test_group IN ('ICT', 'FT')
        //            AND c_model.model_serial = 'ADAPTER'
        //            AND r109.test_time = (
        //                SELECT MAX(test_time)
        //                FROM sfism4.r109 r109_inner
        //                WHERE r109_inner.serial_number = r109.serial_number
        //            )
        //            AND (
        //                SELECT MIN(r109_inner.test_time)
        //                FROM sfism4.r109 r109_inner
        //                WHERE r109_inner.serial_number = r109.serial_number
        //            ) >= TO_DATE('2025-03-17', 'YYYY-MM-DD')
        //            AND r109.serial_number NOT LIKE 'MT%'
        //    ) subquery";

        //        // Thêm điều kiện lọc theo vùng nếu có
        //        if (regionValue > 0)
        //        {
        //            string dayRangeCondition = regionValue switch
        //            {
        //                1 => "WHERE days_since_first_test BETWEEN 0 AND 7",
        //                2 => "WHERE days_since_first_test BETWEEN 8 AND 14",
        //                3 => "WHERE days_since_first_test BETWEEN 15 AND 21",
        //                _ => ""
        //            };
        //            query += " " + dayRangeCondition;
        //        }

        //        // Thêm ORDER BY
        //        query += " ORDER BY days_since_first_test DESC";

        //        using (var connection = _oracleContext.Database.GetDbConnection() as OracleConnection)
        //        {
        //            await connection.OpenAsync();
        //            using (var command = new OracleCommand(query, connection))
        //            {
        //                using (var reader = await command.ExecuteReaderAsync())
        //                {
        //                    var results = new List<object>();
        //                    while (await reader.ReadAsync())
        //                    {
        //                        results.Add(new
        //                        {
        //                            serialNumber = reader.GetString(reader.GetOrdinal("serial_number")),
        //                            modelName = reader.GetString(reader.GetOrdinal("model_name")),
        //                            testTime = reader.GetDateTime(reader.GetOrdinal("test_time")),
        //                            testGroup = reader.GetString(reader.GetOrdinal("TEST_GROUP")),
        //                            testCode = reader.GetString(reader.GetOrdinal("test_code")),
        //                            data1 = reader.IsDBNull(reader.GetOrdinal("data1")) ? null : reader.GetString(reader.GetOrdinal("data1")),
        //                            reasonCode = reader.IsDBNull(reader.GetOrdinal("reason_code")) ? null : reader.GetString(reader.GetOrdinal("reason_code")),
        //                            wipGroup = reader.GetString(reader.GetOrdinal("wip_group")),
        //                            daysSinceFirstTest = reader.GetDecimal(reader.GetOrdinal("days_since_first_test"))
        //                        });
        //                    }

        //                    return Ok(new
        //                    {
        //                        success = true,
        //                        region = regionValue,
        //                        totalCount = results.Count,
        //                        data = results
        //                    });
        //                }
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        return StatusCode(500, new
        //        {
        //            success = false,
        //            message = ex.Message
        //        });
        //    }
        //}

        [HttpPost("region-wip-in-re")]
        public async Task<IActionResult> GetRegionWIPRE([FromBody] string region)
        {
            try
            {
                // Chuyển đổi region từ string sang int, mặc định là 0 nếu không hợp lệ
                int regionValue = 0;
                if (!string.IsNullOrEmpty(region) && int.TryParse(region, out int parsedRegion))
                {
                    regionValue = parsedRegion;
                }

                // 1. Truy vấn dữ liệu từ Oracle
                string query = @"
                SELECT *
                FROM (
                    SELECT 
                        r109.serial_number,
                        r109.model_name,
                        r109.test_time,
                        r109.TEST_GROUP,
                        r109.test_code,
                        r109.data1,
                        r109.reason_code,
                        r107.wip_group,
                        ROUND(SYSDATE - (
                            SELECT MIN(r109_inner.test_time)
                            FROM sfism4.r109 r109_inner
                            WHERE r109_inner.serial_number = r109.serial_number
                        )) AS days_since_first_test
                    FROM 
                        sfism4.r109 r109
                    INNER JOIN 
                        sfism4.r107 r107
                        ON r109.serial_number = r107.serial_number
                    INNER JOIN 
                        SFIS1.C_MODEL_DESC_T c_model
                        ON r109.model_name = c_model.model_name
                    WHERE 
                        r107.error_flag = 7
                        AND r109.test_group IN ('ICT', 'FT')
                        AND c_model.model_serial = 'ADAPTER'
                        AND r107.wip_group NOT LIKE '%B36R%'
                        AND r109.test_time = (
                            SELECT MAX(test_time)
                            FROM sfism4.r109 r109_inner
                            WHERE r109_inner.serial_number = r109.serial_number
                        )
                        AND (
                            SELECT MIN(r109_inner.test_time)
                            FROM sfism4.r109 r109_inner
                            WHERE r109_inner.serial_number = r109.serial_number
                        ) >= TO_DATE('2025-03-17', 'YYYY-MM-DD')
                        AND r109.serial_number NOT LIKE 'MT%'
                ) subquery";

                // Thêm điều kiện lọc theo vùng nếu có
                if (regionValue > 0)
                {
                    string dayRangeCondition = regionValue switch
                    {
                        1 => "WHERE days_since_first_test BETWEEN 0 AND 7",
                        2 => "WHERE days_since_first_test BETWEEN 8 AND 14",
                        3 => "WHERE days_since_first_test BETWEEN 15 AND 21",
                        _ => ""
                    };
                    query += " " + dayRangeCondition;
                }

                // Thêm ORDER BY
                query += " ORDER BY days_since_first_test DESC";

                // 2. Thực hiện truy vấn Oracle
                var oracleResults = new List<dynamic>();
                using (var connection = _oracleContext.Database.GetDbConnection() as OracleConnection)
                {
                    await connection.OpenAsync();
                    using (var command = new OracleCommand(query, connection))
                    {
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                oracleResults.Add(new
                                {
                                    serialNumber = reader.GetString(reader.GetOrdinal("serial_number")),
                                    modelName = reader.GetString(reader.GetOrdinal("model_name")),
                                    testTime = reader.GetDateTime(reader.GetOrdinal("test_time")),
                                    testGroup = reader.GetString(reader.GetOrdinal("TEST_GROUP")),
                                    testCode = reader.GetString(reader.GetOrdinal("test_code")),
                                    data1 = reader.IsDBNull(reader.GetOrdinal("data1")) ? null : reader.GetString(reader.GetOrdinal("data1")),
                                    reasonCode = reader.IsDBNull(reader.GetOrdinal("reason_code")) ? null : reader.GetString(reader.GetOrdinal("reason_code")),
                                    wipGroup = reader.GetString(reader.GetOrdinal("wip_group")),
                                    daysSinceFirstTest = reader.GetDecimal(reader.GetOrdinal("days_since_first_test"))
                                });
                            }
                        }
                    }
                }

                // Log số lượng bản ghi từ Oracle
                Console.WriteLine($"Total records from Oracle: {oracleResults.Count}");
                if (oracleResults.Any())
                {
                    Console.WriteLine($"Sample Serial Numbers from Oracle: {string.Join(", ", oracleResults.Take(5).Select(r => r.serialNumber))}");
                }

                // 3. Lấy danh sách Serial Numbers để truy vấn SQL Server
                var serialNumbers = oracleResults.Select(r => r.serialNumber).ToList();
                if (!serialNumbers.Any())
                {
                    return Ok(new
                    {
                        success = true,
                        region = regionValue,
                        totalCount = 0,
                        data = new List<object>()
                    });
                }

                // 4. Truy vấn bảng Product trong SQL Server để lấy thông tin vị trí, bao gồm Shelf
                var products = await _sqlContext.Products
                    .Include(p => p.Shelf) // Bao gồm bảng liên quan Shelf
                    .Where(p => serialNumbers.Contains(p.SerialNumber))
                    .Select(p => new
                    {
                        p.SerialNumber,
                        ShelfCode = p.Shelf != null ? p.Shelf.ShelfCode : null, // Lấy ShelfCode từ bảng Shelf
                        p.ColumnNumber,
                        p.LevelNumber,
                        p.TrayNumber,
                        p.PositionInTray,
                        p.Note,
                        p.Action
                    })
                    .ToListAsync();

                // Log số lượng bản ghi từ SQL Server
                Console.WriteLine($"Total records from SQL Server (Product): {products.Count}");
                if (products.Any())
                {
                    Console.WriteLine($"Sample Serial Numbers from SQL Server: {string.Join(", ", products.Take(5).Select(p => p.SerialNumber))}");
                    Console.WriteLine($"Sample ShelfCodes from SQL Server: {string.Join(", ", products.Take(5).Select(p => p.ShelfCode ?? "null"))}");
                }

                // 5. Kết hợp dữ liệu từ Oracle và SQL Server
                var combinedResults = oracleResults.Select(oracleResult =>
                {
                    var product = products.FirstOrDefault(p => p.SerialNumber == oracleResult.serialNumber);
                    return new
                    {
                        serialNumber = oracleResult.serialNumber,
                        modelName = oracleResult.modelName,
                        testTime = oracleResult.testTime,
                        testGroup = oracleResult.testGroup,
                        testCode = oracleResult.testCode,
                        data1 = oracleResult.data1,
                        reasonCode = oracleResult.reasonCode,
                        wipGroup = oracleResult.wipGroup,
                        daysSinceFirstTest = oracleResult.daysSinceFirstTest,
                        shelfCode = product?.ShelfCode ?? "", // Sử dụng ShelfCode từ bảng Shelf
                        columnNumber = product?.ColumnNumber,
                        levelNumber = product?.LevelNumber,
                        trayNumber = product?.TrayNumber,
                        positionInTray = product?.PositionInTray,
                        note = product?.Note,
                        action = product?.Action
                    };
                }).ToList();

                // Log số lượng bản ghi sau khi kết hợp
                Console.WriteLine($"Total combined records: {combinedResults.Count}");

                // 6. Trả về kết quả
                return Ok(new
                {
                    success = true,
                    region = regionValue,
                    totalCount = combinedResults.Count,
                    data = combinedResults
                });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }

        [HttpPost("region-wip-wait-out-re")]
        public async Task<IActionResult> GetRegionWaitCheckOut([FromBody] string region)
        {
            try
            {
                // Chuyển đổi region từ string sang int, mặc định là 0 nếu không hợp lệ
                int regionValue = 0;
                if (!string.IsNullOrEmpty(region) && int.TryParse(region, out int parsedRegion))
                {
                    regionValue = parsedRegion;
                }

                // Truy vấn với subquery
                string query = @"
            SELECT *
            FROM (
                SELECT 
                    r109.serial_number,
                    r109.model_name,
                    r109.test_time,
                    r109.TEST_GROUP,
                    r109.test_code,
                    r109.data1,
                    r109.reason_code,
                    r107.wip_group,
                    ROUND(SYSDATE - (
                        SELECT MIN(r109_inner.test_time)
                        FROM sfism4.r109 r109_inner
                        WHERE r109_inner.serial_number = r109.serial_number
                    )) AS days_since_first_test
                FROM 
                    sfism4.r109 r109
                INNER JOIN 
                    sfism4.r107 r107
                    ON r109.serial_number = r107.serial_number
                INNER JOIN 
                    SFIS1.C_MODEL_DESC_T c_model
                    ON r109.model_name = c_model.model_name
                WHERE 
                    r107.error_flag = 8
                    AND r109.test_group IN ('ICT', 'FT')
                    AND c_model.model_serial = 'ADAPTER'
                    AND r107.wip_group NOT LIKE '%B36R%'
                    AND r109.test_time = (
                        SELECT MAX(test_time)
                        FROM sfism4.r109 r109_inner
                        WHERE r109_inner.serial_number = r109.serial_number
                    )
                    AND (
                        SELECT MIN(r109_inner.test_time)
                        FROM sfism4.r109 r109_inner
                        WHERE r109_inner.serial_number = r109.serial_number
                    ) >= TO_DATE('2025-03-17', 'YYYY-MM-DD')
                    AND r109.serial_number NOT LIKE 'MT%'
            ) subquery";

                // Thêm điều kiện lọc theo vùng nếu có
                if (regionValue > 0)
                {
                    string dayRangeCondition = regionValue switch
                    {
                        1 => "WHERE days_since_first_test BETWEEN 0 AND 7",
                        2 => "WHERE days_since_first_test BETWEEN 8 AND 14",
                        3 => "WHERE days_since_first_test BETWEEN 15 AND 21",
                        _ => ""
                    };
                    query += " " + dayRangeCondition;
                }

                // Thêm ORDER BY
                query += " ORDER BY days_since_first_test DESC";
                var oracleResults = new List<dynamic>();
                using (var connection = _oracleContext.Database.GetDbConnection() as OracleConnection)
                {
                    await connection.OpenAsync();
                    using (var command = new OracleCommand(query, connection))
                    {
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                oracleResults.Add(new
                                {
                                    serialNumber = reader.GetString(reader.GetOrdinal("serial_number")),
                                    modelName = reader.GetString(reader.GetOrdinal("model_name")),
                                    testTime = reader.GetDateTime(reader.GetOrdinal("test_time")),
                                    testGroup = reader.GetString(reader.GetOrdinal("TEST_GROUP")),
                                    testCode = reader.GetString(reader.GetOrdinal("test_code")),
                                    data1 = reader.IsDBNull(reader.GetOrdinal("data1")) ? null : reader.GetString(reader.GetOrdinal("data1")),
                                    reasonCode = reader.IsDBNull(reader.GetOrdinal("reason_code")) ? null : reader.GetString(reader.GetOrdinal("reason_code")),
                                    wipGroup = reader.GetString(reader.GetOrdinal("wip_group")),
                                    daysSinceFirstTest = reader.GetDecimal(reader.GetOrdinal("days_since_first_test"))
                                });
                            }
                        }
                    }
                }
                // 3. Lấy danh sách Serial Numbers để truy vấn SQL Server
                var serialNumbers = oracleResults.Select(r => r.serialNumber).ToList();
                if (!serialNumbers.Any())
                {
                    return Ok(new
                    {
                        success = true,
                        region = regionValue,
                        totalCount = 0,
                        data = new List<object>()
                    });
                }
                // 4.Truy vấn bảng Product trong SQL Server để lấy thông tin vị trí, bao gồm Shelf
                var products = await _sqlContext.Products
                    .Include(p => p.Shelf) // Bao gồm bảng liên quan Shelf
                    .Where(p => serialNumbers.Contains(p.SerialNumber))
                    .Select(p => new
                    {
                        p.SerialNumber,
                        ShelfCode = p.Shelf != null ? p.Shelf.ShelfCode : null, // Lấy ShelfCode từ bảng Shelf
                        p.ColumnNumber,
                        p.LevelNumber,
                        p.TrayNumber,
                        p.PositionInTray,
                        p.Note,
                        p.Action
                    }).ToListAsync();

                // 5. Kết hợp dữ liệu từ Oracle và SQL Server
                var combinedResults = oracleResults.Select(oracleResult =>
                {
                    var product = products.FirstOrDefault(p => p.SerialNumber == oracleResult.serialNumber);
                    return new
                    {
                        serialNumber = oracleResult.serialNumber,
                        modelName = oracleResult.modelName,
                        testTime = oracleResult.testTime,
                        testGroup = oracleResult.testGroup,
                        testCode = oracleResult.testCode,
                        data1 = oracleResult.data1,
                        reasonCode = oracleResult.reasonCode,
                        wipGroup = oracleResult.wipGroup,
                        daysSinceFirstTest = oracleResult.daysSinceFirstTest,
                        shelfCode = product?.ShelfCode ?? "", // Sử dụng ShelfCode từ bảng Shelf
                        columnNumber = product?.ColumnNumber,
                        levelNumber = product?.LevelNumber,
                        trayNumber = product?.TrayNumber,
                        positionInTray = product?.PositionInTray,
                        note = product?.Note,
                        action = product?.Action
                    };
                }).ToList();

                return Ok(new
                {
                    success = true,
                    region = regionValue,
                    totalCount = combinedResults.Count,
                    data = combinedResults
                });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }

        [HttpPost("region-wip-wait-check-in")]
        public async Task<IActionResult> GetRegionWaitCheckIn([FromBody] string region)
        {
            try
            {
                // Chuyển đổi region từ string sang int, mặc định là 0 nếu không hợp lệ
                int regionValue = 0;
                if (!string.IsNullOrEmpty(region) && int.TryParse(region, out int parsedRegion))
                {
                    regionValue = parsedRegion;
                }

                // Truy vấn với subquery
                string query = @"
            SELECT *
            FROM (
                SELECT 
                    r109.serial_number,
                    r109.model_name,
                    r109.test_time,
                    r109.TEST_GROUP,
                    r109.test_code,
                    r109.data1,
                    r109.reason_code,
                    r107.wip_group,
                    ROUND(SYSDATE - (
                        SELECT MIN(r109_inner.test_time)
                        FROM sfism4.r109 r109_inner
                        WHERE r109_inner.serial_number = r109.serial_number
                    )) AS days_since_first_test
                FROM 
                    sfism4.r109 r109
                INNER JOIN 
                    sfism4.r107 r107
                    ON r109.serial_number = r107.serial_number
                INNER JOIN 
                    SFIS1.C_MODEL_DESC_T c_model
                    ON r109.model_name = c_model.model_name
                WHERE 
                    r107.error_flag = 1
                    AND r109.test_group IN ('ICT', 'FT')
                    AND c_model.model_serial = 'ADAPTER'
                    AND r107.wip_group NOT LIKE '%B36R%'
                    AND r109.test_time = (
                        SELECT MAX(test_time)
                        FROM sfism4.r109 r109_inner
                        WHERE r109_inner.serial_number = r109.serial_number
                    )
                    AND (
                        SELECT MIN(r109_inner.test_time)
                        FROM sfism4.r109 r109_inner
                        WHERE r109_inner.serial_number = r109.serial_number
                    ) >= TO_DATE('2025-03-17', 'YYYY-MM-DD')
                    AND r109.serial_number NOT LIKE 'MT%'
            ) subquery";

                // Thêm điều kiện lọc theo vùng nếu có
                if (regionValue > 0)
                {
                    string dayRangeCondition = regionValue switch
                    {
                        1 => "WHERE days_since_first_test BETWEEN 0 AND 7",
                        2 => "WHERE days_since_first_test BETWEEN 8 AND 14",
                        3 => "WHERE days_since_first_test BETWEEN 15 AND 21",
                        _ => ""
                    };
                    query += " " + dayRangeCondition;
                }

                // Thêm ORDER BY
                query += " ORDER BY days_since_first_test DESC";

                var oracleResults = new List<dynamic>();
                using (var connection = _oracleContext.Database.GetDbConnection() as OracleConnection)
                {
                    await connection.OpenAsync();
                    using (var command = new OracleCommand(query, connection))
                    {
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                oracleResults.Add(new
                                {
                                    serialNumber = reader.GetString(reader.GetOrdinal("serial_number")),
                                    modelName = reader.GetString(reader.GetOrdinal("model_name")),
                                    testTime = reader.GetDateTime(reader.GetOrdinal("test_time")),
                                    testGroup = reader.GetString(reader.GetOrdinal("TEST_GROUP")),
                                    testCode = reader.GetString(reader.GetOrdinal("test_code")),
                                    data1 = reader.IsDBNull(reader.GetOrdinal("data1")) ? null : reader.GetString(reader.GetOrdinal("data1")),
                                    reasonCode = reader.IsDBNull(reader.GetOrdinal("reason_code")) ? null : reader.GetString(reader.GetOrdinal("reason_code")),
                                    wipGroup = reader.GetString(reader.GetOrdinal("wip_group")),
                                    daysSinceFirstTest = reader.GetDecimal(reader.GetOrdinal("days_since_first_test"))
                                });
                            }
                        }
                    }
                }
                // 3. Lấy danh sách Serial Numbers để truy vấn SQL Server
                var serialNumbers = oracleResults.Select(r => r.serialNumber).ToList();
                if (!serialNumbers.Any())
                {
                    return Ok(new
                    {
                        success = true,
                        region = regionValue,
                        totalCount = 0,
                        data = new List<object>()
                    });
                }
                // 4. Truy vấn bảng Product trong SQL Server để lấy thông tin vị trí, bao gồm Shelf
                var products = await _sqlContext.Products
                    .Include(p => p.Shelf) // Bao gồm bảng liên quan Shelf
                    .Where(p => serialNumbers.Contains(p.SerialNumber))
                    .Select(p => new
                    {
                        p.SerialNumber,
                        ShelfCode = p.Shelf != null ? p.Shelf.ShelfCode : null, // Lấy ShelfCode từ bảng Shelf
                        p.ColumnNumber,
                        p.LevelNumber,
                        p.TrayNumber,
                        p.PositionInTray,
                        p.Note,
                        p.Action
                    }).ToListAsync();
                // 5. Kết hợp dữ liệu từ Oracle và SQL Server
                var combinedResults = oracleResults.Select(oracleResult =>
                {
                    var product = products.FirstOrDefault(p => p.SerialNumber == oracleResult.serialNumber);
                    return new
                    {
                        serialNumber = oracleResult.serialNumber,
                        modelName = oracleResult.modelName,
                        testTime = oracleResult.testTime,
                        testGroup = oracleResult.testGroup,
                        testCode = oracleResult.testCode,
                        data1 = oracleResult.data1,
                        reasonCode = oracleResult.reasonCode,
                        wipGroup = oracleResult.wipGroup,
                        daysSinceFirstTest = oracleResult.daysSinceFirstTest,
                        shelfCode = product?.ShelfCode ?? "", // Sử dụng ShelfCode từ bảng Shelf
                        columnNumber = product?.ColumnNumber,
                        levelNumber = product?.LevelNumber,
                        trayNumber = product?.TrayNumber,
                        positionInTray = product?.PositionInTray,
                        note = product?.Note,
                        action = product?.Action
                    };
                }).ToList();
                // 6. Trả về kết quả
                return Ok(new
                {
                    success = true,
                    region = regionValue,
                    totalCount = combinedResults.Count,
                    data = combinedResults
                });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }

        [HttpPost("region-wip-wait-link-mo")]
        public async Task<IActionResult> GetRegionWaitLinkMO([FromBody] string region)
        {
            try
            {
                // Chuyển đổi region từ string sang int, mặc định là 0 nếu không hợp lệ
                int regionValue = 0;
                if (!string.IsNullOrEmpty(region) && int.TryParse(region, out int parsedRegion))
                {
                    regionValue = parsedRegion;
                }

                // Truy vấn với subquery
                string query = @"
            SELECT *
            FROM (
                SELECT 
                    r109.serial_number,
                    r109.model_name,
                    r109.test_time,
                    r109.TEST_GROUP,
                    r109.test_code,
                    r109.data1,
                    r109.reason_code,
                    r107.wip_group,
                    ROUND(SYSDATE - (
                        SELECT MIN(r109_inner.test_time)
                        FROM sfism4.r109 r109_inner
                        WHERE r109_inner.serial_number = r109.serial_number
                    )) AS days_since_first_test
                FROM 
                    sfism4.r109 r109
                INNER JOIN 
                    sfism4.r107 r107
                    ON r109.serial_number = r107.serial_number
                INNER JOIN 
                    SFIS1.C_MODEL_DESC_T c_model
                    ON r109.model_name = c_model.model_name
                WHERE 
                    r107.error_flag = 0
                    AND r107.wip_group LIKE '%B28M%' OR r107.wip_group LIKE '%B31M%'
                    AND r109.test_group IN ('ICT', 'FT')
                    AND c_model.model_serial = 'ADAPTER'
                    AND r109.test_time = (
                        SELECT MAX(test_time)
                        FROM sfism4.r109 r109_inner
                        WHERE r109_inner.serial_number = r109.serial_number
                    )
                    AND (
                        SELECT MIN(r109_inner.test_time)
                        FROM sfism4.r109 r109_inner
                        WHERE r109_inner.serial_number = r109.serial_number
                    ) >= TO_DATE('2025-03-17', 'YYYY-MM-DD')
                    AND r109.serial_number NOT LIKE 'MT%'
            ) subquery";

                // Thêm điều kiện lọc theo vùng nếu có
                if (regionValue > 0)
                {
                    string dayRangeCondition = regionValue switch
                    {
                        1 => "WHERE days_since_first_test BETWEEN 0 AND 7",
                        2 => "WHERE days_since_first_test BETWEEN 8 AND 14",
                        3 => "WHERE days_since_first_test BETWEEN 15 AND 21",
                        _ => ""
                    };
                    query += " " + dayRangeCondition;
                }

                // Thêm ORDER BY
                query += " ORDER BY days_since_first_test DESC";

                var oracleResults = new List<dynamic>();

                using (var connection = _oracleContext.Database.GetDbConnection() as OracleConnection)
                {
                    await connection.OpenAsync();
                    using (var command = new OracleCommand(query, connection))
                    {
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                oracleResults.Add(new
                                {
                                    serialNumber = reader.GetString(reader.GetOrdinal("serial_number")),
                                    modelName = reader.GetString(reader.GetOrdinal("model_name")),
                                    testTime = reader.GetDateTime(reader.GetOrdinal("test_time")),
                                    testGroup = reader.GetString(reader.GetOrdinal("TEST_GROUP")),
                                    testCode = reader.GetString(reader.GetOrdinal("test_code")),
                                    data1 = reader.IsDBNull(reader.GetOrdinal("data1")) ? null : reader.GetString(reader.GetOrdinal("data1")),
                                    reasonCode = reader.IsDBNull(reader.GetOrdinal("reason_code")) ? null : reader.GetString(reader.GetOrdinal("reason_code")),
                                    wipGroup = reader.GetString(reader.GetOrdinal("wip_group")),
                                    daysSinceFirstTest = reader.GetDecimal(reader.GetOrdinal("days_since_first_test"))
                                });
                            }
                        }
                    }
                }
                // 3. Lấy danh sách Serial Numbers để truy vấn SQL Server
                var serialNumbers = oracleResults.Select(r => r.serialNumber).ToList();
                if (!serialNumbers.Any())
                {
                    return Ok(new
                    {
                        success = true,
                        region = regionValue,
                        totalCount = 0,
                        data = new List<object>()
                    });
                }
                // 4. Truy vấn bảng Product trong SQL Server để lấy thông tin vị trí, bao gồm Shelf
                var products = await _sqlContext.Products
                .Include(p => p.Shelf) // Bao gồm bảng liên quan Shelf
                .Where(p => serialNumbers.Contains(p.SerialNumber))
                .Select(p => new
                {
                    p.SerialNumber,
                    ShelfCode = p.Shelf != null ? p.Shelf.ShelfCode : null, // Lấy ShelfCode từ bảng Shelf
                    p.ColumnNumber,
                    p.LevelNumber,
                    p.TrayNumber,
                    p.PositionInTray,
                    p.Note,
                    p.Action
                })
                .ToListAsync();
                // 5. Kết hợp dữ liệu từ Oracle và SQL Server
                var combinedResults = oracleResults.Select(oracleResult =>
                {
                    var product = products.FirstOrDefault(p => p.SerialNumber == oracleResult.serialNumber);
                    return new
                    {
                        serialNumber = oracleResult.serialNumber,
                        modelName = oracleResult.modelName,
                        testTime = oracleResult.testTime,
                        testGroup = oracleResult.testGroup,
                        testCode = oracleResult.testCode,
                        data1 = oracleResult.data1,
                        reasonCode = oracleResult.reasonCode,
                        wipGroup = oracleResult.wipGroup,
                        daysSinceFirstTest = oracleResult.daysSinceFirstTest,
                        shelfCode = product?.ShelfCode ?? "", // Sử dụng ShelfCode từ bảng Shelf
                        columnNumber = product?.ColumnNumber,
                        levelNumber = product?.LevelNumber,
                        trayNumber = product?.TrayNumber,
                        positionInTray = product?.PositionInTray,
                        note = product?.Note,
                        action = product?.Action
                    };
                }).ToList();
                // 6. Trả về kết quả
                return Ok(new
                {
                    success = true,
                    region = regionValue,
                    totalCount = combinedResults.Count,
                    data = combinedResults
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }

        [HttpPost("region-wip-link-mo")]
        public async Task<IActionResult> GetRegionLinkMO([FromBody] string region)
        {
            try
            {
                // Chuyển đổi region từ string sang int, mặc định là 0 nếu không hợp lệ
                int regionValue = 0;
                if (!string.IsNullOrEmpty(region) && int.TryParse(region, out int parsedRegion))
                {
                    regionValue = parsedRegion;
                }

                // Truy vấn với subquery
                string query = @"
            SELECT *
            FROM (
                SELECT 
                    r109.serial_number,
                    r109.model_name,
                    r109.test_time,
                    r109.TEST_GROUP,
                    r109.test_code,
                    r109.data1,
                    r109.reason_code,
                    r107.wip_group,
                    ROUND(SYSDATE - (
                        SELECT MIN(r109_inner.test_time)
                        FROM sfism4.r109 r109_inner
                        WHERE r109_inner.serial_number = r109.serial_number
                    )) AS days_since_first_test
                FROM 
                    sfism4.r109 r109
                INNER JOIN 
                    sfism4.r107 r107
                    ON r109.serial_number = r107.serial_number
                INNER JOIN 
                    SFIS1.C_MODEL_DESC_T c_model
                    ON r109.model_name = c_model.model_name
                WHERE 
                    r107.error_flag = 0
                    AND r107.wip_group NOT LIKE '%B28M%' AND r107.wip_group NOT LIKE '%B31M%'
                    AND r109.test_group IN ('ICT', 'FT')
                    AND c_model.model_serial = 'ADAPTER'
                    AND r107.wip_group NOT LIKE '%B36R%'
                    AND r109.test_time = (
                        SELECT MAX(test_time)
                        FROM sfism4.r109 r109_inner
                        WHERE r109_inner.serial_number = r109.serial_number
                    )
                    AND (
                        SELECT MIN(r109_inner.test_time)
                        FROM sfism4.r109 r109_inner
                        WHERE r109_inner.serial_number = r109.serial_number
                    ) >= TO_DATE('2025-03-17', 'YYYY-MM-DD')
                    AND r109.serial_number NOT LIKE 'MT%'
            ) subquery";

                // Thêm điều kiện lọc theo vùng nếu có
                if (regionValue > 0)
                {
                    string dayRangeCondition = regionValue switch
                    {
                        1 => "WHERE days_since_first_test BETWEEN 0 AND 7",
                        2 => "WHERE days_since_first_test BETWEEN 8 AND 14",
                        3 => "WHERE days_since_first_test BETWEEN 15 AND 21",
                        _ => ""
                    };
                    query += " " + dayRangeCondition;
                }

                // Thêm ORDER BY
                query += " ORDER BY days_since_first_test DESC";

                var oracleResults = new List<dynamic>();

                using (var connection = _oracleContext.Database.GetDbConnection() as OracleConnection)
                {
                    await connection.OpenAsync();
                    using (var command = new OracleCommand(query, connection))
                    {
                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                oracleResults.Add(new
                                {
                                    serialNumber = reader.GetString(reader.GetOrdinal("serial_number")),
                                    modelName = reader.GetString(reader.GetOrdinal("model_name")),
                                    testTime = reader.GetDateTime(reader.GetOrdinal("test_time")),
                                    testGroup = reader.GetString(reader.GetOrdinal("TEST_GROUP")),
                                    testCode = reader.GetString(reader.GetOrdinal("test_code")),
                                    data1 = reader.IsDBNull(reader.GetOrdinal("data1")) ? null : reader.GetString(reader.GetOrdinal("data1")),
                                    reasonCode = reader.IsDBNull(reader.GetOrdinal("reason_code")) ? null : reader.GetString(reader.GetOrdinal("reason_code")),
                                    wipGroup = reader.GetString(reader.GetOrdinal("wip_group")),
                                    daysSinceFirstTest = reader.GetDecimal(reader.GetOrdinal("days_since_first_test"))
                                });
                            }
                        }
                    }
                }
                // 3. Lấy danh sách Serial Numbers để truy vấn SQL Server
                var serialNumbers = oracleResults.Select(r => r.serialNumber).ToList();
                if (!serialNumbers.Any())
                {
                    return Ok(new
                    {
                        success = true,
                        region = regionValue,
                        totalCount = 0,
                        data = new List<object>()
                    });
                }
                // 4. Truy vấn bảng Product trong SQL Server để lấy thông tin vị trí, bao gồm Shelf
                var products = await _sqlContext.Products
                    .Include(p => p.Shelf) // Bao gồm bảng liên quan Shelf
                    .Where(p => serialNumbers.Contains(p.SerialNumber))
                    .Select(p => new
                    {
                        p.SerialNumber,
                        ShelfCode = p.Shelf != null ? p.Shelf.ShelfCode : null, // Lấy ShelfCode từ bảng Shelf
                        p.ColumnNumber,
                        p.LevelNumber,
                        p.TrayNumber,
                        p.PositionInTray,
                        p.Note,
                        p.Action
                    }).ToListAsync();
                // 5. Kết hợp dữ liệu từ Oracle và SQL Server
                var combinedResults = oracleResults.Select(oracleResult =>
                {
                    var product = products.FirstOrDefault(p => p.SerialNumber == oracleResult.serialNumber);
                    return new
                    {
                        serialNumber = oracleResult.serialNumber,
                        modelName = oracleResult.modelName,
                        testTime = oracleResult.testTime,
                        testGroup = oracleResult.testGroup,
                        testCode = oracleResult.testCode,
                        data1 = oracleResult.data1,
                        reasonCode = oracleResult.reasonCode,
                        wipGroup = oracleResult.wipGroup,
                        daysSinceFirstTest = oracleResult.daysSinceFirstTest,
                        shelfCode = product?.ShelfCode ?? "", // Sử dụng ShelfCode từ bảng Shelf
                        columnNumber = product?.ColumnNumber,
                        levelNumber = product?.LevelNumber,
                        trayNumber = product?.TrayNumber,
                        positionInTray = product?.PositionInTray,
                        note = product?.Note,
                        action = product?.Action
                    };
                }).ToList();

                // 6. Trả về kết quả
                return Ok(new
                {
                    success = true,
                    region = regionValue,
                    totalCount = combinedResults.Count,
                    data = combinedResults
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }
    }
}
