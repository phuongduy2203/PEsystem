using API_WEB.Models.Bonepile;
using API_WEB.ModelsOracle;
using Microsoft.EntityFrameworkCore;
using OfficeOpenXml;
using Oracle.ManagedDataAccess.Client;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace API_WEB.Services.Bonepile
{
    public class BonepileAfterRepository : IBonepileAfterRepository
    {
        private readonly OracleDbContext _oracleContext;

        public BonepileAfterRepository(OracleDbContext oracleContext)
        {
            _oracleContext = oracleContext;
        }

        public async Task<List<BonepileAfterKanbanResult>> ExecuteBonepileAfterKanbanBasicQueryAsync(CancellationToken cancellationToken)
        {
            var result = new List<BonepileAfterKanbanResult>();

            await using var connection = new OracleConnection(_oracleContext.Database.GetDbConnection().ConnectionString);
            await connection.OpenAsync(cancellationToken);

            const string query = @"
SELECT
    A.SERIAL_NUMBER,
    R107.MO_NUMBER,
    A.MODEL_NAME,
    B.PRODUCT_LINE,
    A.WIP_GROUP AS WIP_GROUP_KANBAN,
    R107.WIP_GROUP AS WIP_GROUP_SFC,
    R107.ERROR_FLAG,
    R107.WORK_FLAG,
    COALESCE(C1.TEST_GROUP, R109X.LATEST_TEST_GROUP) AS TEST_GROUP,
    COALESCE(C1.TEST_TIME,  R109X.LATEST_TEST_TIME)  AS TEST_TIME,
    COALESCE(C1.TEST_CODE,  R109X.LATEST_TEST_CODE)  AS TEST_CODE,
    COALESCE(C1.ERROR_ITEM_CODE,  R109X.LATEST_ERROR_ITEM_CODE)  AS ERROR_ITEM_CODE,
    COALESCE(E1.ERROR_DESC, E2.ERROR_DESC) AS ERROR_DESC,
    TRUNC(SYSDATE) - TRUNC(COALESCE(C1.TEST_TIME, R109X.LATEST_TEST_TIME)) AS AGING
FROM SFISM4.Z_KANBAN_TRACKING_T A
JOIN SFIS1.C_MODEL_DESC_T B
  ON A.MODEL_NAME = B.MODEL_NAME
JOIN SFISM4.R107 R107
  ON R107.SERIAL_NUMBER = A.SERIAL_NUMBER

-- Lấy bản ghi REPAIR mới nhất theo TEST_TIME cho từng SERIAL_NUMBER
LEFT JOIN (
    SELECT
        R.SERIAL_NUMBER,
        MAX(R.TEST_TIME) AS TEST_TIME,
        MAX(R.TEST_CODE)  KEEP (DENSE_RANK LAST ORDER BY R.TEST_TIME) AS TEST_CODE,
        MAX(R.TEST_GROUP) KEEP (DENSE_RANK LAST ORDER BY R.TEST_TIME) AS TEST_GROUP,
        MAX(R.ERROR_ITEM_CODE) KEEP (DENSE_RANK LAST ORDER BY R.TEST_TIME) AS ERROR_ITEM_CODE
    FROM SFISM4.R_REPAIR_TASK_DETAIL_T R
    WHERE R.TEST_TIME IS NOT NULL
    GROUP BY R.SERIAL_NUMBER
) C1
  ON C1.SERIAL_NUMBER = A.SERIAL_NUMBER

LEFT JOIN (
    SELECT
        K.KEY_PART_SN,
        MAX(K.SERIAL_NUMBER) KEEP (DENSE_RANK LAST ORDER BY K.WORK_TIME) AS PARENT_SN
    FROM SFISM4.P_WIP_KEYPARTS_T K
    WHERE K.WORK_TIME IS NOT NULL
    GROUP BY K.KEY_PART_SN
) KP
  ON KP.KEY_PART_SN = A.SERIAL_NUMBER

LEFT JOIN (
    SELECT
        R.SERIAL_NUMBER,
        MAX(R.TEST_TIME) AS LATEST_TEST_TIME,
        MAX(R.TEST_CODE)  KEEP (DENSE_RANK LAST ORDER BY R.TEST_TIME) AS LATEST_TEST_CODE,
        MAX(R.TEST_GROUP) KEEP (DENSE_RANK LAST ORDER BY R.TEST_TIME) AS LATEST_TEST_GROUP,
        MAX(R.ERROR_ITEM_CODE) KEEP (DENSE_RANK LAST ORDER BY R.TEST_TIME) AS LATEST_ERROR_ITEM_CODE
    FROM SFISM4.R109 R
    WHERE R.TEST_TIME IS NOT NULL
    GROUP BY R.SERIAL_NUMBER
) R109X
  ON R109X.SERIAL_NUMBER = KP.PARENT_SN
LEFT JOIN SFIS1.C_ERROR_CODE_T E1 ON C1.TEST_CODE = E1.ERROR_CODE
LEFT JOIN SFIS1.C_ERROR_CODE_T E2 ON R109X.LATEST_TEST_CODE = E2.ERROR_CODE
WHERE
    A.WIP_GROUP LIKE '%B36R%'
    AND B.MODEL_SERIAL = 'ADAPTER'
    AND R107.WIP_GROUP NOT LIKE '%BR2C%'
    AND R107.WIP_GROUP NOT LIKE '%BCFA%'";

            await using var command = new OracleCommand(query, connection);
            await using var reader = await command.ExecuteReaderAsync(cancellationToken);
            while (await reader.ReadAsync(cancellationToken))
            {
                result.Add(new BonepileAfterKanbanResult
                {
                    SERIAL_NUMBER = reader["SERIAL_NUMBER"]?.ToString(),
                    MO_NUMBER = reader["MO_NUMBER"]?.ToString(),
                    MODEL_NAME = reader["MODEL_NAME"]?.ToString(),
                    PRODUCT_LINE = reader["PRODUCT_LINE"]?.ToString(),
                    WIP_GROUP_KANBAN = reader["WIP_GROUP_KANBAN"]?.ToString(),
                    WIP_GROUP_SFC = reader["WIP_GROUP_SFC"]?.ToString(),
                    ERROR_FLAG = reader["ERROR_FLAG"]?.ToString(),
                    WORK_FLAG = reader["WORK_FLAG"]?.ToString(),
                    TEST_GROUP = reader["TEST_GROUP"]?.ToString(),
                    TEST_TIME = reader["TEST_TIME"] == DBNull.Value ? (DateTime?)null : Convert.ToDateTime(reader["TEST_TIME"]),
                    TEST_CODE = reader["TEST_CODE"]?.ToString(),
                    ERROR_ITEM_CODE = reader["ERROR_ITEM_CODE"]?.ToString(),
                    ERROR_DESC = reader["ERROR_DESC"]?.ToString(),
                    AGING = reader["AGING"] == DBNull.Value ? (double?)null : Convert.ToDouble(reader["AGING"])
                });
            }

            return result;
        }

        public List<string> GetExcludedSerialNumbers()
        {
            var uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), "Uploads");
            var filePath = Path.Combine(uploadsFolder, "ScrapOk.xlsx");
            var snList = new List<string>();

            if (!File.Exists(filePath))
            {
                return snList;
            }

            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
            using var package = new ExcelPackage(new FileInfo(filePath));
            var worksheet = package.Workbook.Worksheets.FirstOrDefault();

            if (worksheet == null || worksheet.Dimension == null)
            {
                return snList;
            }

            var rowCount = worksheet.Dimension.Rows;
            for (var row = 1; row <= rowCount; row++)
            {
                var sn = worksheet.Cells[row, 1].Text.Trim();
                if (!string.IsNullOrEmpty(sn))
                {
                    snList.Add(sn.ToUpperInvariant());
                }
            }

            return snList;
        }
    }
}
