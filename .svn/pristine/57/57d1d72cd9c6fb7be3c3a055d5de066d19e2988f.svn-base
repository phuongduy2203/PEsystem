using Microsoft.AspNetCore.Mvc;
using System.IO;

namespace PESystem.Areas.DataCloud.Controllers
{
    public class DataController : Controller
    {

        // lấy dữ liệu mặc định từ đường dẫn D:\DataCloud
        [HttpGet]
        [Route("api/get-data")]
        public IActionResult GetData(string path)
        {
            try
            {
                if (string.IsNullOrEmpty(path))
                    path = @"D:\DataCloud";

                var folders = Directory.GetDirectories(path)
                    .Select(dir => new
                    {
                        Name = Path.GetFileName(dir),
                        Path = dir,
                        Type = "Folder"
                    });

                var files = Directory.GetFiles(path)
                    .Select(file => new
                    {
                        Name = Path.GetFileName(file),
                        Path = file,
                        Type = "File"
                    });

                var items = folders.Concat(files).ToList();

                return Ok(new
                {
                    CurrentPath = path,
                    Items = items
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Lỗi: {ex.Message}");
            }
        }


        // API tạo thêm folder

        [HttpPost]
        [Route("api/create-folder")]
        public IActionResult CreateFolder(string path, string folderName)
        {
            try
            {
                if (string.IsNullOrEmpty(folderName))
                {
                    return BadRequest("Tên folder không được để trống.");
                }

                string newFolderPath = Path.Combine(path, folderName);

                if (Directory.Exists(newFolderPath))
                {
                    return Conflict("Folder đã tồn tại.");
                }

                Directory.CreateDirectory(newFolderPath);
                return Ok(new { Message = "Folder được tạo thành công.", FolderPath = newFolderPath });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Lỗi khi tạo folder: {ex.Message}");
            }
        }

        // API tải file lên hệ thống
        [HttpPost]
        [Route("api/upload-file")]
        public IActionResult UploadFile(IFormFile file, string path)
        {
            try
            {
                if (file == null || string.IsNullOrEmpty(path))
                {
                    return BadRequest("File hoặc đường dẫn không hợp lệ!");
                }

                // Đường dẫn lưu file
                var fullPath = Path.Combine(path, file.FileName);

                // Lưu file vào đường dẫn
                using (var stream = new FileStream(fullPath, FileMode.Create))
                {
                    file.CopyTo(stream);
                }

                return Ok(new { Message = "File đã được tải lên thành công!" });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Lỗi khi lưu file: {ex.Message}");
            }
        }

        // API tải xuống file:

        [HttpGet]
        [Route("api/download-file")]
        public IActionResult DownloadFile(string path)
        {
            try
            {
                if (System.IO.File.Exists(path))
                {
                    var fileName = Path.GetFileName(path);
                    var fileBytes = System.IO.File.ReadAllBytes(path);
                    return File(fileBytes, "application/octet-stream", fileName);
                }
                return NotFound("File không tồn tại!");
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Lỗi khi tải file: {ex.Message}");
            }
        }

        // Model cho API xóa file
        public class ItemModel
        {
            public string Path { get; set; }
            public string Type { get; set; }
        }

        // API xóa file/folder:

        [HttpPost]
        [Route("api/delete-items")]
        public IActionResult DeleteItems([FromBody] List<ItemModel> items)
        {
            try
            {
                foreach (var item in items)
                {
                    if (item.Type == "File" && System.IO.File.Exists(item.Path))
                    {
                        System.IO.File.Delete(item.Path);
                    }
                    else if (item.Type == "Folder" && Directory.Exists(item.Path))
                    {
                        Directory.Delete(item.Path, true);
                    }
                }
                return Ok(new { Message = "Đã xóa thành công!" });
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Lỗi khi xóa: {ex.Message}");
            }
        }

        


    }
}
