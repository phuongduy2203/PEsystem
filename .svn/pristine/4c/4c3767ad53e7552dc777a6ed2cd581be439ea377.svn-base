using API_WEB.ModelsDB;
using API_WEB.ModelsOracle;
using API_WEB.Services.Repositories;
using DocumentFormat.OpenXml.Office2016.Drawing.ChartDrawing;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using System.Net.Http.Headers;
using System.Text;
using Microsoft.Extensions.FileProviders;
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

var builder = WebApplication.CreateBuilder(args);
var configuration = new ConfigurationBuilder()
    .AddJsonFile("api_appsettings.json", optional: false, reloadOnChange: true)
    .Build();

var MyAllowSpecificOrigins = "_myAllowSpecificOrigins";

builder.Services.AddCors(options =>
{
    options.AddPolicy(MyAllowSpecificOrigins, policy =>
    {
        policy.WithOrigins("http://localhost:5050", "http://10.220.130.119:8000") // Đảm bảo frontend có quyền truy cập API
              .AllowAnyHeader()
              .AllowAnyMethod()
              .AllowCredentials(); // Nếu có sử dụng cookie hoặc xác thực
    });
});

// Add services to the container.

builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

builder.Services.AddDbContext<CSDL_NE>(opt =>
    opt.UseSqlServer(configuration.GetConnectionString("SQLServerConnection"))
);

builder.Services.AddHostedService<DailyTaskService>(); // Đăng ký Background Service
// Đăng ký HttpClientFactory
builder.Services.AddHttpClient();

builder.Services.AddHttpClient("RepairStatusClient", client =>
{
    client.BaseAddress = new Uri("https://10.220.130.215:443/SfcSmartRepair/");
    client.DefaultRequestHeaders.Add("Accept", "application/json");
})
.ConfigurePrimaryHttpMessageHandler(() =>
{
    return new HttpClientHandler
    {
        ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
    };
});


//Cấu hình DbContext cho Entity Framework core 
IConfigurationRoot cf = new ConfigurationBuilder().SetBasePath(AppDomain.CurrentDomain.BaseDirectory).AddJsonFile("api_appsettings.json", optional: false, reloadOnChange: true).Build();
builder.Services.AddDbContext<CSDL_NE>(opt => opt.UseSqlServer(cf.GetConnectionString("SQLServerConnection"), sqlOptions =>
{
    sqlOptions.CommandTimeout(300); // Tăng thời gian timeout lên 5 phút
}));

// Kết nối tới Oracle
// Oracle DbContext
builder.Services.AddDbContext<OracleDbContext>(options =>
    options.UseOracle(configuration.GetConnectionString("OracleConnection"))
           .EnableSensitiveDataLogging() // Hiển thị chi tiết truy vấn
           .LogTo(Console.WriteLine) // Ghi log ra console
);

builder.Services.AddHostedService<AutoExportBackgroundService>();
builder.Services.AddSingleton<IWebHostEnvironment>(builder.Environment);

var app = builder.Build();
//app.UseCors("AllowSpecificOrigin");

app.UseRouting();
app.UseCors(MyAllowSpecificOrigins);
app.UseEndpoints(endpoints =>
{
    endpoints.MapControllers();
});

//app.UseCors("AllowAll");

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}
// Enable CORS
app.UseAuthentication();
app.UseAuthorization();
app.MapControllers();

//app.UseStaticFiles(new StaticFileOptions
//{
//    FileProvider = new PhysicalFileProvider(@"D:\ChecklistPicture"),
//    RequestPath = "/ChecklistPicture"
//});

app.Run();