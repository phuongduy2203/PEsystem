// Lắng nghe sự kiện thay đổi trên thẻ "search-options"
document.getElementById("search-options").addEventListener("change", function () {
    // Lấy giá trị hiện tại của "search-options"
    const selectedValue = this.value;

    // Lấy các thẻ "MO-input" và "status-options"
    const moInput = document.getElementById("MO-input");
    const statusOptions = document.getElementById("status-options");

    // Xử lý hiển thị/ẩn các thẻ dựa trên giá trị của "search-options"
    if (!selectedValue) {
        // Nếu không có giá trị, ẩn cả hai thẻ
        moInput.style.display = "none";
        statusOptions.style.display = "none";
    } else if (selectedValue === "SEARCH_MO") {
        // Hiển thị "MO-input", ẩn "status-options"
        moInput.style.display = "inline-block";
        statusOptions.style.display = "none";
    } else if (selectedValue === "SEARCH_STATUS") {
        // Hiển thị "status-options", ẩn "MO-input"
        moInput.style.display = "none";
        statusOptions.style.display = "inline-block";
    }
});

// Đặt giá trị mặc định khi tải trang
window.addEventListener("load", function () {
    // Ẩn cả hai thẻ ban đầu
    document.getElementById("MO-input").style.display = "none";
    document.getElementById("status-options").style.display = "none";
});


// xử lý nút tim kiem

document.getElementById("data-search-btn").addEventListener("click", async function () {
    const searchOption = document.getElementById("search-options").value; // Lấy giá trị thẻ select
    const resultsContainer = document.getElementById("data-results"); // Thẻ hiển thị kết quả

    // Xóa nội dung cũ
    resultsContainer.innerHTML = "";

    let apiUrl = "";
    let requestData = "";

    if (searchOption === "SEARCH_MO") {
        const moInput = document.getElementById("MO-input").value.trim(); // Lấy giá trị thẻ input
        if (!moInput) {
            alert("Vui lòng nhập MO để tìm kiếm.");
            return;
        }
        apiUrl = "http://10.220.130.119:9090/api/HassBi/search-by-mo";
        requestData = moInput;
    } else if (searchOption === "SEARCH_STATUS") {
        const statusOption = document.getElementById("status-options").value; // Lấy giá trị thẻ select status
        if (!statusOption || statusOption === "Chọn status") {
            alert("Vui lòng chọn trạng thái để tìm kiếm.");
            return;
        }
        apiUrl = "http://10.220.130.119:9090/api/HassBi/search-by-status";
        requestData = statusOption;
    } else {
        alert("Vui lòng chọn một tùy chọn tìm kiếm hợp lệ.");
        return;
    }

    try {
        const response = await fetch(apiUrl, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(requestData),
        });

        if (!response.ok) {
            const errorMessage = await response.text();
            alert(`Lỗi từ API: ${errorMessage}`);
            return;
        }

        const data = await response.json(); // Nhận dữ liệu từ API

        if (data.length === 0) {
            resultsContainer.innerHTML = "<p>Không tìm thấy dữ liệu.</p>";
            return;
        }

        // Sắp xếp mảng data theo TimeStart từ mới đến cũ
        data.sort((a, b) => new Date(b.timeStart) - new Date(a.timeStart));

        // Tạo bảng hiển thị dữ liệu
        let tableHtml = `
            <div class="table-wrapper" >
                <table border="1" cellspacing="0" cellpadding="5">
                    <thead>
                        <tr>
                            <th>MoNumber</th>
                            <th>Type</th>
                            <th>TimeStart</th>
                            <th>Status</th>
                            <th>Remark</th>
                            <th>NvConfirm</th>
                            <th>ConfirmTime</th>
                            <th>KeyPartNo</th>
                            <th>TargetQty</th>
                            <th>SampleSize</th>
                            <th>AQL_0.25</th>
                            <th>PassHassBi</th>
                            <th>FailHassBi</th>
                            <th>Pass_ICT/HassBi</th>
                            <th>Fail_ICT/HassBi</th>
                            <th>Pass_FT/HassBi</th>
                            <th>Fail_FT/HassBi</th>
                        </tr>
                    </thead>
                    <tbody>
        `;

        data.forEach((item) => {
            const statusClass =
                item.status === "Close" ? "status-close" :
                    item.status === "Fail" ? "status-fail" :
                        item.status === "On-going" ? "status-on-going" : "";

            // Oracle data có thể có nhiều bản ghi, hiển thị mỗi bản ghi trên dòng riêng
            const oracleRows = item.oracleData.map(o => `
                <tr>
                    <td class="monumber-cell">${item.moNumber}</td>
                    <td class="type-cell">${item.type}</td>
                    <td>${new Date(item.timeStart).toLocaleString()}</td>
                    <td class="${statusClass}">${item.status}</td>
                    <td class="remark-cell" data-monumber="${item.moNumber}" data-type="${item.type}">${item.remark || "N/A"}</td>
                    <td class="nvconfirm-cell" data-monumber="${item.moNumber}" data-type="${item.type}">${item.nvConfirm || "N/A"}</td>
                    <td class="confirmtime-cell">${item.confirmTime ? new Date(item.confirmTime).toLocaleString() : "N/A"}</td>
                    <td>${o.keY_PART_NO || "N/A"}</td>
                    <td>${o.targeT_QTY || 0}</td>
                    <td>${o.samplE_SIZE || 0}</td>
                    <td>${o.majoR_REJECT_QTY || 0}</td>
                    <td>${o.pasS_QTY || 0}</td>
                    <td class="failqty-cell">${o.faiL_QTY || 0}</td>
                    <td>${o.pasS_QTY1 || 0}</td>
                    <td class="failqty1-cell">${o.faiL_QTY1 || 0}</td>
                    <td>${o.pasS_QTY2 || 0}</td>
                    <td class="failqty2-cell">${o.faiL_QTY2 || 0}</td>
                </tr>
            `).join("");

            tableHtml += oracleRows;
        });

        tableHtml += `
                    </tbody>
                </table>
            </div>
        `;

        resultsContainer.innerHTML = tableHtml; // Gắn bảng vào thẻ kết quả
    } catch (error) {
        console.error("Lỗi khi gọi API:", error);
        alert("Có lỗi xảy ra khi gọi API. Vui lòng thử lại.");
    }
});


// xử lý remark

document.getElementById("data-results").addEventListener("click", function (event) {
    if (event.target.classList.contains("remark-cell")) {
        const moNumber = event.target.dataset.monumber; // Lấy MoNumber từ data attribute
        const type = event.target.dataset.type; // Lấy Type từ data attribute
        const currentRemark = event.target.textContent.trim(); // Nội dung hiện tại của Remark

        // Tạo hộp thoại chỉnh sửa Remark
        const dialogHtml = `
            <div id="remark-dialog" style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 9999; background: white; padding: 20px; border: 1px solid #ddd; box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);">
                <h6>Chỉnh sửa Remark</h6>
                <textarea id="remark-textarea" style="width: 400px; height: 200px;">${currentRemark}</textarea>
                <div style="margin-top: 10px; text-align: right;">
                    <button id="save-remark-btn" style="margin-right: 10px; padding: 5px 10px; background: #4caf50; color: white; border: none; cursor: pointer;">Save</button>
                    <button id="cancel-remark-btn" style="padding: 5px 10px; background: #f44336; color: white; border: none; cursor: pointer;">Cancel</button>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML("beforeend", dialogHtml);

        // Xử lý sự kiện nút Save
        document.getElementById("save-remark-btn").addEventListener("click", async function () {
            const updatedRemark = document.getElementById("remark-textarea").value.trim();

            try {
                // Gửi dữ liệu cập nhật Remark qua API
                const response = await fetch("http://10.220.130.119:9090/api/HassBi/update-remark", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ moNumber, type, remark: updatedRemark }),
                });

                if (!response.ok) {
                    const errorMessage = await response.text();
                    alert(`Lỗi khi lưu Remark: ${errorMessage}`);
                    return;
                }

                // Cập nhật giao diện sau khi lưu thành công
                event.target.textContent = updatedRemark || "N/A";
                alert("Cập nhật Remark thành công!");

                // Đóng hộp thoại
                document.getElementById("remark-dialog").remove();
            } catch (error) {
                console.error("Lỗi khi gọi API:", error);
                alert("Có lỗi xảy ra khi gọi API. Vui lòng thử lại.");
            }
        });

        // Xử lý sự kiện nút Cancel
        document.getElementById("cancel-remark-btn").addEventListener("click", function () {
            document.getElementById("remark-dialog").remove();
        });
    }
});

// xử lý NvConfirm

document.addEventListener("DOMContentLoaded", function () {
    const dialogHtml = `
        <div id="nvconfirm-dialog" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 20px; border: 1px solid #ddd; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); z-index: 1000;">
            <label>
                <input type="checkbox" id="nvconfirm-checkbox" />
                Approve
            </label>
            <div style="margin-top: 10px;">
                <button id="nvconfirm-save-btn" style="margin-right: 10px; padding: 5px 10px; background: #4caf50; color: white; border: none; cursor: pointer;">Save</button>
                <button id="nvconfirm-cancel-btn" style="padding: 5px 10px; background: #f44336; color: white; border: none; cursor: pointer;">Cancel</button>
            </div>
        </div>
    `;
    document.body.insertAdjacentHTML("beforeend", dialogHtml);

    const dialog = document.getElementById("nvconfirm-dialog");
    const checkbox = document.getElementById("nvconfirm-checkbox");
    const saveButton = document.getElementById("nvconfirm-save-btn");
    const cancelButton = document.getElementById("nvconfirm-cancel-btn");

    document.getElementById("data-results").addEventListener("click", function (event) {
        if (event.target.classList.contains("nvconfirm-cell")) {
            const cell = event.target;
            const moNumber = cell.dataset.monumber;
            const type = cell.dataset.type;
            const currentStatus = cell.textContent.trim();

            checkbox.checked = currentStatus === "Approve";

            dialog.style.display = "block";

            saveButton.onclick = async function () {
                const newStatus = checkbox.checked ? "Approve" : "Not Approve";

                try {
                    const response = await fetch("http://10.220.130.119:9090/api/HassBi/update-nvconfirm", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ moNumber, type, nvConfirm: newStatus }),
                    });

                    if (!response.ok) {
                        const errorMessage = await response.text();
                        alert(`Lỗi khi cập nhật NvConfirm: ${errorMessage}`);
                        return;
                    }

                    const result = await response.json();

                    cell.textContent = newStatus;

                    // Cập nhật ConfirmTime
                    const confirmTimeCell = cell.parentElement.querySelector(".confirmtime-cell");
                    confirmTimeCell.textContent = new Date(result.confirmTime).toLocaleString();

                    alert("Cập nhật NvConfirm thành công!");
                    dialog.style.display = "none";
                } catch (error) {
                    console.error("Lỗi khi gọi API:", error);
                    alert("Có lỗi xảy ra khi gọi API. Vui lòng thử lại.");
                }
            };

            cancelButton.onclick = function () {
                dialog.style.display = "none";
            };
        }
    });
});


// xử lý FailQty

document.getElementById("data-results").addEventListener("click", async function (event) {
    if (
        event.target.classList.contains("failqty-cell") ||
        event.target.classList.contains("failqty1-cell") ||
        event.target.classList.contains("failqty2-cell")
    ) {
        const value = parseInt(event.target.textContent.trim());
        if (value === 0) {
            return; // Không thực hiện gì nếu giá trị bằng 0
        }

        const row = event.target.closest("tr");
        const moNumber = row.querySelector(".monumber-cell").textContent.trim();
        let type = row.querySelector(".type-cell").textContent.trim();
        const status = "1"; // Luôn gửi giá trị '1' cho Status

        // Chuyển đổi Type
        if (type === "HASS_SAMPLING") {
            type = "HASS";
        } else if (type === "BI_SAMPLING") {
            type = "BI";
        }

        try {
            // Gửi yêu cầu đến API
            const response = await fetch("http://10.220.130.119:9090/api/HassBi/get-failed-serial-numbers", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ moNumber, type, status }),
            });

            if (!response.ok) {
                alert("Không thể lấy dữ liệu từ API.");
                return;
            }

            const data = await response.json();

            // Truncate long data1 values
            data.forEach((item) => {
                if (item.data1 && item.data1.length > 150) {
                    item.data1 = item.data1.substring(0, 150) + "...";
                }
            });

            // Hiển thị dữ liệu trong hộp thoại
            // Create the modal content
            const dialogHtml = `
                <div id="modal-overlay" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.3); z-index: 9998;"></div>
                <div id="modal-dialog" style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 90%; background: white; z-index: 9999; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.2); overflow: hidden;">
                <div style="padding: 10px; background: #f8f9fa; font-weight: bold;">Dữ liệu Serial Number bị Fail</div>
                <div style="overflow: auto; max-height: 400px; border: 1px solid #ddd;">
                    <table style="width: 100%; border-collapse: collapse; font-size: 14px; margin-bottom: 10px;">
                        <thead style="background: #e9ecef;">
                            <tr>
                                <th style="border: 1px solid #ddd; padding: 5px;">Serial Number</th>
                                <th style="border: 1px solid #ddd; padding: 5px;">Model Name</th>
                                <th style="border: 1px solid #ddd; padding: 5px;">Mo Number</th>
                                <th style="border: 1px solid #ddd; padding: 5px;">Group Name</th>
                                <th style="border: 1px solid #ddd; padding: 5px;">Fail Time</th>
                                <th style="border: 1px solid #ddd; padding: 5px;">Test Code</th>
                                <th style="border: 1px solid #ddd; padding: 5px;">Data</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${data
                                .map(
                                    (row) => `
                                <tr>
                                    <td style="border: 1px solid #ddd; padding: 5px;">${row.serialNumber}</td>
                                    <td style="border: 1px solid #ddd; padding: 5px;">${row.modelName}</td>
                                    <td style="border: 1px solid #ddd; padding: 5px;">${row.moNumber}</td>
                                    <td style="border: 1px solid #ddd; padding: 5px;">${row.groupName}</td>
                                    <td style="border: 1px solid #ddd; padding: 5px;">${row.failTime}</td>
                                    <td style="border: 1px solid #ddd; padding: 5px;">${row.testCode}</td>
                                    <td style="border: 1px solid #ddd; padding: 5px;">${row.data1}</td>
                                </tr>`
                                )
                                .join("")}
                        </tbody>
                    </table>
                </div>
                <div style="text-align: right; padding: 10px;">
                    <button id="close-modal-btn" style="padding: 5px 10px; background: #dc3545; color: white; border: none; cursor: pointer;">Close</button>
                </div>
            </div>

            `;

            // Append dialog to the body
            document.body.insertAdjacentHTML("beforeend", dialogHtml);

            // Close modal event
            document.getElementById("close-modal-btn").addEventListener("click", function () {
                document.getElementById("modal-dialog").remove();
                document.getElementById("modal-overlay").remove();
            });

        } catch (error) {
            console.error("Lỗi khi gọi API:", error);
            alert("Có lỗi xảy ra khi gọi API. Vui lòng thử lại.");
        }
    }
});

// xử lý nút update MO/Status

document.getElementById("Update-MO-status-btn").addEventListener("click", async function () {
    if (!confirm("Bạn có chắc muốn cập nhật MO/Status?")) return;

    try {
        const response = await fetch("http://10.220.130.119:9090/api/HassBi/update-mo-status", {
            method: "POST"
        });

        if (response.ok) {
            const message = await response.text();
            alert(message);
        } else {
            const error = await response.text();
            alert(`Cập nhật thất bại: ${error}`);
        }
    } catch (error) {
        console.error("Lỗi:", error);
        alert("Đã xảy ra lỗi khi cập nhật MO/Status.");
    }
});



// xử lý sự lúc mới vào trang Home hiện thị toàn bộ trạng thái MoNumber

document.addEventListener("DOMContentLoaded", async function () {
    const resultsContainer = document.getElementById("data-results"); // Thẻ chứa kết quả

    try {
        // Gọi API lấy tất cả dữ liệu trạng thái
        const response = await fetch("http://10.220.130.119:9090/api/HassBi/search-all-statuses", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
        });

        if (!response.ok) {
            const errorMessage = await response.text();
            alert(`Lỗi khi tải dữ liệu: ${errorMessage}`);
            return;
        }

        const data = await response.json();

        if (data.length === 0) {
            resultsContainer.innerHTML = "<p>Không tìm thấy dữ liệu.</p>";
            return;
        }

        // Sắp xếp dữ liệu theo `TimeStart` từ mới đến cũ
        data.sort((a, b) => new Date(b.timeStart) - new Date(a.timeStart));

        // Tạo bảng hiển thị dữ liệu
        let tableHtml = `
            <div class="table-wrapper" >
                <table border="1" cellspacing="0" cellpadding="5">
                    <thead>
                        <tr>
                            <th>MoNumber</th>
                            <th>Type</th>
                            <th>TimeStart</th>
                            <th>Status</th>
                            <th>Remark</th>
                            <th>NvConfirm</th>
                            <th>ConfirmTime</th>
                            <th>KeyPartNo</th>
                            <th>TargetQty</th>
                            <th>SampleSize</th>
                            <th>AQL_0.25</th>
                            <th>PassHassBi</th>
                            <th>FailHassBi</th>
                            <th>Pass_ICT/HassBi</th>
                            <th>Fail_ICT/HassBi</th>
                            <th>Pass_FT/HassBi</th>
                            <th>Fail_FT/HassBi</th>
                        </tr>
                    </thead>
                    <tbody>
        `;

        data.forEach((item) => {
            const statusClass =
                item.status === "Close" ? "status-close" :
                    item.status === "Fail" ? "status-fail" :
                        item.status === "On-going" ? "status-on-going" : "";

            // Oracle data có thể có nhiều bản ghi, hiển thị mỗi bản ghi trên dòng riêng
            const oracleRows = item.oracleData.map(o => `
                <tr>
                    <td class="monumber-cell">${item.moNumber}</td>
                    <td class="type-cell">${item.type}</td>
                    <td>${new Date(item.timeStart).toLocaleString()}</td>
                    <td class="${statusClass}">${item.status}</td>
                    <td class="remark-cell" data-monumber="${item.moNumber}" data-type="${item.type}">${item.remark || "N/A"}</td>
                    <td class="nvconfirm-cell" data-monumber="${item.moNumber}" data-type="${item.type}">${item.nvConfirm || "N/A"}</td>
                    <td class="confirmtime-cell">${item.confirmTime ? new Date(item.confirmTime).toLocaleString() : "N/A"}</td>
                    <td>${o.keY_PART_NO || "N/A"}</td>
                    <td>${o.targeT_QTY || 0}</td>
                    <td>${o.samplE_SIZE || 0}</td>
                    <td>${o.majoR_REJECT_QTY || 0}</td>
                    <td>${o.pasS_QTY || 0}</td>
                    <td class="failqty-cell">${o.faiL_QTY || 0}</td>
                    <td>${o.pasS_QTY1 || 0}</td>
                    <td class="failqty1-cell">${o.faiL_QTY1 || 0}</td>
                    <td>${o.pasS_QTY2 || 0}</td>
                    <td class="failqty2-cell">${o.faiL_QTY2 || 0}</td>
                </tr>
            `).join("");

            tableHtml += oracleRows;
        });

        tableHtml += `
                    </tbody>
                </table>
            </div>
        `;

        resultsContainer.innerHTML = tableHtml; // Gắn bảng dữ liệu vào container
    } catch (error) {
        console.error("Lỗi khi tải dữ liệu:", error);
        alert("Có lỗi xảy ra khi tải dữ liệu. Vui lòng thử lại.");
    }
});

// xử lý nút xuất Excel

document.getElementById('HassBi-ExportExcel-btn').addEventListener('click', function () {
    // Lấy dữ liệu từ bảng PdStock-results-table
    const table = document.querySelector('#data-results');
    if (!table) {
        alert("Không có dữ liệu để xuất!");
        return;
    }

    // Tạo dữ liệu Excel từ bảng
    let tableData = '';
    const rows = table.querySelectorAll('tr');
    rows.forEach(row => {
        const cols = row.querySelectorAll('td, th');
        const rowData = Array.from(cols)
            .map(col => col.textContent.replace(/,/g, '')) // Loại bỏ dấu phẩy
            .join(','); // Ngăn cách bằng dấu phẩy
        tableData += rowData + '\n';
    });

    // Tạo Blob chứa dữ liệu CSV
    const blob = new Blob([tableData], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);

    // Tạo thẻ <a> để tải file
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', 'HassBi.csv'); // Đặt tên file tải về
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    // Thông báo thành công
    alert("Xuất dữ liệu ra file Excel thành công!");
});





