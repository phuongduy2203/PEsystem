#nullable disable
using API_WEB.Models.Repositories;
using API_WEB.Models.SmartFA;
using API_WEB.ModelsDB;
using API_WEB.ModelsOracle;
using Aspose.Slides;
using ClosedXML.Excel;
using DocumentFormat.OpenXml.InkML;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Oracle.EntityFrameworkCore;
using Oracle.ManagedDataAccess.Client;
using System.Data;
using System.DirectoryServices.Protocols;
using System.Net.Http;
using System.Security.Cryptography;
using System.Text.Json;
using static API_WEB.Controllers.ProductController;

namespace API_WEB.Controllers.SmartFA
{
    [Route("api/[controller]")]
    [ApiController]
    public class SearchFAController : ControllerBase
    {
        private readonly CSDL_NE _sqlContext;
        private readonly OracleDbContext _oracleContext;
        private readonly HttpClient _httpClient; // Thêm HttpClient để gọi API

        public SearchFAController(CSDL_NE sqlContext, OracleDbContext oracleContext, HttpClient httpClient)
        {
            _sqlContext = sqlContext ?? throw new ArgumentNullException(nameof(sqlContext));
            _oracleContext = oracleContext ?? throw new ArgumentNullException(nameof(oracleContext));
            _httpClient = httpClient ?? throw new ArgumentNullException(nameof(httpClient));
        }
        [HttpGet("GetUniqueSerialNumberCount")]
        public async Task<IActionResult> GetUniqueSerialNumberCount()
        {
            try
            {
                // 1. Lấy SerialNumber từ bảng Product trong SQL Server
                var sqlSerialNumbers = await _sqlContext.Products
                    .Where(p => !string.IsNullOrEmpty(p.SerialNumber))
                    .Select(p => p.SerialNumber)
                    .ToListAsync();

                // 2. Lấy SerialNumber từ Oracle dựa trên truy vấn LINQ đã cung cấp
                var oracleSerialNumbers = await (
                    from task in _oracleContext.OracleDataRepairTask
                    join modelDesc in _oracleContext.OracleDataCModelDesc
                        on task.MODEL_NAME equals modelDesc.MODEL_NAME
                    where modelDesc.MODEL_SERIAL != "SWITCH"
                    select task.SERIAL_NUMBER
                ).ToListAsync();

                // 3. Kết hợp và loại bỏ trùng lặp
                var uniqueSerialNumbers = sqlSerialNumbers
                    .Union(oracleSerialNumbers)
                    .Distinct()
                    .ToList();

                // 4. Trả về số lượng
                var count = uniqueSerialNumbers.Count;
                return Ok(new { success = true, count = count });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Lỗi hệ thống: {ex.Message}");
                return StatusCode(500, new { success = false, message = $"Lỗi hệ thống: {ex.Message}" });
            }
        }


        [HttpGet("GetSumCombined")]
        public async Task<IActionResult> GetCombinedDataCount()
        {
            try
            {
                // Kiểm tra _httpClient
                if (_httpClient == null)
                {
                    Console.WriteLine("_httpClient is null!");
                    return StatusCode(500, new { success = false, message = "HttpClient không được khởi tạo." });
                }

                // 1. Gọi API ExportAllDataToExcel từ ProductController
                var exportResponse = await _httpClient.GetAsync("http://10.220.130.119:9090/api/Search/ExportAllDataToExcel");
                if (!exportResponse.IsSuccessStatusCode)
                {
                    return StatusCode((int)exportResponse.StatusCode, new { success = false, message = "Không thể lấy dữ liệu từ ExportAllDataToExcel." });
                }

                var exportData = await exportResponse.Content.ReadAsByteArrayAsync();
                var exportList = new List<InforProduct>();
                using (var stream = new MemoryStream(exportData))
                {
                    using (var workbook = new XLWorkbook(stream))
                    {
                        var worksheet = workbook.Worksheet(1);
                        var rows = worksheet.RowsUsed().Skip(1); // Bỏ qua header
                        foreach (var row in rows)
                        {
                            exportList.Add(new InforProduct
                            {
                                SerialNumber = row.Cell(1).GetString() ?? "",
                                ProductLine = row.Cell(2).GetString() ?? "",
                                ModelName = row.Cell(3).GetString() ?? "",
                                ShelfCode = row.Cell(4).GetString() ?? "",
                                ColumnNumber = row.Cell(5).GetValue<int?>(),
                                LevelNumber = row.Cell(6).GetValue<int?>(),
                                TrayNumber = row.Cell(7).GetValue<int?>(),
                                PositionInTray = row.Cell(8).GetValue<int?>(),
                                KanBanWIP = row.Cell(9).GetString() ?? "",
                                HoldReason = row.Cell(10).GetString() ?? "",
                                BlockReason = row.Cell(11).GetString() ?? "",
                                TestCode = row.Cell(12).GetString() ?? "",
                                Data1 = row.Cell(13).GetString() ?? "",
                                WipGroup = row.Cell(14).GetString() ?? "",
                                TestGroup = row.Cell(15).GetString() ?? "",
                                MoNumber = row.Cell(16).GetString() ?? "",
                                ReasonCode = row.Cell(17).GetString() ?? "",
                                EntryDate = TryParseDateTime(row.Cell(18).Value),
                                EntryPerson = row.Cell(19).GetString() ?? "",
                                BorrowStatus = row.Cell(20).GetString() ?? "",
                                BorrowDate = TryParseDateTime(row.Cell(21).Value),
                                BorrowPerson = row.Cell(22).GetString() ?? "",
                                Note = row.Cell(23).GetString() ?? "",
                                ActionNe = row.Cell(24).GetString() ?? "",
                                Scrap = row.Cell(25).GetString() ?? ""
                            });
                        }
                    }
                }

                // 2. Gọi trực tiếp phương thức SearchRepairTasks từ cùng controller
                var searchRequest = new SearchRequestNe
                {
                    Data1 = null,
                    SerialNumbers = null,
                    ModelName = null,
                    TestCode = null,
                    Status = null,
                    HandoverStatus = null
                };
                var searchResult = await SearchRepairTasks(searchRequest);

                // Khai báo searchList với giá trị mặc định
                List<SearchResult> searchList = new List<SearchResult>();

                // Xử lý kết quả từ SearchRepairTasks
                if (searchResult is OkObjectResult okResult && okResult.Value != null)
                {
                    var responseData = okResult.Value as dynamic;
                    if (responseData != null && responseData?.success == true)
                    {
                        var rawData = (responseData?.data as IEnumerable<object>)?.ToList() ?? new List<object>();
                        searchList = rawData.Select(item => new SearchResult
                        {
                            SerialNumber = item?.GetType().GetProperty("SERIAL_NUMBER")?.GetValue(item)?.ToString() ?? "",
                            ModelName = item?.GetType().GetProperty("MODEL_NAME")?.GetValue(item)?.ToString() ?? "",
                            TestGroup = item?.GetType().GetProperty("TEST_GROUP")?.GetValue(item)?.ToString() ?? "",
                            TestCode = item?.GetType().GetProperty("TEST_CODE")?.GetValue(item)?.ToString() ?? "",
                            Data1 = item?.GetType().GetProperty("DATA1")?.GetValue(item)?.ToString() ?? "",
                            Data11 = item?.GetType().GetProperty("DATA11")?.GetValue(item)?.ToString() ?? "",
                            Data12 = item?.GetType().GetProperty("DATA12")?.GetValue(item)?.ToString() ?? "",
                            Date3 = item?.GetType().GetProperty("DATE3")?.GetValue(item) as DateTime?,
                            Tester = item?.GetType().GetProperty("TESTER")?.GetValue(item)?.ToString() ?? "",
                            Data13 = item?.GetType().GetProperty("DATA13")?.GetValue(item)?.ToString() ?? "",
                            Data17 = item?.GetType().GetProperty("DATA17")?.GetValue(item)?.ToString() ?? "",
                            Data18 = item?.GetType().GetProperty("DATA18")?.GetValue(item)?.ToString() ?? "",
                            WipGroup = item?.GetType().GetProperty("WIP_GROUP")?.GetValue(item)?.ToString() ?? "",
                            ProductLine = item?.GetType().GetProperty("ProductLine")?.GetValue(item)?.ToString() ?? "",
                            ShelfCode = item?.GetType().GetProperty("ShelfCode")?.GetValue(item)?.ToString() ?? "",
                            ColumnNumber = item?.GetType().GetProperty("ColumnNumber")?.GetValue(item) as int?,
                            LevelNumber = item?.GetType().GetProperty("LevelNumber")?.GetValue(item) as int?,
                            TrayNumber = item?.GetType().GetProperty("TrayNumber")?.GetValue(item) as int?,
                            PositionInTray = item?.GetType().GetProperty("PositionInTray")?.GetValue(item) as int?,
                            BorrowStatus = item?.GetType().GetProperty("BorrowStatus")?.GetValue(item)?.ToString() ?? "",
                            KanBanWIP = item?.GetType().GetProperty("KanbanStatus")?.GetValue(item)?.ToString() ?? ""
                        }).ToList();
                    }
                    else
                    {
                        Console.WriteLine("SearchRepairTasks failed or returned no data.");
                    }
                }
                else
                {
                    Console.WriteLine($"SearchRepairTasks did not return OkObjectResult. Result: {searchResult?.GetType().Name}");
                }

                // Debug: Kiểm tra dữ liệu
                Console.WriteLine($"exportList count: {exportList.Count}");
                Console.WriteLine($"searchList count: {searchList.Count}");

                // 3. Chuẩn hóa dữ liệu từ SearchRepairTasks
                var searchTypedList = searchList ?? new List<SearchResult>();

                // 4. Kết hợp dữ liệu từ hai nguồn (chỉ lấy danh sách SerialNumber để đếm)
                var allSerialNumbers = exportList.Select(e => e.SerialNumber)
                    .Union(searchTypedList.Select(s => s.SerialNumber))
                    .Distinct();

                // 5. Trả về số lượng
                var count = allSerialNumbers.Count();
                return Ok(new { success = true, count = count });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"System Error: {ex.Message}");
                return StatusCode(500, new { success = false, message = $"Lỗi hệ thống: {ex.Message}" });
            }
        }

        [HttpGet("ExportCombinedDataToExcel")]
        public async Task<IActionResult> ExportCombinedDataToExcel()
        {
            try
            {
                // Kiểm tra _httpClient
                if (_httpClient == null)
                {
                    Console.WriteLine("_httpClient is null!");
                    return StatusCode(500, new { success = false, message = "HttpClient không được khởi tạo." });
                }

                // 1. Gọi API ExportAllDataToExcel từ ProductController
                var exportResponse = await _httpClient.GetAsync("http://10.220.130.119:9090/api/Search/ExportAllDataToExcel");
                if (!exportResponse.IsSuccessStatusCode)
                {
                    return StatusCode((int)exportResponse.StatusCode, new { success = false, message = "Không thể lấy dữ liệu từ ExportAllDataToExcel." });
                }

                var exportData = await exportResponse.Content.ReadAsByteArrayAsync();
                var exportList = new List<InforProduct>();
                using (var stream = new MemoryStream(exportData))
                {
                    using (var workbook = new XLWorkbook(stream))
                    {
                        var worksheet = workbook.Worksheet(1);
                        var rows = worksheet.RowsUsed().Skip(1); // Bỏ qua header
                        foreach (var row in rows)
                        {
                            exportList.Add(new InforProduct
                            {
                                SerialNumber = row.Cell(1).GetString() ?? "",
                                ProductLine = row.Cell(2).GetString() ?? "",
                                ModelName = row.Cell(3).GetString() ?? "",
                                ShelfCode = row.Cell(4).GetString() ?? "",
                                ColumnNumber = row.Cell(5).GetValue<int?>(),
                                LevelNumber = row.Cell(6).GetValue<int?>(),
                                TrayNumber = row.Cell(7).GetValue<int?>(),
                                PositionInTray = row.Cell(8).GetValue<int?>(),
                                KanBanWIP = row.Cell(9).GetString() ?? "",
                                HoldReason = row.Cell(10).GetString() ?? "",
                                BlockReason = row.Cell(11).GetString() ?? "",
                                TestCode = row.Cell(12).GetString() ?? "",
                                Data1 = row.Cell(13).GetString() ?? "",
                                WipGroup = row.Cell(14).GetString() ?? "",
                                TestGroup = row.Cell(15).GetString() ?? "",
                                MoNumber = row.Cell(16).GetString() ?? "",
                                ReasonCode = row.Cell(17).GetString() ?? "",
                                EntryDate = TryParseDateTime(row.Cell(18).Value), // Sử dụng hàm an toàn
                                EntryPerson = row.Cell(19).GetString() ?? "",
                                BorrowStatus = row.Cell(20).GetString() ?? "",
                                BorrowDate = TryParseDateTime(row.Cell(21).Value), // Sử dụng hàm an toàn
                                BorrowPerson = row.Cell(22).GetString() ?? "",
                                Note = row.Cell(23).GetString() ?? "",
                                ActionNe = row.Cell(24).GetString() ?? "",
                                Scrap = row.Cell(25).GetString() ?? ""
                            });
                        }
                    }
                }

                // 2. Gọi trực tiếp phương thức SearchRepairTasks từ cùng controller
                var searchRequest = new SearchRequestNe
                {
                    Data1 = null,
                    SerialNumbers = null,
                    ModelName = null,
                    TestCode = null,
                    Status = null,
                    HandoverStatus = null
                };
                var searchResult = await SearchRepairTasks(searchRequest);

                // Khai báo searchList với giá trị mặc định
                List<SearchResult> searchList = new List<SearchResult>();

                // Xử lý kết quả từ SearchRepairTasks
                if (searchResult is OkObjectResult okResult && okResult.Value != null)
                {
                    var responseData = okResult.Value as dynamic;
                    if (responseData != null && responseData?.success == true)
                    {
                        var rawData = (responseData?.data as IEnumerable<object>)?.ToList() ?? new List<object>();
                        searchList = rawData.Select(item => new SearchResult
                        {
                            SerialNumber = item?.GetType().GetProperty("SERIAL_NUMBER")?.GetValue(item)?.ToString() ?? "",
                            ModelName = item?.GetType().GetProperty("MODEL_NAME")?.GetValue(item)?.ToString() ?? "",
                            TestGroup = item?.GetType().GetProperty("TEST_GROUP")?.GetValue(item)?.ToString() ?? "",
                            TestCode = item?.GetType().GetProperty("TEST_CODE")?.GetValue(item)?.ToString() ?? "",
                            Data1 = item?.GetType().GetProperty("DATA1")?.GetValue(item)?.ToString() ?? "",
                            Data11 = item?.GetType().GetProperty("DATA11")?.GetValue(item)?.ToString() ?? "",
                            Data12 = item?.GetType().GetProperty("DATA12")?.GetValue(item)?.ToString() ?? "",
                            Date3 = item?.GetType().GetProperty("DATE3")?.GetValue(item) as DateTime?,
                            Tester = item?.GetType().GetProperty("TESTER")?.GetValue(item)?.ToString() ?? "",
                            Data13 = item?.GetType().GetProperty("DATA13")?.GetValue(item)?.ToString() ?? "",
                            Data17 = item?.GetType().GetProperty("DATA17")?.GetValue(item)?.ToString() ?? "",
                            Data18 = item?.GetType().GetProperty("DATA18")?.GetValue(item)?.ToString() ?? "",
                            WipGroup = item?.GetType().GetProperty("WIP_GROUP")?.GetValue(item)?.ToString() ?? "",
                            ProductLine = item?.GetType().GetProperty("ProductLine")?.GetValue(item)?.ToString() ?? "",
                            ShelfCode = item?.GetType().GetProperty("ShelfCode")?.GetValue(item)?.ToString() ?? "",
                            ColumnNumber = item?.GetType().GetProperty("ColumnNumber")?.GetValue(item) as int?,
                            LevelNumber = item?.GetType().GetProperty("LevelNumber")?.GetValue(item) as int?,
                            TrayNumber = item?.GetType().GetProperty("TrayNumber")?.GetValue(item) as int?,
                            PositionInTray = item?.GetType().GetProperty("PositionInTray")?.GetValue(item) as int?,
                            BorrowStatus = item?.GetType().GetProperty("BorrowStatus")?.GetValue(item)?.ToString() ?? "",
                            KanBanWIP = item?.GetType().GetProperty("KANBAN_WIP")?.GetValue(item)?.ToString()??""
                        }).ToList();
                    }
                    else
                    {
                        Console.WriteLine("SearchRepairTasks failed or returned no data.");
                    }
                }
                else
                {
                    Console.WriteLine($"SearchRepairTasks did not return OkObjectResult. Result: {searchResult?.GetType().Name}");
                }

                // Debug: Kiểm tra dữ liệu
                Console.WriteLine($"exportList count: {exportList.Count}");
                Console.WriteLine($"searchList count: {searchList.Count}");

                // 3. Chuẩn hóa dữ liệu từ SearchRepairTasks
                var searchTypedList = searchList ?? new List<SearchResult>();

                // 4. Kết hợp dữ liệu từ hai nguồn
                var combinedData = new List<CombinedDataModel>();
                var allSerialNumbers = exportList.Select(e => e.SerialNumber)
                    .Union(searchTypedList.Select(s => s.SerialNumber))
                    .Distinct();

                foreach (var sn in allSerialNumbers)
                {
                    var exportItem = exportList.FirstOrDefault(e => e.SerialNumber == sn);
                    var searchItem = searchTypedList.FirstOrDefault(s => s.SerialNumber == sn);

                    combinedData.Add(new CombinedDataModel
                    {
                        SerialNumber = sn,
                        ProductLine = exportItem?.ProductLine ?? searchItem?.ProductLine ?? "",
                        ModelName = exportItem?.ModelName ?? searchItem?.ModelName ?? "",
                        ShelfCode = exportItem?.ShelfCode ?? searchItem?.ShelfCode ?? "",
                        ColumnNumber = exportItem?.ColumnNumber ?? searchItem?.ColumnNumber,
                        LevelNumber = exportItem?.LevelNumber ?? searchItem?.LevelNumber,
                        TrayNumber = exportItem?.TrayNumber ?? searchItem?.TrayNumber,
                        PositionInTray = exportItem?.PositionInTray ?? searchItem?.PositionInTray,
                        KanBanWIP = exportItem?.KanBanWIP ?? searchItem.KanBanWIP,
                        HoldReason = exportItem?.HoldReason ?? "",
                        BlockReason = exportItem?.BlockReason ?? "",
                        TestCode = exportItem?.TestCode ?? searchItem?.TestCode ?? "",
                        Data1 = exportItem?.Data1 ?? searchItem?.Data1 ?? "",
                        WipGroup = exportItem?.WipGroup ?? searchItem?.WipGroup ?? "",
                        TestGroup = exportItem?.TestGroup ?? searchItem?.TestGroup ?? "",
                        MoNumber = exportItem?.MoNumber ?? "",
                        ReasonCode = exportItem?.ReasonCode ?? "",
                        EntryDate = exportItem?.EntryDate,
                        EntryPerson = exportItem?.EntryPerson ?? "",
                        BorrowStatus = exportItem?.BorrowStatus ?? searchItem?.BorrowStatus ?? "",
                        BorrowDate = exportItem?.BorrowDate,
                        BorrowPerson = exportItem?.BorrowPerson ?? "",
                        Note = exportItem?.Note ?? "",
                        ActionNe = exportItem?.ActionNe ?? "",
                        Data11 = searchItem?.Data11 ?? "",
                        Data12 = searchItem?.Data12 ?? "",
                        Date3 = searchItem?.Date3,
                        Tester = searchItem?.Tester ?? "",
                        Data13 = searchItem?.Data13 ?? "",
                        Data17 = searchItem?.Data17 ?? "",
                        Data18 = searchItem?.Data18 ?? "",
                        Scrap = exportItem?.Scrap ?? ""
                    });
                }

                // 5. Tạo file Excel
                using (var workbook = new XLWorkbook())
                {
                    var worksheet = workbook.Worksheets.Add("Combined Data");
                    var currentRow = 1;

                    // Tạo header
                    worksheet.Cell(currentRow, 1).Value = "SERIAL_NUMBER";
                    worksheet.Cell(currentRow, 2).Value = "PRODUCT_LINE";
                    worksheet.Cell(currentRow, 3).Value = "MODEL_NAME";
                    worksheet.Cell(currentRow, 4).Value = "SHELF";
                    worksheet.Cell(currentRow, 5).Value = "COLUMN";
                    worksheet.Cell(currentRow, 6).Value = "LEVEL";
                    worksheet.Cell(currentRow, 7).Value = "TRAY";
                    worksheet.Cell(currentRow, 8).Value = "CELL";
                    worksheet.Cell(currentRow, 9).Value = "KANBAN_WIP";
                    worksheet.Cell(currentRow, 10).Value = "HOLD_REASON"; // Sửa tiêu đề trùng lặp
                    worksheet.Cell(currentRow, 11).Value = "BLOCK_REASON"; // Sửa tiêu đề trùng lặp
                    worksheet.Cell(currentRow, 12).Value = "TEST_CODE";
                    worksheet.Cell(currentRow, 13).Value = "ERROR_DESC";
                    worksheet.Cell(currentRow, 14).Value = "WIP_GROUP";
                    worksheet.Cell(currentRow, 15).Value = "TEST_GROUP"; // Sửa tiêu đề trùng lặp
                    worksheet.Cell(currentRow, 16).Value = "MO_NUMBER";
                    worksheet.Cell(currentRow, 17).Value = "REASON_CODE";
                    worksheet.Cell(currentRow, 18).Value = "NGÀY_NHẬP";
                    worksheet.Cell(currentRow, 19).Value = "NGƯỜI_NHẬP";
                    worksheet.Cell(currentRow, 20).Value = "STATUS_BORROW";
                    worksheet.Cell(currentRow, 21).Value = "NGÀY_MƯỢN";
                    worksheet.Cell(currentRow, 22).Value = "NGƯỜI_MƯỢN";
                    worksheet.Cell(currentRow, 23).Value = "NOTE";
                    worksheet.Cell(currentRow, 24).Value = "ACTION";
                    worksheet.Cell(currentRow, 25).Value = "STATUS";
                    worksheet.Cell(currentRow, 26).Value = "PRE_STATUS";
                    worksheet.Cell(currentRow, 27).Value = "TIME_CONFIRM";
                    worksheet.Cell(currentRow, 28).Value = "TESTER";
                    worksheet.Cell(currentRow, 29).Value = "DATA13";
                    worksheet.Cell(currentRow, 30).Value = "TYPE";
                    worksheet.Cell(currentRow, 31).Value = "LOCATION";
                    worksheet.Cell(currentRow, 32).Value = "SCRAP";
                    // Điền dữ liệu
                    foreach (var data in combinedData)
                    {
                        currentRow++;
                        worksheet.Cell(currentRow, 1).Value = data.SerialNumber;
                        worksheet.Cell(currentRow, 2).Value = data.ProductLine;
                        worksheet.Cell(currentRow, 3).Value = data.ModelName;
                        worksheet.Cell(currentRow, 4).Value = data.ShelfCode;
                        worksheet.Cell(currentRow, 5).Value = data.ColumnNumber;
                        worksheet.Cell(currentRow, 6).Value = data.LevelNumber;
                        worksheet.Cell(currentRow, 7).Value = data.TrayNumber;
                        worksheet.Cell(currentRow, 8).Value = data.PositionInTray;
                        worksheet.Cell(currentRow, 9).Value = data.KanBanWIP;
                        worksheet.Cell(currentRow, 10).Value = data.HoldReason;
                        worksheet.Cell(currentRow, 11).Value = data.BlockReason;
                        worksheet.Cell(currentRow, 12).Value = data.TestCode;
                        worksheet.Cell(currentRow, 13).Value = data.Data1;
                        worksheet.Cell(currentRow, 14).Value = data.WipGroup;
                        worksheet.Cell(currentRow, 15).Value = data.TestGroup;
                        worksheet.Cell(currentRow, 16).Value = data.MoNumber;
                        worksheet.Cell(currentRow, 17).Value = data.ReasonCode;
                        worksheet.Cell(currentRow, 18).Value = data.EntryDate;
                        worksheet.Cell(currentRow, 19).Value = data.EntryPerson;
                        worksheet.Cell(currentRow, 20).Value = data.BorrowStatus;
                        worksheet.Cell(currentRow, 21).Value = data.BorrowDate;
                        worksheet.Cell(currentRow, 22).Value = data.BorrowPerson;
                        worksheet.Cell(currentRow, 23).Value = data.Note;
                        worksheet.Cell(currentRow, 24).Value = data.ActionNe;
                        worksheet.Cell(currentRow, 25).Value = data.Data11;
                        worksheet.Cell(currentRow, 26).Value = data.Data12;
                        worksheet.Cell(currentRow, 27).Value = data.Date3;
                        worksheet.Cell(currentRow, 28).Value = data.Tester;
                        worksheet.Cell(currentRow, 29).Value = data.Data13;
                        worksheet.Cell(currentRow, 30).Value = data.Data17;
                        worksheet.Cell(currentRow, 31).Value = data.Data18;
                        worksheet.Cell(currentRow, 32).Value = data.Scrap;
                    }

                    // Trả file Excel về client
                    using (var stream = new MemoryStream())
                    {
                        workbook.SaveAs(stream);
                        var content = stream.ToArray();
                        return File(content, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "CombinedData.xlsx");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"System Error: {ex.Message}");
                return StatusCode(500, new { success = false, message = $"Lỗi hệ thống: {ex.Message}" });
            }
        }

        // Hàm trợ giúp để xử lý DateTime an toàn
        private DateTime? TryParseDateTime(object cellValue)
        {
            if (cellValue == null || string.IsNullOrWhiteSpace(cellValue.ToString()))
                return null;

            if (cellValue is DateTime dt)
                return dt;

            if (DateTime.TryParse(cellValue.ToString(), out DateTime parsedDate))
                return parsedDate;

            Console.WriteLine($"Warning: Could not parse '{cellValue}' as DateTime. Returning null.");
            return null;
        }


        [HttpPost("search")]
        public async Task<IActionResult> SearchRepairTasks([FromBody] SearchRequestNe request)
        {
            try
            {
                // 1. Truy vấn OracleDataRepairTask và chỉ lấy SERIAL_NUMBER với MODEL_SERIAL != "SWITCH"
                var oracleTasks = await (
                    from task in _oracleContext.OracleDataRepairTask
                    join modelDesc in _oracleContext.OracleDataCModelDesc
                    on task.MODEL_NAME equals modelDesc.MODEL_NAME
                    join wipGroup in _oracleContext.OracleDataR107 // Join với bảng r107
                    on task.SERIAL_NUMBER equals wipGroup.SERIAL_NUMBER
                    join kanBanWIP in _oracleContext.OracleDataZKanbanTracking
                    on task.SERIAL_NUMBER equals kanBanWIP.SERIAL_NUMBER into kanBanJoin
                    from kanBanWIP in kanBanJoin.DefaultIfEmpty() // Left join để xử lý trường hợp SN không có trong z_kanban_tracking
                    where modelDesc.MODEL_SERIAL != "SWITCH" // Điều kiện lọc MODEL_SERIAL
                          && (string.IsNullOrEmpty(request.Data1) || EF.Functions.Like(task.DATA1, $"%{request.Data1}%"))
                          && (request.SerialNumbers == null || !request.SerialNumbers.Any() || request.SerialNumbers.Contains(task.SERIAL_NUMBER))
                          && (string.IsNullOrEmpty(request.ModelName) || task.MODEL_NAME == request.ModelName)
                          && (string.IsNullOrEmpty(request.TestCode) || task.TEST_CODE == request.TestCode)
                          && (string.IsNullOrEmpty(request.Status) || task.DATA11 == request.Status)
                          && (string.IsNullOrEmpty(request.HandoverStatus) || task.DATA13 == request.HandoverStatus)
                    select new
                    {
                        task.SERIAL_NUMBER,
                        task.MODEL_NAME,
                        task.TEST_GROUP,
                        task.TEST_CODE,
                        task.DATA1,
                        task.DATA11,
                        task.DATA12,
                        task.DATE3,
                        task.TESTER,
                        task.DATA13,
                        task.DATA17,
                        task.DATA18,
                        WIP_GROUP = wipGroup.WIP_GROUP, // Từ r107
                        KANBAN_WIP = kanBanWIP != null ? kanBanWIP.WIP_GROUP : null // Từ z_kanban_tracking, null nếu không tìm thấy
                    }
                ).ToListAsync();

                if (!oracleTasks.Any())
                {
                    return Ok(new
                    {
                        success = false,
                        message = "Không tìm thấy dữ liệu phù hợp.",
                        data = new List<object>()
                    });
                }

                // 2. Xác định giá trị KANBAN_WIP dựa trên MODEL_NAME và z_kanban_tracking
                var tasksWithKanbanWip = oracleTasks.Select(task => new
                {
                    task.SERIAL_NUMBER,
                    task.MODEL_NAME,
                    task.TEST_GROUP,
                    task.TEST_CODE,
                    task.DATA1,
                    task.DATA11,
                    task.DATA12,
                    task.DATE3,
                    task.TESTER,
                    task.DATA13,
                    task.DATA17,
                    task.DATA18,
                    task.WIP_GROUP,
                    KANBAN_WIP = task.MODEL_NAME.StartsWith("900") ? "After" :
                                 (task.KANBAN_WIP != null ? task.KANBAN_WIP : "Before")
                }).ToList();

                // 3. Lấy danh sách ModelName từ tasksWithKanbanWip
                var modelNames = tasksWithKanbanWip.Select(t => t.MODEL_NAME).Distinct().ToList();

                // 4. Truy vấn ProductLine từ SFIS1.C_MODEL_DESC_T
                string productLineQuery = $@"
            SELECT MODEL_NAME, PRODUCT_LINE
            FROM SFIS1.C_MODEL_DESC_T
            WHERE MODEL_NAME IN ({string.Join(",", modelNames.Select(mn => $"'{mn}'"))})";

                var productLineResults = await _oracleContext.OracleDataCModelDesc
                    .FromSqlRaw(productLineQuery)
                    .AsNoTracking()
                    .Select(pl => new
                    {
                        MODEL_NAME = pl.MODEL_NAME,
                        PRODUCT_LINE = pl.PRODUCT_LINE ?? ""
                    })
                    .ToListAsync();

                // 5. Kết hợp ProductLine với tasksWithKanbanWip
                var oracleWithProductLine = tasksWithKanbanWip.Select(task => new
                {
                    task.SERIAL_NUMBER,
                    task.MODEL_NAME,
                    task.TEST_GROUP,
                    task.TEST_CODE,
                    task.DATA1,
                    task.DATA11,
                    task.DATA12,
                    task.DATE3,
                    task.TESTER,
                    task.DATA13,
                    task.DATA17,
                    task.DATA18,
                    task.WIP_GROUP,
                    task.KANBAN_WIP,
                    ProductLine = productLineResults.FirstOrDefault(pl => pl.MODEL_NAME == task.MODEL_NAME)?.PRODUCT_LINE ?? "N/A"
                });

                // 6. Truy vấn dữ liệu từ bảng Product (SQL Server)
                var products = await _sqlContext.Products
                    .AsNoTracking()
                    .Include(p => p.Shelf)
                    .Where(product => oracleWithProductLine.Select(t => t.SERIAL_NUMBER).Contains(product.SerialNumber))
                    .Select(product => new
                    {
                        product.SerialNumber,
                        ShelfCode = product.Shelf != null ? product.Shelf.ShelfCode : null,
                        product.ColumnNumber,
                        product.LevelNumber,
                        product.TrayNumber,
                        product.PositionInTray,
                        product.BorrowStatus
                    })
                    .ToListAsync();

                // 7. Kết hợp dữ liệu Oracle và SQL Server
                var combinedResults = oracleWithProductLine
                    .GroupJoin(
                        products,
                        oracle => oracle.SERIAL_NUMBER,
                        product => product.SerialNumber,
                        (oracle, productGroup) => new
                        {
                            OracleTask = oracle,
                            ProductData = productGroup.FirstOrDefault()
                        }
                    )
                    .Select(result => new
                    {
                        result.OracleTask.SERIAL_NUMBER,
                        result.OracleTask.MODEL_NAME,
                        result.OracleTask.TEST_GROUP,
                        result.OracleTask.TEST_CODE,
                        result.OracleTask.DATA1,
                        result.OracleTask.DATA11,
                        result.OracleTask.DATA12,
                        result.OracleTask.DATE3,
                        result.OracleTask.TESTER,
                        result.OracleTask.DATA13,
                        result.OracleTask.DATA17,
                        result.OracleTask.DATA18,
                        result.OracleTask.WIP_GROUP,
                        result.OracleTask.KANBAN_WIP,
                        result.OracleTask.ProductLine,
                        ShelfCode = result.ProductData?.ShelfCode ?? "",
                        ColumnNumber = result.ProductData?.ColumnNumber,
                        LevelNumber = result.ProductData?.LevelNumber,
                        TrayNumber = result.ProductData?.TrayNumber,
                        PositionInTray = result.ProductData?.PositionInTray,
                        BorrowStatus = result.ProductData?.BorrowStatus
                    })
                    .ToList();

                return Ok(new
                {
                    success = true,
                    totalResults = combinedResults.Count,
                    data = combinedResults
                });
            }
            catch (Exception ex)
            {
                // Ghi log chi tiết lỗi
                Console.WriteLine($"Lỗi: {ex.Message}");
                Console.WriteLine($"Chi tiết: {ex.StackTrace}");
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        [HttpGet("get-fullname")]
        public IActionResult GetFullName(string username)
        {
            if (string.IsNullOrEmpty(username))
            {
                return BadRequest(new { success = false, message = "Username không được để trống!" });
            }
            try
            {
                // Tìm FullName dua trên Username
                var user = _sqlContext.Users.FirstOrDefault(u => u.Username == username);

                if (user == null)
                {
                    return NotFound(new { success = false, message = "Không tìm thấy người dùng!" });
                }

                return Ok(new { success = true, fullName = user.FullName });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        //Lay FullName theo trong ID
        [HttpPost("get-fullname-batch")]
        public IActionResult GetFullNameBatch([FromBody] List<string> usernames)
        {
            var users = _sqlContext.Users
                .Where(u => usernames.Contains(u.Username))
                .ToDictionary(u => u.Username, u => u.FullName);

            return Ok(new { success = true, data = users });
        }

        //Lay FullName theo list
        [HttpPost("get-fullname-batch-list")]
        public async Task<IActionResult> GetFullNameBatchList([FromBody] List<string> usernames)
        {
            if (usernames == null || usernames.Count == 0)
            {
                return BadRequest(new { success = false, message = "Danh sách ID không được để trống!" });
            }

            try
            {
                // Lay danh sách FullName tu SQL Server
                var users = await _sqlContext.Users
                    .Where(u => usernames.Contains(u.Username))
                    .ToDictionaryAsync(u => u.Username, u => u.FullName);

                return Ok(new { success = true, data = users });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        [HttpGet("get-unique-modelnames")]
        public async Task<IActionResult> GetUniqueModelNames()
        {
            try
            {
                // Truy van lay danh sách ModelName khác nhau voi dieu kien MODEL_SERIAL != "SWITCH"
                var uniqueModelNames = await (
                    from task in _oracleContext.OracleDataRepairTask
                    join modelDesc in _oracleContext.OracleDataCModelDesc
                    on task.MODEL_NAME equals modelDesc.MODEL_NAME
                    where task.MODEL_NAME != null
                          && modelDesc.MODEL_SERIAL != "SWITCH" // Ðieu kien MODEL_SERIAL
                    select task.MODEL_NAME
                )
                .Distinct()
                .ToListAsync();

                return Ok(new
                {
                    success = true,
                    data = uniqueModelNames
                });
            }
            catch (Oracle.ManagedDataAccess.Client.OracleException ex)
            {
                // Xu lý loi liên quan den Oracle
                return StatusCode(500, new
                {
                    success = false,
                    message = $"Oracle Error: {ex.Message}"
                });
            }
            catch (Exception ex)
            {
                // Xu lý loi chung
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }

        [HttpGet("get-unique-status")]
        public async Task<IActionResult> GetUniqueStatus()
        {
            try
            {
                // Truy van lay danh sách status khác nhau
                var uniqueStatus = await _oracleContext.OracleDataRepairTask
                    .Where(task => task.DATA11 != null && !task.MODEL_NAME.StartsWith("SA")) // Loai bo giá tri NULL
                    .Select(task => task.DATA11)
                    .Distinct()
                    .ToListAsync();

                return Ok(new
                {
                    success = true,
                    data = uniqueStatus
                });
            }
            catch (Oracle.ManagedDataAccess.Client.OracleException ex)
            {
                //Xử lý liên quan đến oracle
                return StatusCode(500, new
                {
                    success = false,
                    message = $"Oracle Error: {ex.Message}"
                });
            }
            catch (Exception ex)
            {
                //Xử lý lỗi chung
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }

        [HttpGet("get-unique-SN")]
        public async Task<IActionResult> GetUniqueSN()
        {
            try
            {
                var uniqueStatus = await (
                    from task in _oracleContext.OracleDataRepairTask
                    join modelDesc in _oracleContext.OracleDataCModelDesc
                    on task.MODEL_NAME equals modelDesc.MODEL_NAME
                    where task.SERIAL_NUMBER != null
                          && modelDesc.MODEL_SERIAL != "SWITCH"
                          && task.MODEL_NAME != null
                          && modelDesc.MODEL_NAME != null
                    select task.SERIAL_NUMBER
                )
                .Distinct()
                .ToListAsync();

                return Ok(new
                {
                    success = true,
                    data = uniqueStatus
                });
            }
            catch (Oracle.ManagedDataAccess.Client.OracleException ex)
            {
                return StatusCode(500, new
                {
                    success = false,
                    message = $"Oracle Error: {ex.Message}"
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }

        [HttpPost("search-history-by-list")]
        public async Task<IActionResult> GetHistoryBySerialNumberList([FromBody] List<string> serialNumbers)
        {
            try
            {
                if (serialNumbers == null || serialNumbers.Count == 0)
                {
                    return BadRequest(new { success = false, message = "Danh sách SN không được để trống!" });
                }

                // Truy v?n l?ch s? theo danh sách Serial Numbers
                var history = await _oracleContext.Set<R_REPAIR_TASK_DETAIL_T>()
                    .Where(detail => serialNumbers.Contains(detail.SERIAL_NUMBER))
                    .Select(detail => new
                    {
                        SERIAL_NUMBER = detail.SERIAL_NUMBER ?? "",
                        MO_NUMBER = detail.MO_NUMBER ?? "",
                        MODEL_NAME = detail.MODEL_NAME ?? "",
                        TEST_GROUP = detail.TEST_GROUP ?? "",
                        TEST_CODE = detail.TEST_CODE ?? "",
                        DATA1 = detail.DATA1 ?? "",
                        DATA11 = detail.DATA11 ?? "",
                        DATA12 = detail.DATA12 ?? "",
                        DATE3 = detail.DATE3,
                        TESTER = detail.TESTER ?? "",
                        DATA17 = detail.DATA17 ?? "",//type
                        DATA18 = detail.DATA18 ?? "",//Location
                        DATA19 = detail.DATA19 ?? "",//L?ch s? s?a ch?a.
                    })
                    .ToListAsync();

                if (history == null || history.Count == 0)
                {
                    return Ok(new { success = true, message = "Không tìm thấy lịch sử", data = new List<object>() });
                }

                return Ok(new { success = true, data = history });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        [HttpPost("get-status-counts")]
        public async Task<IActionResult> GetStatusCounts([FromBody] string type)
        {
            try
            {
                IQueryable<dynamic> query;

                switch (type?.ToUpper())
                {
                    case "ALL":
                        query = _oracleContext.OracleDataRepairTask
                            .Where(task => task.DATA11 != null)
                            .Join(
                                _oracleContext.OracleDataCModelDesc,
                                task => task.MODEL_NAME,
                                modelDesc => modelDesc.MODEL_NAME,
                                (task, modelDesc) => new { task, modelDesc }
                            )
                            .Where(joined => joined.modelDesc.MODEL_SERIAL != "SWITCH")
                            .GroupBy(joined => joined.task.DATA11)
                            .Select(group => new
                            {
                                Status = group.Key,
                                Count = group.Count()
                            })
                            .OrderByDescending(x => x.Count); // ? S?p x?p gi?m d?n
                        break;

                    case "HANDOVER":
                        query = _oracleContext.OracleDataRepairTask
                            .Where(task => task.DATA13 != null)
                            .Join(
                                _oracleContext.OracleDataCModelDesc,
                                task => task.MODEL_NAME,
                                modelDesc => modelDesc.MODEL_NAME,
                                (task, modelDesc) => new { task, modelDesc }
                            )
                            .Where(joined => joined.modelDesc.MODEL_SERIAL != "SWITCH")
                            .GroupBy(joined => joined.task.DATA11)
                            .Select(group => new
                            {
                                Status = group.Key,
                                Count = group.Count()
                            })
                            .OrderByDescending(x => x.Count); // ? S?p x?p gi?m d?n
                        break;

                    case "ONLINE":
                        query = _oracleContext.OracleDataRepairTask
                            .Where(task => task.DATA18 != null && task.DATA18 != "TRONG_KHO" && task.DATA13 != "WAITING_HAND_OVER")
                            .Join(
                                _oracleContext.OracleDataCModelDesc,
                                task => task.MODEL_NAME,
                                modelDesc => modelDesc.MODEL_NAME,
                                (task, modelDesc) => new { task, modelDesc }
                            )
                            .Where(joined => joined.modelDesc.MODEL_SERIAL != "SWITCH")
                            .GroupBy(joined => joined.task.DATA11)
                            .Select(group => new
                            {
                                Status = group.Key,
                                Count = group.Count()
                            })
                            .OrderByDescending(x => x.Count); // ? S?p x?p gi?m d?n
                        break;

                    default:
                        return BadRequest(new
                        {
                            success = false,
                            message = "Type không hợp lệ. Vui lòng sử dụng: 'ALL', 'HANDOVER', hoặc 'ONLINE'."
                        });
                }

                // Th?c thi truy v?n và tr? v? k?t qu?
                var statusCounts = await query.ToListAsync();

                // ? Tính t?ng s? lu?ng n?u "ALL"
                int totalCount = (type.ToUpper() == "ALL") ? statusCounts.Sum(x => x.Count) : 0;

                return Ok(new
                {
                    success = true,
                    data = statusCounts,
                    totalCount = totalCount
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }

        //// API lấy dữ liệu xóa R_ theo owner
        //[HttpPost("get-repair-owner-data")]
        //public async Task<IActionResult> GetRepairOwnerData([FromBody] TimeRequest request)
        //{
        //    try
        //    {
        //        if (request == null || request.StartDate == null || request.EndDate == null)
        //        {
        //            return BadRequest(new
        //            {
        //                success = false,
        //                message = "Date không được để trống!"
        //            });
        //        }

        //        // Thực hiện truy vấn dữ liệu từ Entity Framework
        //        var repairOwnerData = await (
        //            from detail in _oracleContext.OracleDataRepairTaskDetail
        //            join repair in _oracleContext.OracleDataR109
        //            on detail.TESTER equals repair.REPAIRER
        //            join r107 in _oracleContext.OracleDataR107
        //            on repair.SERIAL_NUMBER equals r107.SERIAL_NUMBER
        //            where
        //                detail.DATE3 >= request.StartDate &&
        //                detail.DATE3 <= request.EndDate &&
        //                repair.REPAIR_TIME >= request.StartDate &&
        //                repair.REPAIR_TIME <= request.EndDate &&
        //                EF.Functions.Like(detail.DATA17.ToUpper(), "%NHAN%")
        //            select new
        //            {
        //                OWNER = detail.TESTER,
        //                repair.SERIAL_NUMBER,
        //                repair.MODEL_NAME,
        //                repair.TEST_GROUP,
        //                r107.WIP_GROUP,
        //                r107.MO_NUMBER,
        //                repair.TEST_CODE,
        //                repair.DATA1,
        //                REPAIRER = repair.REPAIRER,
        //                REPAIR_TIME = repair.REPAIR_TIME,
        //                repair.REASON_CODE,
        //                repair.ERROR_ITEM_CODE
        //            }
        //        ).Distinct().ToListAsync();

        //        return Ok(new
        //        {
        //            success = true,
        //            data = repairOwnerData
        //        });
        //    }
        //    catch (Exception ex)
        //    {
        //        return StatusCode(500, new
        //        {
        //            success = false,
        //            message = ex.Message
        //        });
        //    }
        //}

        // API lấy dữ liệu xóa R_ theo owner
        [HttpPost("get-repair-owner-data")]
        public async Task<IActionResult> GetRepairOwnerData([FromBody] TimeRequest request)
        {
            try
            {
                if (request == null || request.StartDate == null || request.EndDate == null)
                {
                    return BadRequest(new
                    {
                        success = false,
                        message = "Date không được để trống!"
                    });
                }

                // Thực hiện truy vấn dữ liệu từ Entity Framework
                var repairOwnerData = await (
                    from detail in _oracleContext.OracleDataRepairTaskDetail
                    join repair in _oracleContext.OracleDataR109
                    on detail.TESTER equals repair.REPAIRER
                    join r107 in _oracleContext.OracleDataR107
                    on repair.SERIAL_NUMBER equals r107.SERIAL_NUMBER
                    where
                        detail.DATE3 >= request.StartDate &&
                        detail.DATE3 <= request.EndDate &&
                        repair.REPAIR_TIME >= request.StartDate &&
                        repair.REPAIR_TIME <= request.EndDate &&
                        EF.Functions.Like(detail.DATA17, "%Nhận%")
                    select new
                    {
                        OWNER = detail.TESTER,
                        repair.SERIAL_NUMBER,
                        repair.MODEL_NAME,
                        repair.TEST_GROUP,
                        r107.WIP_GROUP,
                        r107.MO_NUMBER,
                        repair.TEST_CODE,
                        repair.DATA1,
                        REPAIRER = repair.REPAIRER,
                        REPAIR_TIME = repair.REPAIR_TIME,
                        repair.REASON_CODE,
                        repair.ERROR_ITEM_CODE
                    }
                ).Distinct().ToListAsync();

                return Ok(new
                {
                    success = true,
                    data = repairOwnerData
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }


        // API lấy dữ liệu confirm và save theo theo thời gian.
        [HttpPost("get-confirm-save-data")]
        public async Task<IActionResult> GetConfirmSaveData([FromBody] TimeRequest request)
        {
            try
            {
                if (request.StartDate == null || request.EndDate == null)
                {
                    return BadRequest(new
                    {
                        success = false,
                        message = "Date không được để trống!"
                    });
                }

                var result = await _oracleContext.OracleDataRepairTaskDetail
                    .GroupJoin(_oracleContext.OracleDataR107,
                        task => task.SERIAL_NUMBER,
                        OracleDataR107 => OracleDataR107.SERIAL_NUMBER,
                        (task, r107Collection) => new { task, r107Collection })
                    .SelectMany(
                        x => x.r107Collection.DefaultIfEmpty(),
                        (task, OracleDataR107) => new { task.task, OracleDataR107 })
                    .Where(x =>
                        (EF.Functions.Like(x.task.DATA17.ToUpper(), "%CONFIRM%") || EF.Functions.Like(x.task.DATA17.ToUpper(), "%SAVE%")) &&
                        x.task.DATE3 >= request.StartDate && x.task.DATE3 <= request.EndDate && x.task.TESTER != null)
                    .Select(x => new
                    {
                        OWNER = x.task.TESTER,
                        x.task.SERIAL_NUMBER,
                        x.task.MODEL_NAME,
                        x.task.TEST_GROUP,
                        x.task.TEST_CODE,
                        x.task.DATA1,
                        TYPE = x.task.DATA17,
                        TIME_SAVE = x.task.DATE3,
                        CURRENT_STATUS = x.task.DATA12,
                        NEXT_STATUS = x.task.DATA11,
                        REMARK = x.task.DATA19,
                        WIP_GROUP = x.OracleDataR107 != null ? x.OracleDataR107.WIP_GROUP : null,
                        MO_NUMBER = x.OracleDataR107 != null ? x.OracleDataR107.MO_NUMBER : null,
                    })
                    .OrderBy(task => task.OWNER) // Sắp xếp theo OWNER
                    .ToListAsync();
                return Ok(new
                {
                    success = true,
                    data = result
                });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }

        // API tổng hợp summary owner theo thời gian
        [HttpPost("get-summary-owner")]
        public async Task<IActionResult> GetSummaryOwner([FromBody] TimeRequest timeRange)
        {
            try
            {
                using (var connection = new OracleConnection("User Id=TE;Password=B05te;Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=10.220.130.220)(PORT=1521)))(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=vnsfc)));"))
                {
                    await connection.OpenAsync();

                    string query = @"
                SELECT 
                    COALESCE(B1.owner, COALESCE(B2.owner, COALESCE(B3.owner, B4.owner))) AS owner,
                    B1.NHAN,
                    B2.CONFIRM,
                    B3.SAVE,
                    B4.REPAIR
                FROM (
                    SELECT COUNT(serial_number) AS NHAN, tester AS owner
                    FROM SFISM4.R_REPAIR_TASK_DETAIL_T  
                    WHERE data17 LIKE '%Nhận%'  
                      AND date3 BETWEEN TO_DATE(:StartDate, 'YYYY-MM-DD HH24:MI:SS') 
                                   AND TO_DATE(:EndDate, 'YYYY-MM-DD HH24:MI:SS')
                    GROUP BY tester
                ) B1
                LEFT JOIN (
                    SELECT COUNT(a2.serial_number) AS CONFIRM, a2.tester AS owner
                    FROM (
                        SELECT aa.* 
                        FROM (
                            SELECT * 
                            FROM SFISM4.R_REPAIR_TASK_DETAIL_T  
                            WHERE UPPER(data17) LIKE '%CONFIRM%'  
                              AND date3 BETWEEN TO_DATE(:StartDate, 'YYYY-MM-DD HH24:MI:SS') 
                                          AND TO_DATE(:EndDate, 'YYYY-MM-DD HH24:MI:SS')
                            UNION ALL
                            SELECT * 
                            FROM SFISM4.R_REPAIR_TASK_DETAIL_T  
                            WHERE UPPER(data17) LIKE '%SAVE%'  
                              AND date3 BETWEEN TO_DATE(:StartDate, 'YYYY-MM-DD HH24:MI:SS') 
                                          AND TO_DATE(:EndDate, 'YYYY-MM-DD HH24:MI:SS') 
                              AND SERIAL_NUMBER NOT IN (
                                  SELECT SERIAL_NUMBER 
                                  FROM SFISM4.R_REPAIR_TASK_DETAIL_T  
                                  WHERE UPPER(data17) LIKE '%CONFIRM%'
                              )
                        ) aa 
                        WHERE (aa.serial_number, tester) NOT IN (
                            SELECT serial_number, repairer  
                            FROM sfism4.R109 
                            WHERE repair_time BETWEEN TO_DATE(:StartDate, 'YYYY-MM-DD HH24:MI:SS') 
                                                 AND TO_DATE(:EndDate, 'YYYY-MM-DD HH24:MI:SS')
                        )
                    ) a2 
                    WHERE UPPER(data17) LIKE '%CONFIRM%'    
                    GROUP BY tester
                ) B2 ON B1.owner = B2.owner
                LEFT JOIN (
                    SELECT COUNT(a3.serial_number) AS SAVE, a3.tester AS owner
                    FROM (
                        SELECT aa.* 
                        FROM (
                            SELECT * 
                            FROM SFISM4.R_REPAIR_TASK_DETAIL_T  
                            WHERE UPPER(data17) LIKE '%CONFIRM%'  
                            UNION ALL
                            SELECT * 
                            FROM SFISM4.R_REPAIR_TASK_DETAIL_T  
                            WHERE UPPER(data17) LIKE '%SAVE%'  
                              AND SERIAL_NUMBER NOT IN (
                                  SELECT SERIAL_NUMBER 
                                  FROM SFISM4.R_REPAIR_TASK_DETAIL_T  
                                  WHERE UPPER(data17) LIKE '%CONFIRM%'
                              )
                        ) aa 
                        WHERE (aa.serial_number, tester) NOT IN (
                            SELECT serial_number, repairer  
                            FROM sfism4.R109 
                            WHERE repair_time BETWEEN TO_DATE(:StartDate, 'YYYY-MM-DD HH24:MI:SS') 
                                                 AND TO_DATE(:EndDate, 'YYYY-MM-DD HH24:MI:SS')
                        )
                    ) a3 
                    WHERE UPPER(data17) LIKE '%SAVE%'    
                    GROUP BY tester
                ) B3 ON B1.owner = B3.owner
                LEFT JOIN (
                    SELECT COUNT(serial_number) AS REPAIR, repairer AS owner
                    FROM sfism4.R109
                    WHERE repair_time BETWEEN TO_DATE(:StartDate, 'YYYY-MM-DD HH24:MI:SS') 
                                                AND TO_DATE(:EndDate, 'YYYY-MM-DD HH24:MI:SS')  
                    GROUP BY repairer
                ) B4 ON B1.owner = B4.owner
                ORDER BY owner";

                    using (var command = new OracleCommand(query, connection))
                    {
                        command.Parameters.Add(new OracleParameter("StartDate", timeRange.StartDate.ToString("yyyy-MM-dd HH:mm:ss")));
                        command.Parameters.Add(new OracleParameter("EndDate", timeRange.EndDate.ToString("yyyy-MM-dd HH:mm:ss")));

                        var data = new List<dynamic>();
                        int totalNHAN = 0, totalCONFIRM = 0, totalSAVE = 0, totalREPAIR = 0;

                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                int nhan = reader["Nhận"] == DBNull.Value ? 0 : Convert.ToInt32(reader["Nhận"]);
                                int confirm = reader["CONFIRM"] == DBNull.Value ? 0 : Convert.ToInt32(reader["CONFIRM"]);
                                int save = reader["SAVE"] == DBNull.Value ? 0 : Convert.ToInt32(reader["SAVE"]);
                                int repair = reader["REPAIR"] == DBNull.Value ? 0 : Convert.ToInt32(reader["REPAIR"]);

                                data.Add(new
                                {
                                    Owner = reader["owner"]?.ToString(),
                                    NHAN = nhan,
                                    CONFIRM = confirm,
                                    SAVE = save,
                                    REPAIR = repair
                                });

                                // C?ng d?n d? tính t?ng
                                totalNHAN += nhan;
                                totalCONFIRM += confirm;
                                totalSAVE += save;
                                totalREPAIR += repair;
                            }
                        }

                        return Ok(new
                        {
                            success = true,
                            data,
                            totals = new
                            {
                                Total_NHAN = totalNHAN,
                                Total_CONFIRM = totalCONFIRM,
                                Total_SAVE = totalSAVE,
                                Total_REPAIR = totalREPAIR
                            }
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }

        [HttpPost("get-allowed-areas")]
        public IActionResult GetAllowedAreas([FromBody] CardCodeRequest request)
        {
            if (string.IsNullOrEmpty(request.CardCode))
            {
                return BadRequest(new { success = false, message = "Mã th? không du?c d? tr?ng." });
            }

            try
            {
                // Tìm ngu?i dùng theo mã th? (Username)
                var user = _sqlContext.Users.FirstOrDefault(u => u.Username == request.CardCode);

                if (user == null)
                {
                    return NotFound(new { success = false, message = "Không tìm th?y ngu?i dùng v?i mã th? này." });
                }

                return Ok(new { success = true, allowedAreas = user.AllowedAreas });
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { success = false, message = ex.Message });
            }
        }

        [HttpPost("get-latest-tester")]
        public async Task<IActionResult> GetLatestTester([FromBody] List<string> serialNumbers)
        {
            if (serialNumbers == null || !serialNumbers.Any())
                return BadRequest(new { message = "Serial numbers list cannot be empty." });
            try
            {
                var serialNumbersList = string.Join(",", serialNumbers.Select(sn => $"'{sn}'"));
                // SQL Query ch? l?y SERIAL_NUMBER và TESTER
                string query = $@"
                    SELECT *
                        FROM (
                            SELECT
                                DETAIL_T.SERIAL_NUMBER,
                                DETAIL_T.TESTER,
                                DETAIL_T.DATE3,
                                DETAIL_T.DATA17
                            FROM SFISM4.R_REPAIR_TASK_DETAIL_T DETAIL_T
                            WHERE DETAIL_T.SERIAL_NUMBER IN ({serialNumbersList}) 
                            AND DETAIL_T.DATA17 = 'confirm'
                            ORDER BY DETAIL_T.DATE3 DESC
                        )
                        WHERE ROWNUM = 1
                        ";

                // K?t n?i co s? d? li?u Oracle và th?c hi?n truy v?n
                using (var command = _oracleContext.Database.GetDbConnection().CreateCommand())
                {
                    command.CommandText = query;
                    command.CommandType = System.Data.CommandType.Text;

                    _oracleContext.Database.OpenConnection(); // M? k?t n?i

                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        var results = new List<SerialNumberTesterDto>();
                        while (await reader.ReadAsync())
                        {
                            results.Add(new SerialNumberTesterDto
                            {
                                SERIAL_NUMBER = reader["SERIAL_NUMBER"].ToString(),
                                TESTER = reader["TESTER"].ToString()
                            });
                        }

                        if (!results.Any())
                            return NotFound(new { message = "No records found for the given Serial Numbers!" });

                        return Ok(results);
                    }
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, new { message = "An error occurred while processing the request.", error = ex.Message });
            }
        }

        //API get-retest-summary
        [HttpPost("get-retest-summary")]
        public async Task<IActionResult> GetRetestSummary([FromBody] TimeRequest request)
        {
            try
            {
                using (var connection = new OracleConnection(_oracleContext.Database.GetDbConnection().ConnectionString))
                {
                    await connection.OpenAsync();

                    string query = @"
                SELECT 
                    tester AS ID,
                    COUNT(CASE WHEN test_result = 'PASS' THEN 1 END) AS QTY_OK,
                    COUNT(CASE WHEN test_result = 'FAIL' THEN 1 END) AS QTY_NG,
                    COUNT(CASE WHEN test_result = 'not data' THEN 1 END) AS NOT_DEFINE,
                    COUNT(*) AS TOTAL
                FROM (
                    SELECT 
                        tester,
                        NVL(REGEXP_SUBSTR(data19, 'KQ:([^/]+)', 1, 1, NULL, 1), 'not data') AS test_result
                    FROM sfism4.r_repair_task_detail_t 
                    WHERE data12 = 'RETEST'
                    AND data17 = 'confirm'
                    AND (data19 IS NULL OR data19 != 'CONFIRM_PUT_B36R') 
                    AND date3 BETWEEN TO_DATE(:StartDate, 'YYYY-MM-DD HH24:MI:SS') 
                                  AND TO_DATE(:EndDate, 'YYYY-MM-DD HH24:MI:SS')
                ) sub
                GROUP BY tester
                ORDER BY TOTAL DESC";

                    using (var command = new OracleCommand(query, connection))
                    {
                        command.Parameters.Add(new OracleParameter("StartDate", request.StartDate.ToString("yyyy-MM-dd HH:mm:ss")));
                        command.Parameters.Add(new OracleParameter("EndDate", request.EndDate.ToString("yyyy-MM-dd HH:mm:ss")));

                        var data = new List<dynamic>();

                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                data.Add(new
                                {
                                    ID = reader["ID"].ToString(),
                                    QTY_OK = Convert.ToInt32(reader["QTY_OK"]),
                                    QTY_NG = Convert.ToInt32(reader["QTY_NG"]),
                                    NOT_DEFINE = Convert.ToInt32(reader["NOT_DEFINE"]),
                                    TOTAL = Convert.ToInt32(reader["TOTAL"])
                                });
                            }
                        }

                        return Ok(new
                        {
                            success = true,
                            data
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }

        //API get-retest-detail-normal
        [HttpPost("get-retest-details-normal")]
        public async Task<IActionResult> GetRetestDetails([FromBody] TimeRequest request)
        {
            try
            {
                using (var connection = new OracleConnection(_oracleContext.Database.GetDbConnection().ConnectionString))
                {
                    await connection.OpenAsync();

                    string query = @"
                SELECT 
                    date3,
                    tester,
                    serial_number,
                    model_name,
                    test_group,
                    data1,
                    NVL(REGEXP_SUBSTR(data19, 'KQ:([^/]+)', 1, 1, NULL, 1), 'not data') AS test_result,
                    NVL(REGEXP_SUBSTR(data19, 'remark:([^/]+)', 1, 1, NULL, 1), 'not data') AS remark
                FROM sfism4.r_repair_task_detail_t 
                WHERE data12 = 'RETEST'
                AND data17 = 'confirm'
                AND (data19 IS NULL OR data19 != 'CONFIRM_PUT_B36R')
                AND data1 NOT LIKE '%mcu_test_group%' 
                AND data1 NOT LIKE '%DPU_MEM_TEST%' 
                AND date3 BETWEEN TO_DATE(:StartDate, 'YYYY-MM-DD HH24:MI:SS') 
                              AND TO_DATE(:EndDate, 'YYYY-MM-DD HH24:MI:SS')
                ORDER BY tester DESC";

                    using (var command = new OracleCommand(query, connection))
                    {
                        command.Parameters.Add(new OracleParameter("StartDate", request.StartDate.ToString("yyyy-MM-dd HH:mm:ss")));
                        command.Parameters.Add(new OracleParameter("EndDate", request.EndDate.ToString("yyyy-MM-dd HH:mm:ss")));

                        var data = new List<dynamic>();

                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                data.Add(new
                                {
                                    Date = reader["date3"] != DBNull.Value ? Convert.ToDateTime(reader["date3"]) : (DateTime?)null,
                                    Tester = reader["tester"].ToString(),
                                    SerialNumber = reader["serial_number"].ToString(),
                                    ModelName = reader["model_name"].ToString(),
                                    TestGroup = reader["test_group"].ToString(),
                                    Data1 = reader["data1"].ToString(),
                                    TestResult = reader["test_result"].ToString(),
                                    Remark = reader["remark"].ToString()
                                });
                            }
                        }

                        return Ok(new
                        {
                            success = true,
                            data
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }

        //API get-retest-detail-MCU
        [HttpPost("get-retest-mcu-test-group")]
        public async Task<IActionResult> GetRetestMCUTestGroup([FromBody] TimeRequest request)
        {
            try
            {
                using (var connection = new OracleConnection(_oracleContext.Database.GetDbConnection().ConnectionString))
                {
                    await connection.OpenAsync();
                    string query = @"
                        SELECT 
                            date3,
                            tester,
                            serial_number,
                            model_name,
                            test_group,
                            data1,
                            NVL(REGEXP_SUBSTR(data19, 'KQ:([^/]+)', 1, 1, NULL, 1), 'not data') AS test_result,
                            NVL(REGEXP_SUBSTR(data19, 'remark:([^/]+)', 1, 1, NULL, 1), 'not data') AS remark
                        FROM sfism4.r_repair_task_detail_t 
                        WHERE data12 = 'RETEST'
                        AND data17 = 'confirm'
                        AND (data19 IS NULL OR data19 != 'CONFIRM_PUT_B36R')
                        AND data1 LIKE '%mcu_test_group%' 
                        AND date3 BETWEEN TO_DATE(:StartDate, 'YYYY-MM-DD HH24:MI:SS') 
                                      AND TO_DATE(:EndDate, 'YYYY-MM-DD HH24:MI:SS')
                        ORDER BY tester DESC";

                    using (var command = new OracleCommand(query, connection))
                    {
                        command.Parameters.Add(new OracleParameter("StartDate", request.StartDate.ToString("yyyy-MM-dd HH:mm:ss")));
                        command.Parameters.Add(new OracleParameter("EndDate", request.EndDate.ToString("yyyy-MM-dd HH:mm:ss")));

                        var data = new List<dynamic>();

                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                data.Add(new
                                {
                                    Date = reader["date3"] != DBNull.Value ? Convert.ToDateTime(reader["date3"]) : (DateTime?)null,
                                    Tester = reader["tester"].ToString(),
                                    SerialNumber = reader["serial_number"].ToString(),
                                    ModelName = reader["model_name"].ToString(),
                                    TestGroup = reader["test_group"].ToString(),
                                    Data1 = reader["data1"].ToString(),
                                    TestResult = reader["test_result"].ToString(),
                                    Remark = reader["remark"].ToString()
                                });
                            }
                        }

                        return Ok(new
                        {
                            success = true,
                            data
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }

        //API get-retest-dpu-mem-test
        [HttpPost("get-retest-dpu-mem-test")]
        public async Task<IActionResult> GetRetestDPUMemTest([FromBody] TimeRequest request)
        {
            try
            {
                using (var connection = new OracleConnection(_oracleContext.Database.GetDbConnection().ConnectionString))
                {
                    await connection.OpenAsync();

                    string query = @"
                SELECT 
                    date3,
                    tester,
                    serial_number,
                    model_name,
                    test_group,
                    data1,
                    NVL(REGEXP_SUBSTR(data19, 'KQ:([^/]+)', 1, 1, NULL, 1), 'not data') AS test_result,
                    NVL(REGEXP_SUBSTR(data19, 'remark:([^/]+)', 1, 1, NULL, 1), 'not data') AS remark
                FROM sfism4.r_repair_task_detail_t 
                WHERE data12 = 'RETEST'
                AND data17 = 'confirm'
                AND (data19 IS NULL OR data19 != 'CONFIRM_PUT_B36R')
                AND data1 LIKE '%DPU_MEM_TEST%' 
                AND date3 BETWEEN TO_DATE(:StartDate, 'YYYY-MM-DD HH24:MI:SS') 
                              AND TO_DATE(:EndDate, 'YYYY-MM-DD HH24:MI:SS')
                ORDER BY tester DESC";

                    using (var command = new OracleCommand(query, connection))
                    {
                        command.Parameters.Add(new OracleParameter("StartDate", request.StartDate.ToString("yyyy-MM-dd HH:mm:ss")));
                        command.Parameters.Add(new OracleParameter("EndDate", request.EndDate.ToString("yyyy-MM-dd HH:mm:ss")));

                        var data = new List<dynamic>();

                        using (var reader = await command.ExecuteReaderAsync())
                        {
                            while (await reader.ReadAsync())
                            {
                                data.Add(new
                                {
                                    Date = reader["date3"] != DBNull.Value ? Convert.ToDateTime(reader["date3"]) : (DateTime?)null,
                                    Tester = reader["tester"].ToString(),
                                    SerialNumber = reader["serial_number"].ToString(),
                                    ModelName = reader["model_name"].ToString(),
                                    TestGroup = reader["test_group"].ToString(),
                                    Data1 = reader["data1"].ToString(),
                                    TestResult = reader["test_result"].ToString(),
                                    Remark = reader["remark"].ToString()
                                });
                            }
                        }

                        return Ok(new
                        {
                            success = true,
                            data
                        });
                    }
                }
            }
            catch (Exception ex)
            {
                return StatusCode(500, new
                {
                    success = false,
                    message = ex.Message
                });
            }
        }

    }
}