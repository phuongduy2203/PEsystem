using API_WEB.Models.Repositories;
using API_WEB.ModelsDB;
using API_WEB.ModelsOracle;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Oracle.ManagedDataAccess.Client;

namespace API_WEB.Controllers.Repositories
{
    public class SearchRepoController : Controller
    {
        private readonly CSDL_NE _sqlContext;
        private readonly OracleDbContext _oracleContext;

        public SearchRepoController(CSDL_NE sqlContext, OracleDbContext oracleContext)
        {
            _sqlContext = sqlContext;
            _oracleContext = oracleContext;
        }

        [HttpPost("SearchProductsBySN")]
        public async Task<IActionResult> SearchProductsBySN([FromBody] List<string> serialNumbers)
        {
            try
            {
                if (serialNumbers == null || !serialNumbers.Any())
                {
                    return BadRequest(new { success = false, message = "Danh sách serialNumbers rỗng." });
                }

                var results = new List<SearchProductResult>();
                var notFoundSerialNumbers = new List<string>();

                // 1. Tìm tất cả serialNumbers trong SQL Server
                var productsFromSql = await _sqlContext.Products
                    .Include(p => p.Shelf)
                    .Where(p => serialNumbers.Contains(p.SerialNumber))
                    .ToListAsync();

                var foundSerialNumbersInSql = productsFromSql.Select(p => p.SerialNumber).ToList();
                var remainingSerialNumbers = serialNumbers.Except(foundSerialNumbersInSql).ToList();

                // 2. Lấy dữ liệu từ Oracle
                var oracleData = await GetOracleDataAsync(serialNumbers);

                // 3. Kết hợp dữ liệu từ SQL Server và Oracle
                foreach (var product in productsFromSql)
                {
                    var oracleInfo = oracleData.GetValueOrDefault(product.SerialNumber);

                    results.Add(new SearchProductResult
                    {
                        SerialNumber = product.SerialNumber,
                        ProductLine = product?.ProductLine ?? "",
                        LevelNumber = product?.LevelNumber,
                        ShelfCode = product?.Shelf?.ShelfCode ?? "",
                        TrayNumber = product?.TrayNumber,
                        PositionInTray = product?.PositionInTray,
                        ColumnNumber = product?.ColumnNumber,
                        EntryDate = product?.EntryDate,
                        BorrowDate = product?.BorrowDate,
                        BorrowPerson = product?.BorrowPerson ?? "",
                        EntryPerson = product?.EntryPerson ?? "",
                        BorrowStatus = product?.BorrowStatus ?? "Available",
                        Note = product?.Note ?? "",
                        MoNumber = oracleInfo?.MO_NUMBER ?? "",
                        Data1 = oracleInfo?.DATA1 ?? "",
                        ModelName = oracleInfo?.MODEL_NAME ?? "",
                        TestGroup = oracleInfo?.TEST_GROUP ?? "",
                        TestCode = oracleInfo?.TEST_CODE ?? "",
                        ReasonCode = oracleInfo?.REASON_CODE ?? "",
                        WipGroup = oracleInfo?.WIP_GROUP ?? ""
                    });
                }

                notFoundSerialNumbers = serialNumbers.Except(results.Select(r => r.SerialNumber)).ToList();

                return Ok(new
                {
                    success = true,
                    totalFound = results.Count,
                    totalNotFound = notFoundSerialNumbers.Count,
                    results,
                    notFoundSerialNumbers
                });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"System Error: {ex.Message}");
                return StatusCode(500, new { success = false, message = $"Lỗi hệ thống: {ex.Message}" });
            }
        }

        public async Task<Dictionary<string, R_REPAIR_TASK_T>> GetOracleDataAsync(List<string> serialNumbers)
        {
            if (serialNumbers == null || serialNumbers.Count == 0)
            {
                return new Dictionary<string, R_REPAIR_TASK_T>();
            }

            var result = new Dictionary<string, R_REPAIR_TASK_T>();

            try
            {
                await using var connection = new OracleConnection(_oracleContext.Database.GetDbConnection().ConnectionString);
                await connection.OpenAsync();

                string query = @"
            SELECT r.SERIAL_NUMBER, r.MO_NUMBER, r.MODEL_NAME, r.TEST_GROUP, r.TEST_CODE, r.DATA1, r.DATA11, r.DATA12, r.DATE3, r.TESTER, r.DATA13, r.DATA17, r.DATA18, r.DATA19,
                   s.WIP_GROUP
            FROM SFISM4.R_REPAIR_TASK_T r
            LEFT JOIN SFISM4.R107 s ON r.SERIAL_NUMBER = s.SERIAL_NUMBER
            WHERE r.SERIAL_NUMBER IN (" + string.Join(",", serialNumbers.Select(s => $"'{s}'")) + ")";

                await using var command = new OracleCommand(query, connection);
                await using var reader = await command.ExecuteReaderAsync();

                while (await reader.ReadAsync())
                {
                    var item = new R_REPAIR_TASK_T
                    {
                        SERIAL_NUMBER = reader["SERIAL_NUMBER"]?.ToString() ?? "",
                        MO_NUMBER = reader["MO_NUMBER"]?.ToString() ?? "",
                        MODEL_NAME = reader["MODEL_NAME"]?.ToString() ?? "",
                        TEST_GROUP = reader["TEST_GROUP"]?.ToString() ?? "",
                        TEST_CODE = reader["TEST_CODE"]?.ToString() ?? "",
                        DATA1 = reader["DATA1"]?.ToString() ?? "",
                        DATA11 = reader["DATA11"]?.ToString() ?? "",
                        DATA12 = reader["DATA12"]?.ToString() ?? "",
                        DATE3 = reader["DATE3"] == DBNull.Value ? null : Convert.ToDateTime(reader["DATE3"]),
                        TESTER = reader["TESTER"]?.ToString() ?? "",
                        DATA13 = reader["DATA13"]?.ToString() ?? "",
                        DATA17 = reader["DATA17"]?.ToString() ?? "",
                        DATA18 = reader["DATA18"]?.ToString() ?? "",
                        DATA19 = reader["DATA19"]?.ToString() ?? "",
                        WIP_GROUP = reader["WIP_GROUP"]?.ToString() ?? ""
                    };

                    result[item.SERIAL_NUMBER] = item;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching data from Oracle: {ex.Message}");
            }

            return result;
        }


        [HttpGet("SearchByCriteria")]
        public async Task<IActionResult> SearchByCriteria(
        string? modelName,
        string? wipGroup,
        string? data1,
        string? testCode,
        string? borrowStatus)
        {
            try
            {
                // 1️⃣ Lấy danh sách SerialNumber từ bảng `Product`
                var queryProducts = _sqlContext.Products
                    .Include(p => p.Shelf)
                    .AsQueryable();

                if (!string.IsNullOrEmpty(borrowStatus))
                {
                    queryProducts = queryProducts.Where(p => p.BorrowStatus == borrowStatus);
                }

                var productsFromSql = await queryProducts.ToListAsync();
                var serialNumbersInSql = productsFromSql.Select(p => p.SerialNumber).ToList();

                if (!serialNumbersInSql.Any())
                {
                    return Ok(new { success = true, totalResults = 0, results = new List<SearchProductResult>() });
                }

                // 2️⃣ Chia danh sách SerialNumber thành các nhóm tối đa 1000 phần tử để tránh lỗi ORA-01795
                var batchedSerialNumbers = serialNumbersInSql
                    .Select((sn, index) => new { Index = index, SerialNumber = sn })
                    .GroupBy(x => x.Index / 1000)
                    .Select(g => g.Select(x => x.SerialNumber).ToList())
                    .ToList();

                var oracleResults = new List<SearchProductResult>();

                await using var connection = new OracleConnection(_oracleContext.Database.GetDbConnection().ConnectionString);
                await connection.OpenAsync();

                foreach (var batch in batchedSerialNumbers)
                {
                    var query = @"
                SELECT a.SERIAL_NUMBER, a.MO_NUMBER, a.MODEL_NAME, a.TEST_GROUP, a.TEST_CODE, 
                       a.DATA1, a.DATA11, a.DATA12, a.DATE3, a.TESTER, a.DATA13, a.DATA17, 
                       a.DATA18, a.DATA19, b.WIP_GROUP
                FROM SFISM4.R_REPAIR_TASK_T a
                LEFT JOIN SFISM4.R107 b ON a.SERIAL_NUMBER = b.SERIAL_NUMBER
                WHERE a.SERIAL_NUMBER IN (" + string.Join(",", batch.Select((_, i) => $":serial{i}")) + ")";

                    var parameters = batch.Select((sn, i) => new OracleParameter($":serial{i}", sn)).ToList();

                    if (!string.IsNullOrEmpty(modelName))
                    {
                        query += " AND a.MODEL_NAME LIKE :modelName";
                        parameters.Add(new OracleParameter("modelName", $"%{modelName}%"));
                    }
                    if (!string.IsNullOrEmpty(wipGroup))
                    {
                        query += " AND b.WIP_GROUP LIKE :wipGroup";
                        parameters.Add(new OracleParameter("wipGroup", $"%{wipGroup}%"));
                    }
                    if (!string.IsNullOrEmpty(data1))
                    {
                        query += " AND a.DATA1 LIKE :data1";
                        parameters.Add(new OracleParameter("data1", $"%{data1}%"));
                    }
                    if (!string.IsNullOrEmpty(testCode))
                    {
                        query += " AND a.TEST_CODE LIKE :testCode";
                        parameters.Add(new OracleParameter("testCode", $"%{testCode}%"));
                    }

                    await using var command = new OracleCommand(query, connection);
                    command.Parameters.AddRange(parameters.ToArray());

                    await using var reader = await command.ExecuteReaderAsync();
                    while (await reader.ReadAsync())
                    {
                        oracleResults.Add(new SearchProductResult
                        {
                            SerialNumber = reader["SERIAL_NUMBER"]?.ToString() ?? "",
                            MoNumber = reader["MO_NUMBER"]?.ToString() ?? "",
                            ModelName = reader["MODEL_NAME"]?.ToString() ?? "",
                            TestGroup = reader["TEST_GROUP"]?.ToString() ?? "",
                            TestCode = reader["TEST_CODE"]?.ToString() ?? "",
                            Data1 = reader["DATA1"]?.ToString() ?? "",
                            WipGroup = reader["WIP_GROUP"]?.ToString() ?? ""
                        });
                    }
                }

                // 3️⃣ Ghép dữ liệu từ SQL Server với dữ liệu Oracle
                var finalResults = oracleResults.Select(result =>
                {
                    var product = productsFromSql.FirstOrDefault(p => p.SerialNumber == result.SerialNumber);
                    if (product != null)
                    {
                        result.ProductLine = product.ProductLine;
                        result.LevelNumber = product.LevelNumber;
                        result.ShelfCode = product.Shelf?.ShelfCode ?? "";
                        result.TrayNumber = product.TrayNumber;
                        result.PositionInTray = product.PositionInTray;
                        result.ColumnNumber = product.ColumnNumber;
                        result.EntryDate = product.EntryDate;
                        result.BorrowDate = product.BorrowDate;
                        result.BorrowPerson = product.BorrowPerson;
                        result.EntryPerson = product.EntryPerson;
                        result.BorrowStatus = product.BorrowStatus;
                        result.Note = product.Note;
                    }
                    return result;
                }).ToList();

                return Ok(new { success = true, totalResults = finalResults.Count, results = finalResults });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error searching data from Oracle: {ex.Message}");
                return StatusCode(500, new { success = false, message = $"Lỗi hệ thống: {ex.Message}" });
            }
        }

        [HttpPost("UpdateKanbanGroupForAll")]
        public async Task<IActionResult> UpdateKanbanGroupForAll()
        {
            try
            {
                Console.WriteLine("🔄 Bắt đầu cập nhật KANBAN_GROUP cho tất cả sản phẩm...");

                // 1️⃣ Lấy danh sách SerialNumber từ bảng Products trong SQL Server
                var allProducts = await _sqlContext.Products.ToListAsync();
                var serialNumbers = allProducts.Select(p => p.SerialNumber).ToList();

                if (!serialNumbers.Any())
                {
                    return Ok(new { success = false, message = "Không có sản phẩm nào trong bảng Products!" });
                }

                Console.WriteLine($"✅ Tìm thấy {serialNumbers.Count} sản phẩm cần cập nhật...");

                var kanbanMapping = new Dictionary<string, string>();

                await using var connection = new OracleConnection(_oracleContext.Database.GetDbConnection().ConnectionString);
                await connection.OpenAsync();

                // 2️⃣ Chia danh sách SerialNumber thành từng nhóm nhỏ (tối đa 1000 SN để tránh lỗi ORA-01795)
                var batchedSerialNumbers = serialNumbers
                    .Select((sn, index) => new { Index = index, SerialNumber = sn })
                    .GroupBy(x => x.Index / 1000)
                    .Select(g => g.Select(x => x.SerialNumber).ToList())
                    .ToList();

                foreach (var batch in batchedSerialNumbers)
                {
                    // Truy vấn Oracle để lấy KANBAN_GROUP
                    string kanbanQuery = @"
                SELECT SERIAL_NUMBER, WIP_GROUP 
                FROM SFISM4.Z_KANBAN_TRACKING_T 
                WHERE SERIAL_NUMBER IN (" + string.Join(",", batch.Select((_, i) => $":serial{i}")) + ")";

                    var parameters = batch.Select((sn, i) => new OracleParameter($":serial{i}", sn)).ToList();

                    await using var command = new OracleCommand(kanbanQuery, connection);
                    command.Parameters.AddRange(parameters.ToArray());

                    await using var reader = await command.ExecuteReaderAsync();
                    while (await reader.ReadAsync())
                    {
                        string serialNumber = reader["SERIAL_NUMBER"]?.ToString() ?? "";
                        string kanbanGroup = reader["WIP_GROUP"]?.ToString() ?? "Before";

                        kanbanMapping[serialNumber] = kanbanGroup;
                    }
                }
                // 3️⃣ Cập nhật từng sản phẩm trong SQL Server
                foreach (var product in allProducts)
                {
                    if (kanbanMapping.TryGetValue(product.SerialNumber, out string kanbanGroup))
                    {
                        product.KANBAN_WIP = kanbanGroup;
                    }
                    else
                    {
                        product.KANBAN_WIP = "Before";
                    }
                }

                await _sqlContext.SaveChangesAsync();

                Console.WriteLine("✅ Hoàn tất cập nhật KANBAN_GROUP vào Products.");
                return Ok(new { success = true, message = $"Đã cập nhật KANBAN_GROUP cho {allProducts.Count} sản phẩm!" });
            }
            catch (OracleException ex)
            {
                Console.WriteLine($"❌ Oracle ERROR: {ex.Message}");
                return StatusCode(500, new { success = false, message = $"Lỗi Oracle: {ex.Message}" });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"❌ System ERROR: {ex.Message}");
                return StatusCode(500, new { success = false, message = $"Lỗi Hệ Thống: {ex.Message}" });
            }
        }

    }
}
