@{
    ViewData["Title"] = "Bonepile";
    Layout = "~/Areas/Bonepile/Views/Shared/_Layout_Bonepile.cshtml";
}

<!-- Header -->
<header>
    <h1>Bonepile 2.0</h1>
    <div class="row">
        <div class="col-md-3">
            <label for="startDate">Từ ngày:</label>
            <input type="datetime-local" id="startDate" value="2025-03-16T11:00">
        </div>
        <div class="col-md-3">
            <label for="endDate">Đến ngày:</label>
            <input type="datetime-local" id="endDate" />
        </div>
        <div class="col-md-3">
            <button id="applyFilters" class="btn btn-primary">Áp dụng</button>
        </div>
    </div>
</header>

<!-- KPI Cards -->
<div class="kpi-cards row my-6">
    <div class="col-md-2 col-lg-1 col-sm-3 col-3">
        <div class="card text-white bg-total smaller-card">
            <div class="card-body  smaller-text">
                <h5 class="card-title">Bonepile 2.0</h5>
                <p class="card-text" id="totalCount">N/A</p>
            </div>
        </div>
    </div>
    <div class="col-md-2 col-lg-1 col-sm-3 col-3">
        <div class="card text-white bg-waitingScrap smaller-card">
            <div class="card-body  smaller-text">
                <h5 class="card-title">WaitingApprovalScrap</h5>
                <p class="card-text" id="waitingScrapCount">N/A</p>
            </div>
        </div>
    </div>
    <div class="col-md-2 col-lg-1 col-sm-3 col-3">
        <div class="card text-white bg-repair smaller-card">
            <div class="card-body  smaller-text">
                <h5 class="card-title">UnderRepair</h5>
                <p class="card-text" id="repairCount">N/A</p>
            </div>
        </div>
    </div>
    <div class="col-md-2 col-lg-1 col-sm-3 col-3">
        <div class="card text-white bg-online smaller-card">
            <div class="card-body  smaller-text">
                <h5 class="card-title">Online</h5>
                <p class="card-text" id="onlinePd">N/A</p>
            </div>
        </div>
    </div>
    <div class="col-md-2 col-lg-1 col-sm-3 col-3">
        <div class="card text-white bg-kanban smaller-card">
            <div class="card-body smaller-text">
                <h5 class="card-title">KANBAN_IN</h5>
                <p class="card-text" id="kanbanIn">N/A</p>
            </div>
        </div>
    </div>
</div>
<div class="kpi-cards row my-6">
    <div class="col-md-2 col-lg-1 col-sm-3 col-3">
        <div class="card text-white bg-link smaller-card">
            <div class="card-body smaller-text">
                <h5 class="card-title">Chờ Link</h5>
                <p class="card-text" id="waitingLink">N/A</p>
            </div>
        </div>
    </div>
    <div class="col-md-2 col-lg-1 col-sm-3 col-3">
        <div class="card text-white bg-checkOut smaller-card">
            <div class="card-body smaller-text">
                <h5 class="card-title">Chờ CheckOut</h5>
                <p class="card-text" id="waitingOut">N/A</p>
            </div>
        </div>
    </div>
    <div class="col-md-2 col-lg-1 col-sm-3 col-3">
        <div class="card text-white bg-checkIn smaller-card">
            <div class="card-body smaller-text">
                <h5 class="card-title">Chờ CheckIn</h5>
                <p class="card-text" id="waitingIn">N/A</p>
            </div>
        </div>
    </div>
    <div class="col-md-2 col-lg-1 col-sm-3 col-3">
        <div class="card text-white bg-linkedDone smaller-card">
            <div class="card-body smaller-text">
                <h5 class="card-title">Đã Link</h5>
                <p class="card-text" id="linkedDone">N/A</p>
            </div>
        </div>
    </div>

    <div class="col-md-2 col-lg-1 col-sm-3 col-3">
        <div class="card text-white bg-repair smaller-card">
            <div class="card-body smaller-text">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <h5 class="card-title">Nhập Kanban</h5>
                    <i class="fa fa-calendar fa-2x" id="pickDateBtn" aria-hidden="true"></i>
                </div>
                <p class="card-text" id="kanbanDone">N/A</p>
            </div>
        </div>
    </div>

</div>

<!--MODAL CHỌN THỜI GIAN-->
<div class="modal fade" id="dateModal" tabindex="-1">
    <div class="modal-dialog modal-sm">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Chọn khoảng thời gian</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <label>Từ:</label>
                <input type="datetime-local" id="fromTime" class="form-control mb-2" />
                <label>Đến:</label>
                <input type="datetime-local" id="toTime" class="form-control" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="applyDate">Áp dụng</button>
            </div>
        </div>
    </div>
</div>

<!-- Donut Chart and sumMaterialsTable -->
<div class="row my-4">
    <!-- Biểu đồ phân bố trạng thái -->
    <div class="col-md-4">
        <div class="card">
            <div class="card-body" style="display: flex; flex-direction: column; align-items: center;">
                <h5 class="card-title">Phân bố trạng thái</h5>
                <canvas id="statusDonutChart"></canvas>
            </div>
        </div>
    </div>

    <!-- Bảng sumMaterialsTable -->
    <div class="col-md-8">
        <div class="card">
            <!--HTML CỦA SPINER-->
            <div id="spinner-overlay">
                <span class="loader"></span>
            </div>
            <div class="card-body">
                <table id="sumMaterialsTable" class="display table table-bordered mt-1 table-striped datatable-table" style="width:100%">
                    <div class="col-md-2">
                        <div class="form-group">
                            <select id="statusFilter" class="form-control">
                                <option value="">Tất cả trạng thái</option>
                                <option value="Repair">Repair</option>
                                <option value="CheckOut">CheckOut</option>
                                <option value="CheckIn">CheckIn</option>
                                <option value="WaitingLink">WaitingLink</option>
                                <option value="WaitingKanBanIn">WaitingKanBanIn</option>
                                <option value="Online">Online</option>
                                <option value="WaitingApproveScrap">WaitingApproveScrap</option>
                                <option value="Scrap">Scrap</option>
                            </select>
                        </div>
                    </div>
                    <thead>
                        <tr>
                            <th>SERIAL_NUMBER</th>
                            <th>PRODUCT_LINE</th>
                            <th>MODEL_NAME</th>
                            <th>MO_NUMBER</th>
                            <th>WIP_GROUP</th>
                            <th>FAIL_STATION</th>
                            <th>TEST_CODE</th>
                            <th>ERROR_DESC</th>
                            <th>TIME</th>
                            <th>FLAG</th>
                            <th>PO_NO</th>
                            <th>PO_ITEM</th>
                            <th>FAIL_AGING</th>
                            <th>VERSION_CODE</th>
                            <th>WORK_FLAG</th>
                            <th>ERROR_FLAG</th>
                            <th>MO_NEW</th>
                            <th>STATUS</th>
                            <th>CHECKIN_TIME</th>
                            <th>CHECKOUT_TIME</th>
                            <th>SCRAP_STATUS</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/assets/areas/bonepile/js/bonepile2_0.js?v=@DateTime.Now.Ticks"></script>
    <style>
        .smaller-card {
            transform: scale(0.75); /* Reduce card size by 25% */
            margin: 0 -5px; /* Minimize spacing between cards */
        }

        .smaller-text .card-title {
            font-size: 1.5rem; /* Smaller title font size */
        }

        .smaller-text .card-text {
            font-size: 1.5rem; /* Smaller text font size */
        }

        .kpi-cards {
            display: flex;
            flex-wrap: nowrap; /* Keep cards in a single row */
        }

            .kpi-cards .col-md-2,
            .kpi-cards .col-lg-1,
            .kpi-cards .col-sm-3,
            .kpi-cards .col-3 {
                flex: 0 0 20%; /* Divide equally for 10 cards (100% / 10) */
                max-width: 20%; /* Ensure equal width */
                padding: 0; /* Reduce padding for tighter fit */
            }

        #sumMaterialsTable th, #sumMaterialsTable td {
            width: 120px !important;
            max-width: 120px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

    </style>
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const pickBtn = document.getElementById("pickDateBtn");

            const pad = (n) => String(n).padStart(2, "0");

            // format cho input datetime-local (LOCAL, không UTC)
            const toLocalInputValue = (d) =>
                `${d.getFullYear()}-${pad(d.getMonth() + 1)}-${pad(d.getDate())}T${pad(d.getHours())}:${pad(d.getMinutes())}`;

            // format cho API (LOCAL)
            const toApiParam = (d) =>
                `${d.getFullYear()}-${pad(d.getMonth() + 1)}-${pad(d.getDate())} ${pad(d.getHours())}:${pad(d.getMinutes())}`;

            // parse từ chuỗi 'YYYY-MM-DDTHH:mm' (LOCAL) về Date an toàn (không bị UTC)
            const parseLocalInput = (s) => {
                const [date, time] = s.split("T");
                const [y, m, d] = date.split("-").map(Number);
                const [hh, mm] = time.split(":").map(Number);
                return new Date(y, m - 1, d, hh, mm, 0, 0);
            };

            // Khoảng mặc định: hôm qua 07:30 -> hiện tại
            const getDefaultRange = () => {
                const now = new Date();
                const from = new Date(now);
                from.setDate(now.getDate() - 1);
                from.setHours(7, 30, 0, 0);
                return { from, to: now };
            };

            // Lưu/đọc lựa chọn gần nhất
            const LS_KEY = "bonepile2_range";
            let currentFrom, currentTo;

            const loadSavedRange = () => {
                const raw = localStorage.getItem(LS_KEY);
                if (!raw) return false;
                try {
                    const obj = JSON.parse(raw);
                    currentFrom = new Date(obj.from); // lưu epoch/ISO đều ok, mình dùng Date để hiển thị LOCAL
                    currentTo = new Date(obj.to);
                    if (isNaN(currentFrom) || isNaN(currentTo)) return false;
                    return true;
                } catch { return false; }
            };
            const saveRange = () => {
                localStorage.setItem(LS_KEY, JSON.stringify({
                    from: currentFrom.getTime(), // lưu epoch để tránh lệch múi giờ
                    to: currentTo.getTime()
                }));
            };

            // API
            async function loadSummary(from, to) {
                try {
                    const url = `http://10.220.130.119:9090/api/Bonepile2/waiting-summary?from=${toApiParam(from)}&to=${toApiParam(to)}`;
                    const res = await fetch(url);
                    if (!res.ok) throw new Error("API lỗi");
                    const data = await res.json();
                    document.getElementById("linkedDone").innerText = data.totals.linked;
                    document.getElementById("kanbanDone").innerText = data.totals.linkedKanban;
                } catch (err) {
                    Swal.fire("Lỗi", "Không lấy được dữ liệu: " + err.message, "error");
                }
            }

            // Khởi tạo currentFrom/currentTo (ưu tiên last selection, không có thì default)
            if (!loadSavedRange()) {
                const def = getDefaultRange();
                currentFrom = def.from;
                currentTo = def.to;
            }

            // Gọi API ngay lần đầu load với khoảng đang có
            loadSummary(currentFrom, currentTo);

            // SweetAlert2 chọn lại khoảng thời gian (giữ nguyên lần chọn trước)
            pickBtn.addEventListener("click", async () => {
                const { value: formValues } = await Swal.fire({
                    title: "Chọn khoảng thời gian",
                    html: `
                <label style="display:block;text-align:left;">Từ:</label>
                <input id="swalFrom" type="datetime-local" class="swal2-input"
                       value="${toLocalInputValue(currentFrom)}">
                <label style="display:block;text-align:left;">Đến:</label>
                <input id="swalTo" type="datetime-local" class="swal2-input"
                       value="${toLocalInputValue(currentTo)}">
              `,
                    focusConfirm: false,
                    showCancelButton: true,
                    confirmButtonText: "Áp dụng",
                    cancelButtonText: "Hủy",
                    preConfirm: () => {
                        const fromVal = document.getElementById("swalFrom").value;
                        const toVal = document.getElementById("swalTo").value;
                        if (!fromVal || !toVal) {
                            Swal.showValidationMessage("Vui lòng chọn đủ thời gian!");
                            return false;
                        }
                        const f = parseLocalInput(fromVal);
                        const t = parseLocalInput(toVal);
                        if (isNaN(f) || isNaN(t)) {
                            Swal.showValidationMessage("Thời gian không hợp lệ!");
                            return false;
                        }
                        if (t <= f) {
                            Swal.showValidationMessage("`Đến` phải lớn hơn `Từ`!");
                            return false;
                        }
                        return { f, t };
                    }
                });

                if (formValues) {
                    currentFrom = formValues.f;
                    currentTo = formValues.t;
                    saveRange();                 // lưu lại để lần sau mở popup giữ đúng
                    await loadSummary(currentFrom, currentTo);
                }
            });
        });
    </script>

}